<?xml version="1.0"?>

<project name="Demo Apps" default="main" basedir=".">

    <!-- set up properties -->
    <property file="${user.home}/build.properties"/>
    <property file="${user.home}/.ant.properties"/>

    <property name="name" value="demo"/>
    <property name="Name" value="Demo"/>
    <property name="version" value="0.7"/>

    <!-- Set the installation variables for Cornerstone/Phoenix -->
    <property name="phoenix.home" value="../../lib/deploy"/>
    <property name="install.dir" value="${phoenix.home}/apps"/>

    <!-- Set the properties for intermediate directory -->
    <property name="target.dir" value="target"/>
    <property name="target.lib" value="${target.dir}/lib"/>
    <property name="target.metagenerate" value="${target.dir}/metagenerate"/>
    <property name="target.src" value="${target.dir}/src"/>
    <property name="target.classes" value="${target.dir}/classes"/>

    <!-- Set the properties for source directories -->
    <property name="src.dir" value="src"/>
    <property name="java.dir" value="${src.dir}/java"/>
    <property name="manifest.dir" value="${src.dir}/manifest"/>
    <property name="conf.dir" value="${src.dir}/conf"/>

    <property name="dist.base" value="distributions"/>

    <path id="project.class.path">
        <pathelement path="${java.class.path}"/>
        <pathelement path="${target.classes}"/>
        <fileset dir="../common/lib">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="../../dist/lib">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="../../target/lib">
            <include name="*.jar"/>
        </fileset>        
        <fileset dir="../../lib/tools">
            <include name="*.jar"/>
        </fileset>        
        <!--
        <fileset dir="../../dist/tools/lib">
            <include name="**/*.jar"/>
        </fileset>
        -->
    </path>

    <property name="avalon-site.dir" value="../../avalon-site"/>
    <path id="tools.class.path">
        <fileset dir="${avalon-site.dir}/lib"/>
    </path>

    <taskdef name="sar" classname="org.apache.avalon.phoenix.tools.tasks.Sar">
        <classpath refid="project.class.path"/>
    </taskdef>

    <!-- Compiles project -->
    <target name="compile">

        <mkdir dir="${target.classes}"/>
        <mkdir dir="${target.dir}/genjava"/>
        <mkdir dir="${target.dir}/genclasses"/>
        <mkdir dir="${target.dir}/genjava2"/>
        <mkdir dir="${target.dir}/genclasses2"/>

        <javac srcdir="${java.dir}"
            destdir="${target.classes}"
            debug="${build.debug}"
            optimize="${build.optimize}"
            deprecation="${build.deprecation}">
            <classpath refid="project.class.path"/>

        </javac>

        <rmic base="${target.classes}"
            classname="org.apache.avalon.apps.demos.rmihelloworldserver.RMIHelloWorldServerImpl"
            stubVersion="1.2">
            <classpath refid="project.class.path"/>
        </rmic>

        <copy todir="${target.classes}">
            <fileset dir="${java.dir}">
                <exclude name="**/test/**"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

    </target>

    <!-- Compiles project -->
    <target name="compile">

        <mkdir dir="${target.dir}/example-classes"/>
        <mkdir dir="${target.dir}/genjava"/>
        <mkdir dir="${target.dir}/genclasses"/>
        <mkdir dir="${target.dir}/genjava2"/>
        <mkdir dir="${target.dir}/genclasses2"/>

        <javac srcdir="${java.dir}"
            destdir="${target.classes}"
            debug="${build.debug}"
            optimize="${build.optimize}"
            deprecation="${build.deprecation}">
            <classpath refid="project.class.path"/>

        </javac>

        <rmic base="${target.classes}"
            classname="org.apache.avalon.apps.demos.rmihelloworldserver.RMIHelloWorldServerImpl"
            stubVersion="1.2">
            <classpath refid="project.class.path"/>
        </rmic>

        <copy todir="${target.classes}">
            <fileset dir="${java.dir}">
                <exclude name="**/test/**"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

    </target>


    <!-- Make .xinfo and manifest automatically for blocks -->
    <target name="phoenix-metagenerate" depends="compile">

        <mkdir dir="${target.metagenerate}"/>

        <copy todir="${target.classes}">
            <fileset dir="${java.dir}">
                <exclude name="**/test/**"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

        <taskdef name="generatemeta" classname="org.apache.avalon.phoenix.tools.metagenerate.MetaGenerateTask">
            <classpath refid="project.class.path"/>
        </taskdef>

        <mkdir dir="${target.metagenerate}"/>

        <generatemeta dest="${target.metagenerate}">
            <fileset dir="${java.dir}">
                <include name="**/*.java"/>
            </fileset>
        </generatemeta>

    </target>

    <!-- Jars up project -->
    <target name="jars" depends="phoenix-metagenerate">

        <mkdir dir="${target.lib}"/>

        <jar jarfile="${target.lib}/demo-helloworld.jar"
            basedir="${target.classes}">

            <include name="org/apache/avalon/apps/demos/helloworldserver/*"/>
            <fileset dir="${target.metagenerate}">
                <include name="org/apache/avalon/apps/demos/helloworldserver/*.xinfo"/>
                <include name="org/apache/avalon/apps/demos/helloworldserver/*.mxinfo"/>
            </fileset>
        </jar>

        <jar jarfile="${target.lib}/demo-rmihelloworld.jar"
            basedir="${target.classes}">
            <include name="org/apache/avalon/apps/demos/rmihelloworldserver/*"/>
            <fileset dir="${target.metagenerate}">
                <include name="org/apache/avalon/apps/demos/rmihelloworldserver/*.xinfo"/>
                <include name="org/apache/avalon/apps/demos/rmihelloworldserver/*.mxinfo"/>
            </fileset>

        </jar>

        <jar jarfile="${target.lib}/demo-lifecycle.jar"
            basedir="${target.classes}">

            <include name="org/apache/avalon/apps/demos/lifecycledemo/*"/>
            <fileset dir="${target.metagenerate}">
                <include name="org/apache/avalon/apps/demos/lifecycledemo/*.xinfo"/>
                <include name="org/apache/avalon/apps/demos/lifecycledemo/*.mxinfo"/>
            </fileset>
        </jar>

    </target>

    <target name="main" depends="sars" description="Default target to generate build products"/>

    <target name="sars" depends="jars, demo-sar, rmidemo-sar, lifecycledemo-sar" description="Create SARs">

        <mkdir dir="dist"/>

        <copy todir="dist">
            <fileset dir="${target.lib}">
                <include name="*.sar"/>
                <include name="*-tester.jar"/>
            </fileset>
        </copy>

    </target>

    <target name="demo-sar" depends="jars" description="Create the demo SAR">

        <sar sarfile="${target.lib}/avalon-demo.sar"
            config="${conf.dir}/avalon-demo-config.xml"
            environment="${conf.dir}/avalon-demo-environment.xml"
            assembly="${conf.dir}/avalon-demo-assembly.xml">

            <lib dir="${target.lib}/">
                <include name="demo-helloworld.jar"/>
            </lib>

            <lib dir="../common/lib">
                <include name="cornerstone.jar"/>
                <include name="excalibur-thread*.jar"/>
                <include name="excalibur-pool*.jar"/>
                <include name="excalibur-collections*.jar"/>
            </lib>

        </sar>

    </target>

    <target name="rmidemo-sar" depends="jars" description="Create the RMI demo SAR">

        <sar sarfile="${target.lib}/avalon-rmidemo.sar"
            config="${conf.dir}/avalon-rmidemo-config.xml"
            environment="${conf.dir}/avalon-rmidemo-environment.xml"
            assembly="${conf.dir}/avalon-rmidemo-assembly.xml">

            <lib dir="${target.lib}/">
                <include name="demo-rmihelloworld.jar"/>
            </lib>

            <lib dir="../common/lib">
                <include name="cornerstone.jar"/>
            </lib>

        </sar>

    </target>

    <target name="lifecycledemo-sar" depends="jars" description="Create the lifecycle SAR">

        <sar sarfile="${target.lib}/avalon-lifecycledemo.sar"
            config="${conf.dir}/avalon-lifecycledemo-config.xml"
            environment="${conf.dir}/avalon-lifecycledemo-environment.xml"
            assembly="${conf.dir}/avalon-lifecycledemo-assembly.xml">

            <lib dir="${target.lib}/">
                <include name="demo-lifecycle.jar"/>
            </lib>

        </sar>

    </target>

    <!-- Performs rmi related unit tests -->
    <target name="check-rmi" depends="compile">
        <java classname="org.apache.avalon.apps.demos.rmihelloworldserver.RMIHelloWorldClient">
            <classpath refid="project.class.path"/>
            <arg value="localhost"/>
            <arg value="1099"/>
            <arg value="RMIfication Tester"/>
        </java>
    </target>

    <!-- Performs unit tests -->
    <target name="rmi-demo-test" depends="check-rmi" description="Change the HelloWorld message via the RMI API (a test aid)"/>

    <!-- Completely build all dists -->
    <target name="dist" description="Generates the distribution">

        <property name="dist.name" value="${Name}-${version}"/>

        <mkdir dir="${dist.base}"/>

        <antcall target="bin-dist" inheritAll="false">
            <param name="bin.dist.dir" value="${dist.name}"/>
        </antcall>

        <zip zipfile="${dist.base}/${dist.name}-bin.zip"
            basedir="${dist.name}/.."
            includes="${dist.name}/**"/>

        <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-bin.tar">
            <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
                <include name="${dist.name}/**"/>
            </tarfileset>
        </tar>

        <gzip zipfile="${dist.base}/${dist.name}-bin.tar.gz"
            src="${dist.base}/${dist.name}-bin.tar"/>

        <delete file="${dist.base}/${dist.name}-bin.tar"/>
        <delete dir="${dist.name}"/>

    </target>

    <!-- Creates all the .sar files -->
    <target name="bin-dist" depends="main">

        <!-- bin.dist.dir usually set before this target is called -->
        <property name="bin.dist.dir" value="dist"/>
        <property name="bin.dist.lib" value="${bin.dist.dir}/lib"/>

        <copy file="${target.lib}/avalon-demo.sar" tofile="${bin.dist.dir}/avalon-demo-${version}.sar"/>
        <copy file="${target.lib}/avalon-lifecycledemo.sar" tofile="${bin.dist.dir}/avalon-lifecycledemo-${version}.sar"/>

        <chmod dir="${bin.dist.dir}" perm="go-rwx"/>
    </target>

    <target name="install" depends="main" description="Installs into Phoenix">
        <!-- <fail message="install.dir not specified." unless="install.dir"/> -->
        <echo message="Installing to ${install.dir}"/>
        <copy todir="${install.dir}">
            <fileset dir="${target.lib}">
                <include name="avalon-*demo.sar"/>
            </fileset>
        </copy>
        <delete dir="${install.dir}/avalon-*demo/**"/>
    </target>

    <target name="uninstall" description="Uninstalls from Phoenix">

        <!-- <fail message="install.dir not specified." unless="install.dir"/> -->
        <delete dir="${install.dir}/avalon-demo/"/>
        <delete file="avalon-demo.sar" dir="${install.dir}"/>
    </target>

    <target name="clean" description="Cleans up artifacts from build process">
        <delete dir="${target.dir}"/>
        <delete>
            <fileset dir="." includes="**/*~" defaultexcludes="no"/>
        </delete>
    </target>

    <target name="distclean" depends="clean" description="Cleans up all generated files and directories">
        <delete dir="${bin.dist.dir}"/>
        <delete dir="${dist.base}"/>
    </target>

</project>
