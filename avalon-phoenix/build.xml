<?xml version="1.0"?>

<!--
==============================================================================

 Phoenix build file

Authors:
 Federico Barbieri <scoobie at apache.org>
 Berin Loritsch <bloritsch at apache.org>
 Peter Donald <peter at apache.org>
 Leo Simons <mail at leosimons.com>

Legal:
  Copyright (c) 1999-2002 The Apache Software Foundation. All Rights Reserved.

==============================================================================
-->

<project name="Avalon Phoenix" default="main" basedir=".">

    <!--
      Give user a chance to override without editing this file
      (and without typing -D each time he compiles it)
    -->
    <property file="ant.properties"/>
    <property file="${user.home}/.ant.properties"/>

    <property file="project.properties"/>

    <property name="build.debug" value="on"/>
    <property name="build.optimize" value="off"/>
    <property name="build.deprecation" value="off"/>

    <!-- Set the properties for intermediate directory -->
    <property name="build.dir" value="build"/>
    <property name="build.lib" value="${build.dir}/lib"/>
    <property name="build.src" value="${build.dir}/src"/>
    <property name="build.classes" value="${build.dir}/classes"/>
    <property name="build.reports" value="${build.dir}/reports"/>
    <property name="build.xdoclet" value="${build.dir}/xdoclet"/>

    <!-- Set the properties for source directories -->
    <property name="src.dir" value="src"/>
    <property name="java.dir" value="${src.dir}/java"/>
    <property name="conf.dir" value="${src.dir}/conf"/>
    <property name="script.dir" value="${src.dir}/script"/>
    <property name="lib.dir" value="lib"/>
    <property name="tools.dir" value="../jakarta-avalon/tools"/>

    <property name="dist.name" value="${name}-${version}"/>
    <property name="dist.base" value="distributions"/>
    <property name="bin.dist.dir" value="dist"/>
    <property name="src.dist.dir" value="${dist.name}"/>
    <property name="checkstyle.failOnError" value="false"/>

    <property name="constants.file" value="org/apache/avalon/phoenix/Constants.java"/>
    <property name="xml-api.jar" value="${lib.dir}/xml-apis.jar"/>
    <property name="xerces.jar" value="${lib.dir}/xercesImpl-2.0.2.jar"/>
    <property name="xalan.jar" value="${lib.dir}/xalan-2.3.1.jar"/>
    <property name="framework.jar" value="${lib.dir}/avalon-framework-20020713.jar"/>
    <property name="logkit.jar" value="${lib.dir}/logkit-1.1a.jar"/>
    <property name="tools.jar" value="${java.home}/../lib/tools.jar"/>

    <!-- Invoke 'ant get-mx4j' to get these -->
    <property name="mx4j.jar" value="mx4j\mx4j-1.1\lib\mx4j-jmx.jar"/>
    <property name="mx4j-tools.jar" value="mx4j\mx4j-1.1\lib\mx4j-tools.jar"/>

    <path id="project.class.path">
        <pathelement location="${xerces.jar}"/>
        <pathelement location="${framework.jar}"/>
        <pathelement location="${logkit.jar}"/>
        <pathelement location="${wrapper.jar}"/>
        <pathelement path="${mx4j.jar}"/>
        <pathelement path="${mx4j-tools.jar}"/>
        <pathelement path="${java.class.path}" />

        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
        <pathelement path="${build.classes}" />
    </path>

    <!-- Main target -->
    <target name="main" depends="dist-lite-wrapper"
        description="generates the Phoenix distribution without the javadocs"/>

    <target name="rebuild" description="Rebuilds Phoenix">
        <antcall target="clean"/>
        <antcall target="main"/>
    </target>

    <target name="all" depends="dist-lite" description="generates the Phoenix distribution">
        <ant target="docs" antfile="docs.xml" inheritall="false" />
    </target>

    <!-- Help on usage -->
    <target name="usage">
        <echo message="Use the -projecthelp option instead"/>
    </target>
    <target name="help" depends="usage"/>

    <!-- Check requirements of environment -->
    <target name="check-mx4j" if="mx4j.jars">
        <available property="mx4j.present" classname="mx4j.server.MBeanServerImpl">
            <classpath refid="project.class.path"/>
        </available>
        <antcall target="check-mx4j2"/>
    </target>
    <target name="check-mx4j2" unless="mx4j.present">
        <echo>**************************</echo>
        <echo>* Please execute target  *</echo>
        <echo>* 'get-mx4j' in the main *</echo>
        <echo>* build.xml build file   *</echo>
        <echo>* to download one and    *</echo>
        <echo>* a half Mb of MX4J      *</echo>
        <echo>**************************</echo>
        <fail message="MX4J needed. See above."/>
    </target>

    <!-- Check requirements of environment -->
    <target name="check-environment" depends="check-mx4j">
        <available property="xerces.present" type="file" file="${xerces.jar}"/>
        <available property="servlet.present" classname="javax.servlet.Servlet">
            <classpath refid="project.class.path"/>
        </available>
        <available property="jmx.present" classname="javax.management.MBeanException">
            <classpath refid="project.class.path"/>
        </available>
        <available property="wrapper.present" classname="com.silveregg.wrapper.WrapperManager">
            <classpath refid="project.class.path"/>
        </available>
        <available property="beanshell.present" classname="bsh.util.JConsole">
            <classpath refid="project.class.path"/>
        </available>
    </target>

    <!-- Get the jars from the MX4J project. -->
    <!-- For licensing reasons, we are unable to put these Jars in our CVS or source distributions. -->
    <target name="get-mx4j">
        <mkdir  dir="mx4j"/>
        <get src="http://telia.dl.sourceforge.net/sourceforge/mx4j/mx4j-1.1.tar.gz"
            dest="mx4j/mx4j.tar.gz"
            verbose="true"
            usetimestamp="true"/>
        <gunzip src="mx4j/mx4j.tar.gz" dest="mx4j" />
        <untar src="mx4j/mx4j.tar" dest="mx4j"/>
    </target>


    <target name="pretty">
        <taskdef name="pretty"
            classname="org.acm.seguin.ant.Pretty"
            classpath="${jrefactory.jar}" />
        <pretty settingsDir="tools/etc" cvs="true" compileDir="${build.classes}">
            <fileset dir="${src.dir}">
                <include name="**/*.java" />
                <!--<exclude name="org/**/*.java" />-->
            </fileset>
        </pretty>
    </target>

    <target name="changelog">
        <!-- specific to ant1.5.1 -->
        <cvschangelog dir="."
            destfile="changelog.xml"
            start="13 Nov 2001"/>
        <style in="changelog.xml"
            out="changelog.html"
            style="${ant.home}/etc/changelog.xsl">
            <param name="title" expression="Phoenix ChangeLog"/>
            <param name="module" expression="jakarta-avalon-phoenix"/>
            <param name="cvsweb" expression="http://cvs.apache.org/viewcvs/"/>
        </style>

    </target>

    <!-- Prepares the build directory -->
    <target name="prepare" depends="check-environment">

        <mkdir dir="${build.src}"/>
        <copy todir="${build.src}">
            <fileset dir="${java.dir}">
                <include name="${constants.file}" />
            </fileset>
        </copy>

        <tstamp/>
        <replace file="${build.src}/${constants.file}" token="@@VERSION@@" value="${version}"/>
        <replace file="${build.src}/${constants.file}" token="@@NAME@@" value="${Name}"/>
        <replace file="${build.src}/${constants.file}" token="@@DATE@@" value="${TODAY}"/>

    </target>


    <!-- Compiles the source code -->
    <target name="compile" depends="prepare,checkstyle" description="compiles the source code">

        <mkdir dir="${build.classes}"/>

        <javac srcdir="${java.dir}"
            destdir="${build.classes}"
            debug="${build.debug}"
            optimize="${build.optimize}"
            deprecation="${build.deprecation}">
            <classpath refid="project.class.path" />
            <src path="${build.src}" />
            <exclude name="${constants.file}" />
            <exclude name="org/apache/avalon/phoenix/frontends/PhoenixServlet.java" unless="servlet.present"/>
            <exclude name="org/apache/avalon/phoenix/frontends/ComposableServlet.java" unless="servlet.present"/>
            <exclude name="**/*MBean.java" unless="jmx.present"/>
            <exclude name="org/apache/avalon/phoenix/components/manager/AbstractJMXManager.java"
                unless="jmx.present"/>
            <exclude name="org/apache/avalon/phoenix/components/manager/rmiadaptor/*.java"
                unless="jmx.present"/>
            <exclude name="org/apache/avalon/phoenix/components/manager/Target.java"
                unless="jmx.present"/>
            <exclude name="org/apache/avalon/phoenix/components/manager/MBeanInfoBuilder.java"
                unless="jmx.present"/>
            <exclude name="org/apache/avalon/phoenix/components/manager/MX4JSystemManager.java"
                unless="mx4j.present"/>
            <exclude name="org/apache/avalon/phoenix/components/manager/MX4JLoggerAdapter.java"
                unless="mx4j.present"/>
            <exclude name="org/apache/avalon/phoenix/launcher/DaemonLauncher.java"
                unless="wrapper.present"/>
            <exclude name="org/apache/avalon/phoenix/components/kernel/beanshell/*.java"
                unless="beanshell.present"/>
        </javac>

        <copy todir="${build.classes}">
            <fileset dir="${java.dir}">
                <include name="**/*.properties" />
                <include name="**/*.xdt" />
            </fileset>
        </copy>

    </target>

    <!-- Make .xinfo, .mxinfo and manifest automatically for blocks -->
    <target name="phoenix-xdoclet" depends="compile">

        <mkdir dir="${build.xdoclet}"/>

        <taskdef name="phoenix-blocks"
            classname="org.apache.avalon.phoenix.tools.xdoclet.PhoenixXDoclet"
            classpathref="project.class.path"/>

        <phoenix-blocks
            destdir="${build.xdoclet}">
            <fileset dir="${java.dir}">
                <include name="**" />
            </fileset>
            <blockinfo/>
            <mxinfo/>
        </phoenix-blocks>

    </target>

    <!-- Creates all the .jar files -->
    <target name="jars" depends="phoenix-xdoclet">

        <mkdir dir="${build.lib}"/>

        <jar jarfile="${build.lib}/phoenix-client.jar" basedir="${build.classes}">
            <include name="org/apache/avalon/phoenix/*"/>
            <include name="org/apache/avalon/phoenix/metainfo/**"/>
            <include name="org/apache/avalon/phoenix/metadata/**"/>
            <include name="org/apache/avalon/phoenix/tools/**"/>
            <zipfileset dir="${src.dir}/schema" prefix="org/apache/avalon/phoenix/tools">
                <include name="*.dtd"/>
            </zipfileset>
        </jar>

        <jar jarfile="${build.lib}/phoenix-loader.jar"
            basedir="${build.classes}">
            <manifest>
                <attribute name="Main-Class" value="org.apache.avalon.phoenix.launcher.Main"/>
            </manifest>
            <include name="org/apache/avalon/phoenix/launcher/**"/>

            <zipfileset dir="${conf.dir}" prefix="META-INF/">
                <include name="java.policy"/>
            </zipfileset>
        </jar>

        <jar jarfile="${build.lib}/phoenix-engine.jar">
            <fileset dir="${build.classes}" >
                <include name="org/apache/avalon/phoenix/engine/**"/>
                <include name="org/apache/avalon/phoenix/frontends/**"/>
                <include name="org/apache/avalon/phoenix/components/**"/>
                <include name="org/apache/avalon/phoenix/interfaces/**"/>
                <exclude name="org/apache/avalon/phoenix/launcher/**"/>
            </fileset>
            <fileset dir="${build.xdoclet}" >
                <include name="org/apache/avalon/phoenix/engine/**"/>
                <include name="org/apache/avalon/phoenix/frontends/**"/>
                <include name="org/apache/avalon/phoenix/components/**"/>
                <include name="org/apache/avalon/phoenix/interfaces/**"/>
                <exclude name="org/apache/avalon/phoenix/launcher/**"/>
            </fileset>
        </jar>

        <jar jarfile="${build.lib}/phoenix-bsh-commands.jar">
            <zipfileset dir="src/bsh" prefix="bsh/commands/">
                <include name="**"/>
            </zipfileset>
        </jar>

    </target>


    <target name="checkstyle" if="do.checkstyle" description="Checkstyle">

        <!-- this invocation of checkstyle requires that checkstyle be downloaded and setup -->
        <!-- thats why you are required to define do.checkstyle property to generate the report -->
        <!-- To setup, place checkstyle-##-all.jar in your ANT_HOME/lib directory -->
        <taskdef name="checkstyle"
            classname="com.puppycrawl.tools.checkstyle.CheckStyleTask">
            <classpath refid="project.class.path"/>
        </taskdef>
        <checkstyle
            lcurlyType="nl"
            lcurlyMethod="nl"
            lcurlyOther="nl"
            rcurly="ignore"
            allowProtected="false"
            allowPackage="false"
            allowNoAuthor="false"
            maxLineLen="100"
            maxMethodLen="100"
            maxConstructorLen="100"
            memberPattern="^m_[a-z][a-zA-Z0-9]*$"
            staticPattern="^c_[a-z][a-zA-Z0-9]*$"
            constPattern="(^c_[a-z][a-zA-Z0-9]*$)|([A-Z_]*$)"
            ignoreImportLen="true"
            allowTabs="false"
            javadocScope="nothing"
            ignoreWhitespace="true"
            cacheFile="checkstyle.cache"
            failOnViolation="${checkstyle.failOnError}"
            ignoreCastWhitespace="true">
            <fileset dir="${java.dir}">
                <include name="**/*.java"/>
            </fileset>
            <formatter type="plain"/>
            <formatter type="xml" toFile="${build.dir}/checkstyle-results.xml"/>
        </checkstyle>
    </target>


    <!-- Copy MX4J jars to the bin/lin dir (and modify) -->
    <target name="dist-mx4j" description="Copies MX4J jars" if="mx4j.present">
        <copy file="${mx4j.jar}" todir="${bin.dist.bin}/lib"/>
        <copy file="${mx4j-tools.jar}" todir="${bin.dist.bin}/lib"/>
        <jar jarfile="${bin.dist.bin}/lib/mx4j-tools.jar" update="true">
            <zipfileset dir="src/mx4j/xsl" prefix="mx4j/adaptor/http/xsl/">
                <include name="common.xsl"/>
            </zipfileset>
        </jar>
    </target>

    <!-- Copy BeanShell jars -->
    <target name="dist-beanshell" description="Copies Beanshell jars" if="beanshell.jars">
        <copy file="${build.lib}/phoenix-bsh-commands.jar" todir="${bin.dist.lib}"/>
        <copy todir="${bin.dist.lib}/">
            <fileset dir="${lib.dir}">
                <include name="bsh-*"/>
            </fileset>
        </copy>
    </target>

    <!-- Create the lite build -->
    <target name="dist-lite" depends="jars"
        description="generates the Phoenix distribution without the javadocs">

        <property name="bin.dist.bin" value="${bin.dist.dir}/bin"/>
        <property name="bin.dist.apps" value="${bin.dist.dir}/apps"/>
        <property name="bin.dist.ext" value="${bin.dist.dir}/ext"/>
        <property name="bin.dist.lib" value="${bin.dist.dir}/lib"/>
        <property name="bin.dist.conf" value="${bin.dist.dir}/conf"/>

        <mkdir dir="${bin.dist.bin}/lib"/>
        <mkdir dir="${bin.dist.apps}"/>
        <mkdir dir="${bin.dist.ext}"/>
        <mkdir dir="${bin.dist.lib}"/>
        <mkdir dir="${bin.dist.conf}"/>

        <copy file="${build.lib}/phoenix-client.jar" todir="${bin.dist.lib}/"/>
        <copy file="${build.lib}/phoenix-loader.jar" todir="${bin.dist.bin}/"/>
        <copy file="${build.lib}/phoenix-engine.jar" todir="${bin.dist.bin}/lib"/>

        <copy file="${logkit.jar}" todir="${bin.dist.lib}"/>
        <copy file="${framework.jar}" todir="${bin.dist.lib}"/>
        <copy todir="${bin.dist.lib}">
            <fileset dir="${lib.dir}">
                <include name="excalibur*.jar"/>
            </fileset>
            <fileset dir="${lib.dir}/jing">
                <include name="*.jar"/>
            </fileset>
        </copy>

        <copy file="${xerces.jar}" todir="${bin.dist.lib}"/>
        <copy file="${xml-api.jar}" todir="${bin.dist.lib}"/>
        <copy file="${xalan.jar}" todir="${bin.dist.lib}"/>
        <filter token="KERNEL-CLASS" value="${kernel.impl.class}"/>
        <filter token="SYSTEM-MANAGER-CLASS" value="${system.manager.impl.class}"/>
        <copy todir="${bin.dist.conf}" filtering="on">
            <fileset dir="${conf.dir}">
                <include name="kernel.xml"/>
            </fileset>
        </copy>

        <antcall target="dist-mx4j"/>
        <antcall target="dist-beanshell"/>

        <!--
        This was not copying for relatively local ..\jakarta-avalon\tools\lib\xerces.jar - PH
        <copy todir="${bin.dist.lib}">
          <fileset dir="${xerces.dir}">
            <include name="${xerces.file}" if="xerces.present"/>
          </fileset>
        </copy>
        -->

        <copy file="${script.dir}/run.bat" todir="${bin.dist.bin}"/>
        <copy file="${script.dir}/run.sh" todir="${bin.dist.bin}"/>
        <copy file="${script.dir}/phoenix.sh" todir="${bin.dist.bin}"/>

        <chmod dir="${bin.dist.dir}" perm="go-rwx" />
        <chmod file="${bin.dist.bin}/*.sh" perm="u+x"/>
        <chmod file="${bin.dist.bin}/*.bat" perm="u-x"/>
        <fixcrlf srcdir="${bin.dist.dir}" includes="**/*.bat" eol="crlf" />
        <fixcrlf srcdir="${bin.dist.dir}" includes="**/*.sh" eol="lf" />

    </target>

    <!-- Create the lite build -->
    <target name="dist-lite-wrapper" depends="dist-lite" if="wrapper.present"
        description="generates the Phoenix binary distribution without the javadocs and with wrapper">

        <!-- Wrapper filters -->
        <filter token="app.name" value="phoenix"/>
        <filter token="app.long.name" value="Phoenix Application Server"/>

        <copy file="${wrapper.jar}" todir="${bin.dist.bin}"/>
        <copy file="${wrapper.exe}" todir="${bin.dist.bin}"/>
        <copy file="${wrapper.dll}" todir="${bin.dist.bin}"/>

        <chmod file="${bin.dist.bin}/wrapper" perm="u+x"/>
        <copy file="${conf.dir}/wrapper.conf" todir="${bin.dist.conf}"/>
    </target>

    <target name="install"
        depends="dist-lite-wrapper,install-check-phoenix"
        description="Install phoenix into phoenix.home">

        <mkdir dir="${phoenix.home}" />

        <copy todir="${phoenix.home}">
            <fileset dir="${bin.dist.dir}"/>
        </copy>

        <chmod file="${phoenix.home}/bin/*.sh" perm="u+x"/>
        <chmod file="${phoenix.home}/bin/*.bat" perm="u-x"/>

    </target>

    <target name="install-check-phoenix" unless="phoenix.home">
        <fail message="phoenix.home not specified." />
    </target>

    <!-- Create the distribution -->
    <target name="bin-dist" depends="all">

        <property name="bin.dist.docs" value="${bin.dist.dir}/docs"/>
        <property name="bin.dist.javadocs" value="${bin.dist.dir}/docs/api"/>

        <mkdir dir="${bin.dist.docs}"/>
        <mkdir dir="${bin.dist.javadocs}"/>

        <copy todir="${bin.dist.docs}">
            <fileset dir="${build.dir}/docs"/>
        </copy>

        <copy todir="${bin.dist.javadocs}">
            <fileset dir="${build.dir}/javadocs"/>
        </copy>

        <filter token="version" value="${version}"/>
        <filter token="dist.name" value="${dist.name}"/>
        <copy todir="${bin.dist.dir}" filtering="on">
            <fileset dir=".">
                <include name="README.txt"/>
                <include name="WARNING.txt"/>
                <include name="LICENSE.txt"/>
            </fileset>
        </copy>

        <chmod dir="${bin.dist.dir}" perm="go-rwx" />

    </target>

    <!-- Create the source distribution -->
    <target name="src-dist">

        <property name="src.dist.src" value="${src.dist.dir}/src"/>
        <property name="src.dist.docs" value="${src.dist.dir}/docs"/>
        <property name="src.dist.javadocs" value="${src.dist.dir}/docs/api"/>
        <property name="src.dist.lib" value="${src.dist.dir}/lib"/>
        <property name="src.dist.tools" value="${src.dist.dir}/tools"/>

        <mkdir dir="${src.dist.dir}" />
        <mkdir dir="${src.dist.docs}"/>
        <mkdir dir="${src.dist.javadocs}"/>

        <copy file="${xerces.jar}" todir="${src.dist.lib}/"/>
        <copy file="${xml-api.jar}" todir="${src.dist.lib}/"/>
        <copy file="${xalan.jar}" todir="${src.dist.lib}/"/>
        <copy file="${framework.jar}" todir="${src.dist.lib}"/>
        <copy todir="${src.dist.lib}">
            <fileset dir="${lib.dir}">
                <include name="excalibur*.jar"/>
                <include name="xdoclet/*.*"/>
                <include name="README.txt"/>
            </fileset>
        </copy>
        <mkdir dir="${src.dist.lib}/jing" />
        <copy todir="${src.dist.lib}">
            <fileset dir="${lib.dir}/jing">
                <include name="**"/>
            </fileset>
        </copy>

        <mkdir dir="${src.dist.lib}/xdoclet" />
        <copy todir="${src.dist.lib}/xdoclet">
            <fileset dir="${lib.dir}/xdoclet">
                <include name="**"/>
            </fileset>
        </copy>
        <copy file="${logkit.jar}" todir="${src.dist.lib}"/>

        <copy todir="${src.dist.src}">
            <fileset dir="${src.dir}"/>
        </copy>

        <copy todir="${src.dist.docs}">
            <fileset dir="${build.dir}/docs"/>
        </copy>

        <copy todir="${src.dist.javadocs}">
            <fileset dir="${build.dir}/javadocs"/>
        </copy>

        <filter token="version" value="${version}"/>
        <filter token="dist.name" value="${dist.name}"/>
        <copy todir="${src.dist.dir}" filtering="on">
            <fileset dir=".">
                <include name="ant.properties.sample"/>
                <include name="build.bat"/>
                <include name="build.sh"/>
                <include name="build.xml"/>
                <include name="BUILDING.txt"/>
                <include name="docs.xml"/>
                <include name="LICENSE.txt"/>
                <include name="project.properties"/>
                <include name="README.txt"/>
                <include name="WARNING.txt"/>
            </fileset>
        </copy>

        <fixcrlf srcdir="${src.dist.src}/java" includes="**/*.java" eol="lf"/>
        <chmod dir="${src.dist.dir}" perm="go-rwx" />

    </target>

    <!-- Completely build all dists -->
    <target name="dist" description="generates the Phoenix distribution">

        <ant target="docs" antfile="docs.xml" inheritall="false" />
        <ant target="javadocs" antfile="docs.xml" inheritall="false" />
        <ant target="announcement" antfile="docs.xml" inheritall="false" />

        <mkdir dir="${dist.base}"/>

        <antcall target="bin-dist">
            <param name="bin.dist.dir" value="${dist.name}" />
        </antcall>

        <!-- Two readme files to ensure directories are untarred -->
        <echo file="${dist.name}/apps/readme.txt" append="false">
            Place SAR files in here for Phoenix to launch.
        </echo>
        <echo file="${dist.name}/ext/readme.txt" append="false">
            Place extension jars here.  It is very rare to need to do this.
        </echo>

        <zip zipfile="${dist.base}/${dist.name}-bin.zip"
            basedir="${dist.name}/.."
            includes="${dist.name}/**"/>

        <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-bin.tar">
            <tarfileset dir="${dist.name}/.." mode="755" username="avalon" group="avalon">
                <include name="${dist.name}/bin/*.sh"/>
            </tarfileset>
            <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
                <include name="${dist.name}/**"/>
                <exclude name="${dist.name}/bin/*.sh"/>
            </tarfileset>
        </tar>

        <gzip zipfile="${dist.base}/${dist.name}-bin.tar.gz"
            src="${dist.base}/${dist.name}-bin.tar"/>

        <delete file="${dist.base}/${dist.name}-bin.tar"/>
        <delete dir="${dist.name}" />

        <antcall target="src-dist">
            <param name="src.dist.dir" value="${dist.name}" />
        </antcall>

        <zip zipfile="${dist.base}/${dist.name}-src.zip"
            basedir="${dist.name}/.."
            includes="${dist.name}/**"/>

        <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-src.tar" >
            <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
                <include name="${dist.name}/**"/>
            </tarfileset>
        </tar>

        <gzip zipfile="${dist.base}/${dist.name}-src.tar.gz"
            src="${dist.base}/${dist.name}-src.tar"/>

        <delete file="${dist.base}/${dist.name}-src.tar"/>
        <delete dir="${dist.name}" />

    </target>

    <!-- Makes the Phoneix Development Kit -->
    <target name="make-pdk" depends="jars" description="Generates the PDK distribution">

        <mkdir dir="${dist.base}"/>
        <zip zipfile="${dist.base}/phoenix-developers-kit.zip">
            <fileset dir="src/pdk">
                <include name="**"/>
            </fileset>
            <fileset dir=".">
                <include name="lib/**"/>
                <exclude name="lib/xdoclet/*.*"/>
                <exclude name="${xerces.jar}"/>
                <exclude name="${xml-api.jar}"/>
                <exclude name="${xalan.jar}"/>
            </fileset>
            <fileset dir="build">
                <include name="lib/phoenix-client.jar"/>
            </fileset>
        </zip>

    </target>

    <!-- Cleans up build and distribution directories -->
    <target name="clean" description="cleans up the created directories">
        <delete dir="${build.dir}" />
        <delete dir="${bin.dist.dir}" />
        <delete>
            <fileset dir="." includes="**/*~" defaultexcludes="no"/>
            <fileset dir="." includes="velocity.log*"/>
        </delete>
    </target>

    <!-- Cleans absolutely everything up -->
    <target name="distclean" depends="clean" description="cleans up all generated files and directories">
        <delete dir="${docs.dir}" />
        <delete dir="${dist.base}" />
        <ant target="clean" antfile="docs.xml" inheritall="false" />
    </target>

</project>
