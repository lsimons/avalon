<?xml version="1.0"?>

<!--
==============================================================================

 Phoenix build file

Authors:
 Federico Barbieri <scoobie@apache.org>
 Berin Loritsch <bloritsch@apache.org>
 Peter Donald <donaldp@apache.org>
 Leo Simons <mail@leosimons.com>

Legal:
  Copyright (c) 1999-2001 The Apache Software Foundation. All Rights Reserved.

==============================================================================
-->

<project default="main" basedir=".">

  <!--
    Give user a chance to override without editing this file
    (and without typing -D each time he compiles it)
  -->
  <property file=".ant.properties"/>
  <property file="${user.home}/.ant.properties"/>

  <property name="name" value="phoenix"/>
  <property name="Name" value="Phoenix"/>
  <property name="version" value="4.0a2"/>
  <property name="year" value="1999-2001"/>
  <property name="status" value="alpha"/>
  <property name="release" value="1st"/>
  <property name="short.version" value="4.0a"/>

  <property name="build.debug" value="on"/>
  <property name="build.optimize" value="off"/>
  <property name="build.deprecation" value="off"/>

  <!-- Set the properties for intermediate directory -->
  <property name="build.dir" value="build"/>
  <property name="build.lib" value="${build.dir}/lib"/>
  <property name="build.src" value="${build.dir}/src"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.javadocs" value="${build.dir}/javadocs"/>
  <property name="build.docs" value="${build.dir}/docs"/>
  <property name="build.context" value="${build.dir}/documentation"/>
  <property name="build.xdocs" value="${build.context}/xdocs"/>

  <!-- Set the properties for source directories -->
  <property name="src.dir" value="src"/>
  <property name="java.dir" value="${src.dir}/java"/>
  <property name="conf.dir" value="${src.dir}/conf"/>
  <property name="script.dir" value="${src.dir}/script"/>
  <property name="manifest.dir" value="${src.dir}/manifest"/>
  <property name="lib.dir" value="lib"/>
  <property name="tools.dir" value="../jakarta-avalon/tools"/>
  <property name="docs.dir" value="docs"/>
  <property name="www.dir" value="../jakarta-avalon-site/docs/${name}"/>
  <property name="avalon.skin" value="${tools.dir}/lib/jakarta-style.jar"/>
  <property name="xdocs.dir" value="${src.dir}/xdocs"/>
  <property name="javadocs.dir" value="${docs.dir}/api"/>
  <property name="context.dir" value="../jakarta-avalon/src/documentation"/>

  <property name="dist.name" value="${name}-${version}"/>
  <property name="dist.base" value="distributions"/>
  <property name="bin.dist.dir" value="dist"/>
  <property name="src.dist.dir" value="${dist.name}"/>

  <property name="constants.file" value="org/apache/avalon/phoenix/Constants.java"/>
  <property name="xerces.jar" value="lib/xerces.jar"/>
  <property name="xalan.jar" value="${tools.dir}/lib/xalan-2.2.0-D8.jar"/>
  <property name="framework.jar" value="${lib.dir}/avalon-framework-20011110.jar"/>
  <property name="excalibur.jar" value="${lib.dir}/avalon-excalibur-20011110.jar"/>
  <property name="scratchpad.jar" value="${lib.dir}/avalon-scratchpad-20011110.jar"/>
  <property name="logkit.jar" value="${lib.dir}/logkit-1.0.jar"/>
  <property name="tools.jar" value="${java.home}/../lib/tools.jar"/>

  <property name="announce2txt" value="${tools.dir}/announcement2txt.xsl"/>
  <property name="announce2header" value="${tools.dir}/announcement2header.xsl"/>
  <property name="announce2readme" value="${tools.dir}/announcement2readme.xsl"/>
  <property name="announce2site" value="${tools.dir}/announcement2site.xsl"/>

  <path id="project.class.path">
    <pathelement location="${xerces.jar}"/>
    <pathelement location="${framework.jar}"/>
    <pathelement location="${excalibur.jar}"/>
    <pathelement location="${scratchpad.jar}"/>
    <pathelement location="${logkit.jar}"/>
    <pathelement path="${java.class.path}" />
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
    </fileset>
    <pathelement path="${build.classes}" />
  </path>

  <path id="tools.class.path">
    <pathelement location="${xerces.jar}"/>
    <pathelement location="${xalan.jar}"/>
    <pathelement location="${tools.jar}"/>
    <fileset dir="${tools.dir}/lib">
      <exclude name="ant.jar" />
    </fileset>
  </path>

  <!-- Main target -->
  <target name="main" depends="dist-lite" 
          description="generates the Phoenix distribution without the javadocs"/>
  <target name="all" depends="dist-lite,docs" description="generates the Phoenix distribution" />

  <!-- Help on usage -->
  <target name="usage">
    <echo message="Use the -projecthelp option instead"/>
  </target>

  <target name="help" depends="usage"/>

  <!-- Check requirements of environment -->
  <target name="check-environment">
    <available property="servlet.present" classname="javax.servlet.Servlet">
      <classpath refid="project.class.path"/>
    </available>
    <available property="jmx.present" classname="javax.management.MBeanException">
      <classpath refid="project.class.path"/>
    </available>
  </target>

  <!-- Setup the filters -->
  <target name="setup-filters">
    <filter token="Name" value="Avalon Phoenix"/>
    <filter token="name" value="phoenix"/>
    <filter token="version" value="${version}"/>
    <filter token="year" value="${year}"/>
    <filter token="status" value="${status}"/>
    <filter token="release" value="${release}"/>
    <filter token="short-version" value="${short.version}"/>

    <property name="avalon.base" value="http://jakarta.apache.org/avalon"/>
    <property name="framework.base" value="http://jakarta.apache.org/avalon/framework"/>
    <property name="phoenix.base" value="http://jakarta.apache.org/avalon/phoenix"/>
    <property name="cornerstone.base" value="http://jakarta.apache.org/avalon/cornerstone"/>
    <property name="logkit.base" value="http://jakarta.apache.org/avalon/logkit"/>
    <property name="testlet.base" value="http://jakarta.apache.org/avalon/testlet"/>

    <filter token="year" value="${year}"/>
    <filter token="AVALON_BASE" value="${avalon.base}"/>
    <filter token="FRAMEWORK_BASE" value="${framework.base}"/>
    <filter token="PHOENIX_BASE" value="${phoenix.base}"/>
    <filter token="CORNERSTONE_BASE" value="${cornerstone.base}"/>
    <filter token="LOGKIT_BASE" value="${logkit.base}"/>
    <filter token="TESTLET_BASE" value="${testlet.base}"/>
  </target>

  <!-- Prepares the build directory -->
  <target name="prepare" depends="check-environment">

    <mkdir dir="${build.src}"/>
    <copy todir="${build.src}">
      <fileset dir="${java.dir}">
        <include name="${constants.file}" />
      </fileset>
    </copy>

    <tstamp/>
    <replace file="${build.src}/${constants.file}" token="@@VERSION@@" value="${version}"/>
    <replace file="${build.src}/${constants.file}" token="@@NAME@@" value="${Name}"/>
    <replace file="${build.src}/${constants.file}" token="@@DATE@@" value="${TODAY}"/>

  </target>

  <!-- Create the announcements and HEADER.html -->
  <target name="announcement" depends="setup-filters">

    <mkdir dir="${build.dir}" />
    <mkdir dir="${dist.base}" />

    <copy todir="${build.context}" filtering="on">
      <fileset dir="${context.dir}">
        <exclude name="resources/**"/>
        <exclude name="xdocs/**"/>
      </fileset>
    </copy>

    <copy todir="${build.xdocs}" filtering="on">
      <fileset dir="${xdocs.dir}"/>
    </copy>

    <style style="${announce2txt}" in="${build.context}/xdocs/announcement.xml" 
           out="Announcement.txt"/>
    <style style="${announce2header}" in="${build.context}/xdocs/announcement.xml" 
           out="${dist.base}/HEADER.html"/>
    <style style="${announce2readme}" in="${build.context}/xdocs/announcement.xml"
           out="${dist.base}/README.html"/>
    <style style="${announce2site}" in="${build.context}/xdocs/announcement.xml"
           out="jakarta-news.xml"/>

  </target>

  <!-- Compiles the source code -->
  <target name="compile" depends="prepare" description="compiles the source code">

    <mkdir dir="${build.classes}"/>

    <javac srcdir="${java.dir}"
           destdir="${build.classes}"
           debug="${build.debug}"
           optimize="${build.optimize}"
           deprecation="${build.deprecation}">
      <classpath refid="project.class.path" />
      <src path="${build.src}" />
      <exclude name="${constants.file}" />
      <exclude name="org/apache/avalon/phoenix/frontends/PhoenixServlet.java" unless="servlet.present"/>
      <exclude name="org/apache/jmx/**" unless="jmx.present"/>
      <exclude name="**/*MBean.java" unless="jmx.present"/>
      <exclude name="org/apache/avalon/phoenix/components/manager/DefaultManager.java" 
               unless="jmx.present"/>
    </javac>

    <copy todir="${build.classes}">
      <fileset dir="${java.dir}">
        <include name="**/*.properties" />
      </fileset>
    </copy>

  </target>

  <target name="rmic" depends="compile" if="jmx.present"
          description="runs rmic on JMX Adaptor">

    <rmic base="${build.classes}" 
          classname="org.apache.jmx.adaptor.RMIAdaptorImpl" 
          stubVersion="1.2">
      <classpath refid="project.class.path" />
    </rmic>

  </target>

  <!-- Create the API documentation -->
  <target name="javadocs" description="generates the API documentation (java 1.2+ only)">

    <delete dir="${build.javadocs}"/>
    <mkdir dir="${build.javadocs}"/>

    <javadoc packagenames="org.apache.*"
             sourcepath="${java.dir}"
             destdir="${build.javadocs}">
      <classpath refid="project.class.path" />
      <doclet name="com.sun.tools.doclets.standard.Standard">
       <param name="-author"/>
       <param name="-version"/>
       <param name="-doctitle" value="${Name}"/>
       <param name="-windowtitle" value="${Name} API"/>
       <param name="-bottom" 
              value="&quot;Copyright &#169; 2001 Apache Jakarta Project. All Rights Reserved.&quot;"/>
      </doclet>
    </javadoc>

  </target>

  <!-- Create the Local API documentation -->
  <target name="local-javadocs" depends="javadocs">

    <delete dir="${javadocs.dir}"/>
    <mkdir dir="${javadocs.dir}"/>

    <copy todir="${javadocs.dir}">
      <fileset dir="${build.javadocs}" />
    </copy>

  </target>

  <target name="printer-friendly" depends="javadocs">
    <echo message="Printer friendly documentation is not available right now."/>
  </target>

  <!-- Prepares the documentation directory -->
  <target name="docs" depends="setup-filters,javadocs" description="generates the Phoenix documentation">

    <mkdir dir="${build.context}"/>
    <mkdir dir="${build.xdocs}"/>
    <mkdir dir="${build.docs}"/>
    <mkdir dir="${build.dir}/work"/>

    <!-- Base pointers for non-xdocs documentation. Override these in .ant.properties to link to local docs -->
    <copy todir="${build.context}" filtering="on">
      <fileset dir="${context.dir}">
        <exclude name="resources/**"/>
        <exclude name="xdocs"/>
      </fileset>
    </copy>

    <copy todir="${build.context}/xdocs" filtering="on" overwrite="yes">
      <fileset dir="${xdocs.dir}"/>
    </copy>

    <copy todir="${build.context}/resources" filtering="off" overwrite="yes">
      <fileset dir="${context.dir}/resources"/>
      <fileset dir="${xdocs.dir}">
        <include name="**/images/**"/>
      </fileset>
    </copy>

    <java classname="org.apache.cocoon.Main" fork="true">
      <arg value="-c${build.context}/"/>
      <arg value="-d${build.docs}"/>
      <arg value="-w${build.dir}/work"/>
      <arg value="-l${build.dir}/work/cocoon.log"/>
      <arg value="-uINFO"/>
      <arg value="-f${xdocs.dir}/phoenix.uris"/>
      <classpath>
        <path refid="tools.class.path"/>
        <fileset dir="${tools.dir}/ext"/>
      </classpath>
    </java>
  </target>

  <!-- Create the Local site documentation -->
  <target name="local-xdocs" depends="docs">

    <delete>
      <fileset dir="${docs.dir}">
        <exclude name="api/**"/>
      </fileset>
    </delete>
    <mkdir dir="${docs.dir}"/>

    <copy todir="${docs.dir}">
      <fileset dir="${build.docs}" />
    </copy>

  </target>

  <target name="local-docs" depends="local-javadocs,local-xdocs"/>

  <!-- Update the www directory -->
  <target name="site-docs" depends="local-docs">

    <mkdir dir="${www.dir}"/>

    <!-- delete all old documents but keep CVS directories -->
    <!-- note that by doing an include the defaultexcludes (CVS dirs) will be kept -->
    <delete>
      <fileset dir="${www.dir}">
        <include name="**"/>
      </fileset>
    </delete>

    <mkdir dir="${www.dir}"/>
    <copy todir="${www.dir}">
      <fileset dir="${docs.dir}" />
    </copy>

  </target>

  <!-- Creates all the .jar files -->
  <target name="jars" depends="rmic">

    <mkdir dir="${build.lib}"/>

    <jar file="${build.lib}/phoenix-client.jar" basedir="${build.classes}">
      <include name="org/apache/avalon/phoenix/*"/>
      <include name="org/apache/avalon/phoenix/metainfo/**"/>
      <include name="org/apache/avalon/phoenix/metadata/**"/>
      <include name="org/apache/avalon/phoenix/tools/**"/>
    </jar>

    <jar file="${build.lib}/phoenix-loader.jar"
         basedir="${build.classes}"
         manifest="${manifest.dir}/loader-Manifest.mf" >
      <include name="org/apache/avalon/phoenix/launcher/**"/>

      <zipfileset dir="${conf.dir}" prefix="META-INF/">
        <include name="java.policy"/>
      </zipfileset>
    </jar>

    <jar file="${build.lib}/avalon-jmx.jar" basedir="${build.classes}">
      <include name="org/apache/jmx/**" />
    </jar>

    <jar file="${build.lib}/phoenix-engine.jar"
         basedir="${build.classes}"
         manifest="${manifest.dir}/engine-Manifest.mf" >

      <include name="org/apache/avalon/phoenix/engine/**"/>
      <include name="org/apache/avalon/phoenix/frontends/**"/>
      <include name="org/apache/avalon/phoenix/components/**"/>
      <include name="org/apache/avalon/phoenix/interfaces/**"/>
      <exclude name="org/apache/avalon/phoenix/launcher/**"/>
    </jar>

  </target>

  <!-- Create the lite build -->
  <target name="dist-lite" depends="jars" 
          description="generates the Phoenix distribution without the javadocs">

    <property name="bin.dist.bin" value="${bin.dist.dir}/bin"/>
    <property name="bin.dist.apps" value="${bin.dist.dir}/apps"/>
    <property name="bin.dist.lib" value="${bin.dist.dir}/lib"/>

    <mkdir dir="${bin.dist.bin}"/>
    <mkdir dir="${bin.dist.apps}"/>
    <mkdir dir="${bin.dist.lib}"/>

    <copy file="${build.lib}/phoenix-loader.jar" todir="${bin.dist.bin}/"/>
    <copy file="${build.lib}/phoenix-engine.jar" todir="${bin.dist.bin}"/>

    <copy file="${build.lib}/phoenix-client.jar" todir="${bin.dist.lib}"/>
    <copy file="${build.lib}/avalon-jmx.jar" todir="${bin.dist.lib}"/>
    <copy file="${logkit.jar}" todir="${bin.dist.lib}"/>
    <copy file="${framework.jar}" todir="${bin.dist.lib}"/>
    <copy file="${excalibur.jar}" todir="${bin.dist.lib}"/>
    <copy file="${scratchpad.jar}" todir="${bin.dist.lib}"/>
    <copy file="${xerces.jar}" tofile="${bin.dist.lib}/xerces.jar"/>

    <copy file="${script.dir}/run.bat" todir="${bin.dist.bin}"/>
    <copy file="${script.dir}/run.sh" todir="${bin.dist.bin}"/>

    <chmod dir="${bin.dist.dir}" perm="go-rwx" />
    <chmod file="${bin.dist.bin}/run.sh" perm="u+x"/>
    <chmod file="${bin.dist.bin}/run.bat" perm="u-x"/>
    <fixcrlf srcdir="${bin.dist.dir}" includes="**/*.bat" eol="crlf" />
    <fixcrlf srcdir="${bin.dist.dir}" includes="**/*.sh" eol="lf" />

  </target>

  <target name="install" depends="dist-lite,install-check-cjan,install-check-phoenix">

    <mkdir dir="${cjan.lib}" />
    <copy file="${build.lib}/phoenix-client.jar" todir="${cjan.lib}"/>

    <mkdir dir="${phoenix.home}" />

    <copy todir="${phoenix.home}">
      <fileset dir="${bin.dist.dir}"/>
    </copy>

    <chmod file="${phoenix.home}/bin/run.sh" perm="u+x"/>
    <chmod file="${phoenix.home}/bin/run.bat" perm="u-x"/>

  </target>

  <target name="install-check-cjan" unless="cjan.lib">
    <fail message="cjan.lib not specified." />
  </target>

  <target name="install-check-phoenix" unless="phoenix.home">
    <fail message="phoenix.home not specified." />
  </target>

  <!-- Create the distribution -->
  <target name="bin-dist" depends="all">

    <property name="bin.dist.docs" value="${bin.dist.dir}/docs"/>
    <property name="bin.dist.javadocs" value="${bin.dist.dir}/docs/api"/>

    <mkdir dir="${bin.dist.docs}"/>
    <mkdir dir="${bin.dist.javadocs}"/>

    <copy todir="${bin.dist.docs}">
      <fileset dir="${build.docs}"/>
    </copy>

    <copy todir="${bin.dist.javadocs}">
      <fileset dir="${build.javadocs}"/>
    </copy>

    <copy todir="${bin.dist.dir}" filtering="on">
      <fileset dir=".">
        <include name="README"/>
        <include name="WARNING"/>
        <include name="LICENSE"/>
      </fileset>
    </copy>

    <chmod dir="${bin.dist.dir}" perm="go-rwx" />

  </target>

  <!-- Create the source distribution -->
  <target name="src-dist">

    <property name="src.dist.src" value="${src.dist.dir}/src"/>
    <property name="src.dist.docs" value="${src.dist.dir}/docs"/>
    <property name="src.dist.javadocs" value="${src.dist.dir}/docs/api"/>
    <property name="src.dist.lib" value="${src.dist.dir}/lib"/>
    <property name="src.dist.tools" value="${src.dist.dir}/tools"/>

    <mkdir dir="${src.dist.dir}" />
    <mkdir dir="${src.dist.docs}"/>
    <mkdir dir="${src.dist.javadocs}"/>

    <copy todir="${src.dist.tools}">
      <fileset dir="${tools.dir}"/>
    </copy>

    <copy file="${xerces.jar}" todir="${src.dist.lib}/"/>
    <copy file="${framework.jar}" todir="${src.dist.lib}"/>
    <copy file="${excalibur.jar}" todir="${src.dist.lib}"/>
    <copy file="${scratchpad.jar}" todir="${src.dist.lib}"/>
    <copy file="${logkit.jar}" todir="${src.dist.lib}"/>

    <copy todir="${src.dist.src}">
      <fileset dir="${src.dir}"/>
    </copy>

    <copy todir="${src.dist.docs}">
      <fileset dir="${build.docs}"/>
    </copy>

    <copy todir="${src.dist.javadocs}">
      <fileset dir="${build.javadocs}"/>
    </copy>

    <copy todir="${src.dist.dir}" filtering="on">
      <fileset dir=".">
        <include name="README"/>
        <include name="WARNING"/>
        <include name="LICENSE"/>
        <include name="BUILDING.txt"/>
        <include name="build.bat"/>
        <include name="build.sh"/>
        <include name="build.xml"/>
      </fileset>
    </copy>

    <fixcrlf srcdir="${src.dist.dir}" includes="build.sh" eol="lf"/>
    <fixcrlf srcdir="${src.dist.dir}" includes="build.bat" eol="crlf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="*.sh" eol="lf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="ant" eol="lf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="antRun" eol="lf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="*.bat" eol="crlf"/>

    <chmod perm="+x">
      <fileset dir="${src.dist.dir}">
        <include name="build.sh" />
      </fileset>
    </chmod>

    <fixcrlf srcdir="${src.dist.src}/java" includes="**/*.java" eol="lf"/>

    <chmod dir="${src.dist.dir}" perm="go-rwx" />

  </target>

  <!-- Completely build all dists -->
  <target name="dist" depends="announcement,site-docs" description="generates the Phoenix distribution">
    <mkdir dir="${dist.base}"/>

    <antcall target="bin-dist">
      <param name="bin.dist.dir" value="${dist.name}" />
    </antcall>

    <zip file="${dist.base}/${dist.name}-bin.zip" 
         basedir="${dist.name}/.." 
         includes="${dist.name}/**"/>

    <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-bin.tar">
      <tarfileset dir="${dist.name}/.." mode="755" username="avalon" group="avalon">
        <include name="${dist.name}/bin/run.sh"/>
      </tarfileset> 
      <tarfileset dir="${dist.name}/.." username="avalon" group="avalon"> 
        <include name="${dist.name}/**"/>
        <exclude name="${dist.name}/bin/run.sh"/>
      </tarfileset> 
    </tar>

    <gzip zipfile="${dist.base}/${dist.name}-bin.tar.gz" 
          src="${dist.base}/${dist.name}-bin.tar"/>

    <delete file="${dist.base}/${dist.name}-bin.tar"/>
    <delete dir="${dist.name}" />

    <antcall target="src-dist">
      <param name="src.dist.dir" value="${dist.name}" />
    </antcall>

    <zip file="${dist.base}/${dist.name}-src.zip" 
         basedir="${dist.name}/.." 
         includes="${dist.name}/**"/>

    <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-src.tar" >
      <tarfileset dir="${dist.name}/.." mode="755" username="avalon" group="avalon">
        <include name="${dist.name}/build.sh"/>
      </tarfileset> 
      <tarfileset dir="${dist.name}/.." username="avalon" group="avalon"> 
        <include name="${dist.name}/**"/>
        <exclude name="${dist.name}/build.sh"/>
      </tarfileset>
    </tar> 

    <gzip zipfile="${dist.base}/${dist.name}-src.tar.gz" 
          src="${dist.base}/${dist.name}-src.tar"/>

    <delete file="${dist.base}/${dist.name}-src.tar"/>
    <delete dir="${dist.name}" />

  </target>

  <!-- Makes the Phoneix Development Kit -->
  <target name="make-pdk" depends="rmic" description="Generates a dual mode example Phoenix application">

    <mkdir dir="${dist.base}"/>
    <zip file="${dist.base}/phoenix-devkit.zip">
      <fileset dir="src/pdk">
        <include name="**"/>
      </fileset>
      <fileset dir=".">
        <include name="lib/**"/>
      </fileset>
      <fileset dir="build">
        <include name="lib/phoenix-client.jar"/>
      </fileset>      
    </zip>
    
  </target>

  <!-- Cleans up build and distribution directories -->
  <target name="clean" description="cleans up the created directories">
    <delete dir="${build.dir}" />
    <delete dir="${bin.dist.dir}" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
  </target>

  <!-- Cleans absolutely everything up -->
  <target name="distclean" depends="clean" description="cleans up all generated files and directories">
    <delete dir="${docs.dir}" />
    <delete dir="${dist.base}" />
  </target>

</project>
