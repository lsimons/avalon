<?xml version="1.0"?>
  <!DOCTYPE project [
    <!ENTITY forrest-targets SYSTEM "file:./tools/forrest-targets.ent">
  ]>
<!--
==============================================================================

 Phoenix build file

Authors:
 Federico Barbieri <scoobie at apache.org>
 Berin Loritsch <bloritsch at apache.org>
 Peter Donald <peter at apache.org>
 Leo Simons <mail at leosimons.com>
 Nicola Ken Barozzi <nicolaken at apache.org>

Legal:
  Copyright (c) 1999-2002 The Apache Software Foundation. All Rights Reserved.

==============================================================================
-->

<project name="Avalon Phoenix" default="main" basedir=".">

    <!--Abstr
      Give user a chance to override without editing this file
      (and without typing -D each time he compiles it)
    -->
    <property file="ant.properties"/>
    <property file="${user.home}/.ant.properties"/>

    <property file="project.properties"/>

    <!-- platform -->
    <property name="is.${os.name}" value="true"/>

    <property name="build.debug" value="on"/>
    <property name="build.optimize" value="off"/>
    <property name="build.deprecation" value="off"/>

    <!-- Set the properties for intermediate directory -->
    <property name="target.dir" value="target"/>
    <property name="target.mx" value="${target.dir}/mx-temp"/>
    <property name="target.lib" value="${target.dir}/lib"/>
    <property name="target.src" value="${target.dir}/src"/>
    <property name="target.classes" value="${target.dir}/classes"/>
    <property name="target.javadocs" value="${target.dir}/javadocs"/>
    <property name="target.docs" value="${target.dir}/site"/>
    <property name="target.tests" value="${target.dir}/tests"/>
    <property name="target.testclasses" value="${target.dir}/testclasses"/>
    <property name="target.reports" value="${target.dir}/reports"/>
    <property name="target.metagenerate" value="${target.dir}/metagenerate"/>
    <property name="target.test-metagenerate" value="${target.dir}/test-metagenerate"/>

    <!-- Set the properties for source directories -->
    <property name="src.dir" value="src"/>
    <property name="java.dir" value="${src.dir}/java"/>
    <property name="documentation.dir" value="${src.dir}/documentation"/>
    <property name="test.dir" value="${src.dir}/test"/>
    <property name="compat.dir" value="${src.dir}/compat"/>
    <property name="api.dir" value="${src.dir}/api"/>
    <property name="conf.dir" value="${src.dir}/conf"/>
    <property name="script.dir" value="${src.dir}/script"/>
    <property name="lib.dir" value="lib"/>
    <property name="repo.dir" value="${lib.dir}/repo"/>
    <property name="tools.dir" value="../avalon/tools"/>
    <property name="phoenix.tools.dir" value="tools"/>

    <property name="dist.name" value="${name}-${version}"/>
    <property name="dist.base" value="distributions"/>
    <property name="bin.dist.dir" value="dist"/>
    <property name="src.dist.dir" value="${dist.name}"/>
    <property name="checkstyle.failOnError" value="false"/>

    <property name="constants.file" value="org/apache/avalon/phoenix/Constants.java"/>
    <property name="container.constants.file" value="org/apache/avalon/phoenix/interfaces/ContainerConstants.java"/>
    <property name="xml-api.jar" value="${lib.dir}/xml-apis.jar"/>
    <property name="xerces.jar" value="${lib.dir}/xercesImpl-2.0.2.jar"/>
    <property name="xalan.jar" value="${lib.dir}/xalan-2.3.1.jar"/>
    <property name="framework.jar" value="${lib.dir}/avalon-framework-4.1.4.jar"/>
    <property name="logkit.jar" value="${lib.dir}/logkit-1.2.jar"/>
    <property name="excalibur-instrument.jar" value="${lib.dir}/excalibur-instrument-1.0.jar"/>
    <property name="tools.jar" value="${java.home}/../lib/tools.jar"/>

    <property name="announce2txt" value="${phoenix.tools.dir}/announcement2txt.xsl"/>
    <property name="announce2header" value="${phoenix.tools.dir}/announcement2header.xsl"/>
    <property name="announce2readme" value="${phoenix.tools.dir}/announcement2readme.xsl"/>
    <property name="announce2site" value="${phoenix.tools.dir}/announcement2site.xsl"/>
    <property name="status2changes" value="${phoenix.tools.dir}/status2changes.xsl"/>

    <!-- Invoke 'ant get-wrapper' to get these -->
    <property name="wrapper.version" value="3.0.0"/>
    <property name="wrapper.jar" value="${repo.dir}/wrapper/bin/wrapper.jar"/>

    <!-- Invoke 'ant get-mx4j' to get these -->
    <property name="mx4j.jar" value="${repo.dir}/mx4j/mx4j-1.1.1/lib/mx4j-jmx.jar"/>
    <property name="mx4j-tools.jar" value="${repo.dir}/mx4j/mx4j-1.1.1/lib/mx4j-tools.jar"/>

    <!-- Invoke 'ant get-log4j' to get this -->
    <property name="log4j.jar" value="${repo.dir}/log4j/log4j-1.2.7.jar"/>

    <!-- Invoke 'ant get-beanshell' to get this -->
    <property name="beanshell.jar" value="${repo.dir}/beanshell/bsh-1.2b7.jar"/>

    <!-- Invoke 'ant get-cli' to get these -->
    <property name="cli.jar" value="${repo.dir}/cli/cli-1.0/cli-1.0.jar"/>

    <!-- Invoke ant get-configkit' to get these -->
    <property name="configkit.jar" value="${repo.dir}/spice-configkit/spice-configkit-1.1/spice-configkit-1.1.jar"/>
    <fileset id="configkit.fileset" dir="${repo.dir}/spice-configkit/spice-configkit-1.1/lib"/>

    <path id="project.class.path">
        <pathelement location="${xerces.jar}"/>
        <pathelement location="${framework.jar}"/>
        <pathelement location="${logkit.jar}"/>
        <pathelement location="${wrapper.jar}"/>
        <pathelement path="${log4j.jar}"/>
        <pathelement path="${cli.jar}"/>
        <pathelement path="${configkit.jar}"/>
        <pathelement path="${mx4j.jar}"/>
        <pathelement path="${mx4j-tools.jar}"/>
        <pathelement path="${beanshell.jar}"/>
        <pathelement path="${java.class.path}"/>

        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/tools">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/container">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/deploy">
            <include name="**/*.jar"/>
        </fileset>

        <pathelement path="${target.classes}"/>
    </path>

    <path id="test.class.path">
        <pathelement location="${target.testclasses}"/>
        <pathelement location="${junit.jar}"/>
        <path refid="project.class.path"/>
    </path>

    <!-- =================================================================== -->
    <!-- Resolve Platform properties                                         -->
    <!-- =================================================================== -->
    <target name="init-windows-nt" if="is.Windows NT">
        <property name="is.Windows" value="true"/>
        <property name="is.shell.bat" value="true"/>
        <property name="wrapper.dist.name" value="wrapper_win32_${wrapper.version}"/>
        <property name="dist.name.wrapper" value="${name}_win32_${version}"/>
    </target>
    <target name="init-windows-2000" if="is.Windows 2000">
        <property name="is.Windows" value="true"/>
        <property name="is.shell.bat" value="true"/>
        <property name="wrapper.dist.name" value="wrapper_win32_${wrapper.version}"/>
        <property name="dist.name.wrapper" value="${name}_win32_${version}"/>
    </target>
    <target name="init-windows-xp" if="is.Windows XP">
        <property name="is.Windows" value="true"/>
        <property name="is.shell.bat" value="true"/>
        <property name="wrapper.dist.name" value="wrapper_win32_${wrapper.version}"/>
        <property name="dist.name.wrapper" value="${name}_win32_${version}"/>
    </target>
    <target name="init-linux" if="is.Linux">
        <property name="is.Unix" value="true"/>
        <property name="is.shell.bash" value="true"/>
        <property name="phoenix-wrapper.sh" value="${repo.dir}/wrapper/bin/${name}-wrapper.bash"/>
        <property name="wrapper.dist.name" value="wrapper_linux_${wrapper.version}"/>
        <property name="dist.name.wrapper" value="${name}_linux_${version}"/>
    </target>
    <target name="init-solaris" if="is.SunOS">
        <property name="is.Unix" value="true"/>
        <property name="is.shell.sh" value="true"/>
        <property name="phoenix-wrapper.sh" value="${repo.dir}/wrapper/bin/${name}-wrapper.sh"/>
        <property name="wrapper.dist.name" value="wrapper_solaris_${wrapper.version}"/>
        <property name="dist.name.wrapper" value="${name}_solaris_${version}"/>
    </target>
    <target name="init-aix" if="is.AIX">
        <property name="is.Unix" value="true"/>
        <property name="is.shell.sh" value="true"/>
        <property name="phoenix-wrapper.sh" value="${repo.dir}/wrapper/bin/${name}-wrapper.sh"/>
        <property name="wrapper.dist.name" value="wrapper_aix_${wrapper.version}"/>
        <property name="dist.name.wrapper" value="${name}_aix_${version}"/>
    </target>
    <target name="init-hpux" if="is.HP-UX">
        <property name="is.Unix" value="true"/>
        <property name="is.shell.sh" value="true"/>
        <property name="phoenix-wrapper.sh" value="${repo.dir}/wrapper/bin/${name}-wrapper.sh"/>
        <property name="wrapper.dist.name" value="wrapper_hpux_${wrapper.version}"/>
        <property name="dist.name.wrapper" value="${name}_hpux_${version}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Initialize build.                                                   -->
    <!-- =================================================================== -->
    <target name="init"
        depends="init-windows-nt, init-windows-2000, init-windows-xp, init-linux, init-solaris, init-aix, init-hpux">
        <echo message="OS='${os.name}'"/>

        <!-- Wrapper filters -->
        <filter token="app.name" value="phoenix"/>
        <filter token="app.long.name" value="Phoenix Application Server"/>

    </target>

    <!-- =================================================================== -->
    <!-- Wrapper Tasks.                                                      -->
    <!-- =================================================================== -->
    <target name="check-wrapper-init" depends="init">
        <available property="wrapper.present" classname="org.tanukisoftware.wrapper.WrapperManager">
            <classpath refid="project.class.path"/>
        </available>

        <condition property="wrapper.present.Windows">
            <and>
                <isset property="wrapper.present"/>
                <isset property="is.Windows"/>
            </and>
        </condition>

        <condition property="wrapper.present.Unix">
            <and>
                <isset property="wrapper.present"/>
                <isset property="is.Unix"/>
            </and>
        </condition>
    </target>

    <target name="check-wrapper" depends="check-wrapper-init" unless="wrapper.present">
        <echo>*****************************</echo>
        <echo>* Please execute target     *</echo>
        <echo>* 'get-wrapper' in the main *</echo>
        <echo>* build.xml build file      *</echo>
        <echo>* to download one and       *</echo>
        <echo>* a half Mb of Wrapper      *</echo>
        <echo>*****************************</echo>
    </target>

    <!-- Get the files from the Wrapper project. -->
    <target name="get-wrapper-test" depends="init" unless="wrapper.dist.name">
        <echo>**********************************************************</echo>
        <echo>* A prebuilt version of the Wrapper does not yet exist</echo>
        <echo>* for the ${os.name} platform.  You will have to download</echo>
        <echo>* the source from http://wrapper.tanukisoftware.org and</echo>
        <echo>* try compiling it for ${os.name} platform.  The resulting</echo>
        <echo>* distribution should then be placed into the</echo>
        <echo>* ${repo.dir}/wrapper directory.</echo>
        <echo>**********************************************************</echo>
        <fail message="A prebuilt version of the Wrapper does not exist for the ${os.name} platform"/>
    </target>
    <target name="get-wrapper-windows" if="is.Windows">
        <mkdir dir="${repo.dir}/wrapper"/>
        <get src="http://telia.dl.sourceforge.net/sourceforge/wrapper/${wrapper.dist.name}.zip"
            dest="${repo.dir}/wrapper/${wrapper.dist.name}.zip"
            verbose="true"
            usetimestamp="true"/>
        <unzip src="${repo.dir}/wrapper/${wrapper.dist.name}.zip" dest="${repo.dir}/wrapper"/>
        <copy file="${repo.dir}/wrapper/${wrapper.dist.name}/bin/Wrapper.exe"
            todir="${repo.dir}/wrapper/bin"/>
        <copy file="${repo.dir}/wrapper/${wrapper.dist.name}/lib/Wrapper.dll"
            todir="${repo.dir}/wrapper/bin"/>
        <copy file="${repo.dir}/wrapper/${wrapper.dist.name}/lib/wrapper.jar"
            todir="${repo.dir}/wrapper/bin"/>
        <copy file="${repo.dir}/wrapper/${wrapper.dist.name}/src/bin/App.bat.in"
            tofile="${repo.dir}/wrapper/bin/${Name}.bat"/>
        <copy file="${repo.dir}/wrapper/${wrapper.dist.name}/src/bin/InstallApp-NT.bat.in"
            tofile="${repo.dir}/wrapper/bin/Install${Name}-NT.bat"/>
        <copy file="${repo.dir}/wrapper/${wrapper.dist.name}/src/bin/UninstallApp-NT.bat.in"
            tofile="${repo.dir}/wrapper/bin/Uninstall${Name}-NT.bat"/>
    </target>
    <target name="get-wrapper-unix" if="is.Unix">
        <mkdir dir="${repo.dir}/wrapper"/>
        <get src="http://telia.dl.sourceforge.net/sourceforge/wrapper/${wrapper.dist.name}.tar.gz"
            dest="${repo.dir}/wrapper/${wrapper.dist.name}.tar.gz"
            verbose="true"
            usetimestamp="true"/>
        <gunzip src="${repo.dir}/wrapper/${wrapper.dist.name}.tar.gz" dest="${repo.dir}/wrapper"/>
        <untar src="${repo.dir}/wrapper/${wrapper.dist.name}.tar" dest="${repo.dir}/wrapper"/>
        <copy file="${repo.dir}/wrapper/${wrapper.dist.name}/bin/wrapper"
            todir="${repo.dir}/wrapper/bin"/>
        <copy file="${repo.dir}/wrapper/${wrapper.dist.name}/bin/realpath"
            todir="${repo.dir}/wrapper/bin"/>
        <copy file="${repo.dir}/wrapper/${wrapper.dist.name}/lib/libwrapper.so"
            todir="${repo.dir}/wrapper/bin"/>
        <copy file="${repo.dir}/wrapper/${wrapper.dist.name}/lib/wrapper.jar"
            todir="${repo.dir}/wrapper/bin"/>
        <copy file="${repo.dir}/wrapper/${wrapper.dist.name}/src/bin/sh.script.in"
            tofile="${repo.dir}/wrapper/bin/${name}-wrapper.sh">
            <filterset>
                <filter token="app.name" value="${name}"/>
                <filter token="app.long.name" value="${long.name}"/>
            </filterset>
        </copy>
        <copy file="${repo.dir}/wrapper/${wrapper.dist.name}/src/bin/bash.script.in"
            tofile="${repo.dir}/wrapper/bin/${name}-wrapper.bash">
            <filterset>
                <filter token="app.name" value="${name}"/>
                <filter token="app.long.name" value="${long.name}"/>
            </filterset>
        </copy>
    </target>
    <target name="get-wrapper"
        depends="get-wrapper-test, get-wrapper-windows, get-wrapper-unix"
        description="Get the Wrapper distribution from SourceForge.">
        <mkdir dir="${repo.dir}/wrapper"/>
    </target>

    <target name="dist-lite-wrapper-windows" depends="dist-lite" if="wrapper.present.Windows">
        <copy file="${repo.dir}/wrapper/bin/Wrapper.exe" todir="${bin.dist.bin}"/>
        <copy file="${repo.dir}/wrapper/bin/Wrapper.dll" todir="${bin.dist.bin}"/>

        <copy file="${repo.dir}/wrapper/bin/${Name}.bat" todir="${bin.dist.bin}"/>
        <copy file="${repo.dir}/wrapper/bin/Install${Name}-NT.bat" todir="${bin.dist.bin}"/>
        <copy file="${repo.dir}/wrapper/bin/Uninstall${Name}-NT.bat" todir="${bin.dist.bin}"/>
    </target>
    <target name="dist-lite-wrapper-unix" depends="dist-lite" if="wrapper.present.Unix">
        <copy file="${repo.dir}/wrapper/bin/wrapper" todir="${bin.dist.bin}"/>
        <copy file="${repo.dir}/wrapper/bin/realpath" todir="${bin.dist.bin}"/>
        <copy file="${repo.dir}/wrapper/bin/libwrapper.so" todir="${bin.dist.bin}"/>

        <copy file="${phoenix-wrapper.sh}" tofile="${bin.dist.bin}/${name}-wrapper.sh"/>
        <chmod file="${bin.dist.bin}/*.sh" perm="u+x"/>
        <chmod file="${bin.dist.bin}/realpath" perm="u+x"/>
        <chmod file="${bin.dist.bin}/wrapper" perm="u+x"/>
    </target>
    <target name="dist-lite-wrapper" depends="dist-lite-wrapper-windows, dist-lite-wrapper-unix"
        if="wrapper.present"
        description="generates the Phoenix binary distribution without the javadocs and with wrapper">

        <copy file="${wrapper.jar}" todir="${bin.dist.bin}"/>
        <copy file="${conf.dir}/wrapper.conf" todir="${bin.dist.conf}"/>
        <fixcrlf srcdir="${bin.dist.conf}" includes="wrapper.conf" eol="lf"/>

        <fixcrlf srcdir="${bin.dist.dir}" includes="**/*.bat" eol="crlf"/>
        <fixcrlf srcdir="${bin.dist.dir}" includes="**/*.sh" eol="lf"/>
        <chmod file="${bin.dist.bin}/*.sh" perm="u+x"/>
        <chmod file="${bin.dist.bin}/*.bat" perm="u-x"/>
    </target>


    <!-- =================================================================== -->
    <!-- JMX Tasks.                                                          -->
    <!-- =================================================================== -->
    <target name="check-mx4j-init" depends="init">
        <available property="mx4j.present" classname="mx4j.util.StandardMBeanProxy">
            <classpath refid="project.class.path"/>
        </available>
    </target>

    <target name="check-mx4j" depends="check-mx4j-init" unless="mx4j.present">
        <echo>**************************</echo>
        <echo>* Please execute target  *</echo>
        <echo>* 'get-mx4j' in the main *</echo>
        <echo>* build.xml build file   *</echo>
        <echo>* to download one and    *</echo>
        <echo>* a half Mb of MX4J      *</echo>
        <echo>**************************</echo>
        <fail message="MX4J needed. See above."/>
    </target>

    <!-- Get the jars from the MX4J project. -->
    <!-- For licensing reasons, we are unable to put these Jars in our CVS or source distributions. -->
    <target name="get-mx4j" description="Get the MX4J distribution from SourceForge.">
        <mkdir dir="${repo.dir}/mx4j"/>
        <get src="http://telia.dl.sourceforge.net/sourceforge/mx4j/mx4j-1.1.1.tar.gz"
            dest="${repo.dir}/mx4j/mx4j.tar.gz"
            verbose="true"
            usetimestamp="true"/>
        <gunzip src="${repo.dir}/mx4j/mx4j.tar.gz" dest="${repo.dir}/mx4j"/>
        <untar src="${repo.dir}/mx4j/mx4j.tar" dest="${repo.dir}/mx4j"/>
    </target>

    <!-- =================================================================== -->
    <!-- Log4j Tasks.                                                          -->
    <!-- =================================================================== -->
    <target name="check-log4j-init" depends="init">
        <available property="log4j.present" classname="org.apache.log4j.Logger">
            <classpath refid="project.class.path"/>
        </available>
    </target>

    <target name="check-log4j" depends="check-log4j-init" unless="log4j.present">
        <echo>***************************</echo>
        <echo>* Please execute target   *</echo>
        <echo>* 'get-log4j' in the main *</echo>
        <echo>* build.xml build file    *</echo>
        <echo>* to download one and     *</echo>
        <echo>* a half Mb of log4j      *</echo>
        <echo>***************************</echo>
        <fail message="log4j needed. See above."/>
    </target>

    <!-- Get the jars from the log4j project. -->
    <!-- For licensing reasons, we are unable to put these Jars in our CVS or source distributions. -->
    <target name="get-log4j" description="Get the log4j.">
        <mkdir dir="${repo.dir}/log4j"/>
        <get src="http://www.ibiblio.org/maven/log4j/jars/log4j-1.2.7.jar"
            dest="${repo.dir}/log4j/log4j-1.2.7.jar"
            verbose="true"
            usetimestamp="true"/>
    </target>

    <!-- =================================================================== -->
    <!-- CLI Tasks.                                                          -->
    <!-- =================================================================== -->
    <target name="check-cli-init" depends="init">
        <available property="cli.present" classname="org.realityforge.cli.CLOption">
            <classpath refid="project.class.path"/>
        </available>
    </target>

    <target name="check-cli" depends="check-cli-init" unless="cli.present">
        <echo>**************************</echo>
        <echo>* Please execute target  *</echo>
        <echo>* 'get-cli' in the main  *</echo>
        <echo>* build.xml build file   *</echo>
        <echo>* to download one and    *</echo>
        <echo>* a half Mb of Spice CLI *</echo>
        <echo>**************************</echo>
        <fail message="Spice CLI needed. See above."/>
    </target>

    <!-- Get the jars from the cli project. -->
    <!-- For licensing reasons, we are unable to put these Jars in our CVS or source distributions. -->
    <target name="get-cli" description="Get the Spice CLI distribution from SourceForge.">
        <mkdir dir="${repo.dir}/cli"/>
        <get src="http://osdn.dl.sourceforge.net/sourceforge/spice/cli-1.0.tar.gz"
            dest="${repo.dir}/cli/cli.tar.gz"
            verbose="true"
            usetimestamp="true"/>
        <gunzip src="${repo.dir}/cli/cli.tar.gz" dest="${repo.dir}/cli"/>
        <untar src="${repo.dir}/cli/cli.tar" dest="${repo.dir}/cli"/>
    </target>

    <!-- =================================================================== -->
    <!-- ConfigKit Tasks.                                                    -->
    <!-- =================================================================== -->
    <target name="check-configkit-init" depends="init">
        <available property="configkit.present" classname="org.realityforge.configkit.PropertyExpander">
            <classpath refid="project.class.path"/>
        </available>
    </target>

    <target name="check-configkit" depends="check-configkit-init" unless="configkit.present">
        <echo>********************************</echo>
        <echo>* Please execute target        *</echo>
        <echo>* 'get-configkit' in the main  *</echo>
        <echo>* build.xml build file         *</echo>
        <echo>* to download one and          *</echo>
        <echo>* a half Mb of Spice ConfigKit *</echo>
        <echo>********************************</echo>
        <fail message="Spice ConfigKit needed. See above."/>
    </target>

    <!-- Get the jars from the configkit project. -->
    <target name="get-configkit" description="Get the Spice ConfigKit distribution from SourceForge.">
        <mkdir dir="${repo.dir}/spice-configkit"/>
        <get src="http://osdn.dl.sourceforge.net/sourceforge/spice/spice-configkit-1.1.tar.gz"
            dest="${repo.dir}/spice-configkit/spice-configkit.tar.gz"
            verbose="true"
            usetimestamp="true"/>
        <gunzip src="${repo.dir}/spice-configkit/spice-configkit.tar.gz" dest="${repo.dir}/spice-configkit"/>
        <untar src="${repo.dir}/spice-configkit/spice-configkit.tar" dest="${repo.dir}/spice-configkit"/>
    </target>

    <!-- Main target -->
    <target name="main" depends="dist-lite"
        description="generates the Phoenix distribution without the javadocs"/>

    <target name="rebuild" description="Rebuilds Phoenix">
        <antcall target="clean" inheritall="false"/>
        <antcall target="main" inheritall="false"/>
        <antcall target="test" inheritall="false"/>
    </target>

    <target name="all" depends="main, site-all" description="generates the Phoenix distribution"/>

    <!-- Help on usage -->
    <target name="usage">
        <echo message="Use the -projecthelp option instead"/>
    </target>
    <target name="help" depends="usage"/>


    <!-- Check requirements of environment -->
    <target name="check-environment" depends="check-mx4j, check-log4j, check-cli, check-configkit, check-wrapper">
        <available property="xerces.present" type="file" file="${xerces.jar}"/>
        <available property="servlet.present" classname="javax.servlet.Servlet">
            <classpath refid="project.class.path"/>
        </available>
        <available property="beanshell.present" classname="bsh.util.JConsole">
            <classpath refid="project.class.path"/>
        </available>
    </target>

    <!-- Get the jars from the Beanshell project. -->
    <!-- For licensing reasons, we are unable to put these Jars in our CVS or source distributions. -->
    <!-- And given it is optional, it would be a bit of a byte-size waste anyway                    -->
    <target name="get-beanshell" description="Get the BeanShell jar from beansehll.org.">
        <mkdir dir="${repo.dir}/beanshell"/>
        <get src="http://www.beanshell.org/bsh-1.2b7.jar"
            dest="${repo.dir}/beanshell/bsh-1.2b7.jar"
            verbose="true"
            usetimestamp="true"/>
    </target>

    <!-- Prepares the build directory -->
    <target name="prepare" depends="check-environment">

        <mkdir dir="${target.src}"/>
        <copy todir="${target.src}">
            <fileset dir="${compat.dir}">
                <include name="${constants.file}"/>
            </fileset>
            <fileset dir="${java.dir}">
                <include name="${container.constants.file}"/>
            </fileset>
        </copy>

        <tstamp/>
        <replace file="${target.src}/${container.constants.file}" token="@@VERSION@@" value="${version}"/>
        <replace file="${target.src}/${container.constants.file}" token="@@NAME@@" value="${Name}"/>
        <replace file="${target.src}/${container.constants.file}" token="@@DATE@@" value="${TODAY}"/>
        <replace file="${target.src}/${constants.file}" token="@@VERSION@@" value="${version}"/>
        <replace file="${target.src}/${constants.file}" token="@@NAME@@" value="${Name}"/>
        <replace file="${target.src}/${constants.file}" token="@@DATE@@" value="${TODAY}"/>

    </target>


    <!-- Compiles the source code -->
    <target name="compile" depends="prepare,checkstyle" description="compiles the source code">

        <mkdir dir="${target.classes}"/>

        <javac srcdir="${java.dir}"
            destdir="${target.classes}"
            debug="${build.debug}"
            optimize="${build.optimize}"
            deprecation="${build.deprecation}">
            <classpath refid="project.class.path"/>
            <src path="${target.src}"/>
            <src path="${compat.dir}"/>
            <src path="${api.dir}"/>
            <exclude name="${constants.file}"/>
            <exclude name="${container.constants.file}"/>
            <exclude name="org/apache/avalon/phoenix/frontends/PhoenixServlet.java" unless="servlet.present"/>
            <exclude name="org/apache/avalon/phoenix/frontends/ComposableServlet.java" unless="servlet.present"/>
            <exclude name="org/apache/avalon/phoenix/launcher/DaemonLauncher.java"
                unless="wrapper.present"/>
            <exclude name="org/apache/avalon/phoenix/components/kernel/beanshell/*.java"
                unless="beanshell.present"/>
        </javac>

        <copy todir="${target.classes}">
            <fileset dir="${java.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.xdt"/>
            </fileset>
        </copy>

        <copy todir="${target.classes}/org/apache/avalon/phoenix/tools/">
            <fileset dir="${src.dir}/schema">
                <include name="**/*.dtd"/>
            </fileset>
        </copy>

    </target>

    <target name="test-generate">

        <taskdef name="generatemeta" classname="org.apache.avalon.phoenix.tools.metagenerate.MetaGenerateTask">
            <classpath refid="test.class.path"/>
        </taskdef>

        <mkdir dir="${target.test-metagenerate}"/>

        <generatemeta dest="${target.test-metagenerate}">
            <fileset dir="src/test">
                <include name="**/*.java"/>
                <exclude name="**/framework/**"/>
            </fileset>
        </generatemeta>

    </target>

    <!-- Runs the tests -->
    <target name="test" depends="compile, test-generate" description="compiles and runs unit tests">

        <mkdir dir="${target.testclasses}"/>

        <copy todir="${target.tests}">
            <fileset dir="${target.test-metagenerate}">
                <include name="**/*.xinfo"/>
                <include name="**/*.mxinfo"/>
                <include name="**/*.mf"/>
            </fileset>
        </copy>

        <javac srcdir="${test.dir}"
            destdir="${target.testclasses}"
            debug="${target.debug}"
            optimize="${target.optimize}"
            deprecation="${target.deprecation}">
            <classpath refid="test.class.path"/>
            <src path="${test.dir}"/>
        </javac>

        <copy todir="${target.testclasses}">
            <fileset dir="${test.dir}"/>
            <fileset dir="${java.dir}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

        <mkdir dir="${target.tests}"/>

        <junit fork="true"
            haltonfailure="${junit.failonerror}"
            printsummary="yes"
            dir="${target.tests}">
            <classpath refid="test.class.path"/>

            <formatter type="xml"/>    <!-- xml reports for junitreport -->
            <formatter type="plain" usefile="true"/>  <!-- text reports for humans     -->

            <batchtest todir="${target.tests}">
                <fileset dir="${target.testclasses}">
                    <include name="**/test/*TestCase.class"/>
                    <include name="**/metagenerate/*TestCase.class"/>
                    <exclude name="**/Abstract*"/>
                </fileset>
            </batchtest>
        </junit>

    </target>

    <!-- Make .xinfo, .mxinfo and manifest automatically for blocks -->
    <target name="phoenix-metagenerate" depends="compile">

        <mkdir dir="${target.metagenerate}"/>

        <taskdef name="generatemeta" classname="org.apache.avalon.phoenix.tools.metagenerate.MetaGenerateTask">
            <classpath refid="project.class.path"/>
        </taskdef>

        <generatemeta dest="${target.metagenerate}">
            <fileset dir="${java.dir}">
                <include name="**/*.java"/>
            </fileset>
        </generatemeta>

    </target>


    <!-- Creates all the .jar files -->
    <target name="jars" depends="phoenix-metagenerate">

        <mkdir dir="${target.lib}"/>

        <jar jarfile="${target.lib}/phoenix-client.jar" basedir="${target.classes}">
            <include name="org/apache/avalon/phoenix/*"/>
            <include name="org/apache/avalon/phoenix/metainfo/**"/>
            <include name="org/apache/avalon/phoenix/metadata/**"/>
            <include name="org/apache/avalon/phoenix/tools/**"/>
            <exclude name="org/apache/avalon/phoenix/tools/metagenerate/**"/>
            <exclude name="org/apache/avalon/phoenix/tools/punit/**"/>
        </jar>

        <jar jarfile="${target.lib}/phoenix-loader.jar"
            basedir="${target.classes}">
            <manifest>
                <attribute name="Main-Class" value="org.apache.avalon.phoenix.launcher.Main"/>
            </manifest>
            <include name="org/apache/avalon/phoenix/launcher/**"/>

            <zipfileset dir="${conf.dir}" prefix="META-INF/">
                <include name="java.policy"/>
            </zipfileset>
        </jar>

        <jar jarfile="${target.lib}/phoenix-engine.jar">
            <fileset dir="${target.classes}">
                <include name="org/apache/avalon/phoenix/engine/**"/>
                <include name="org/apache/avalon/phoenix/frontends/**"/>
                <include name="org/apache/avalon/phoenix/components/**"/>
                <include name="org/apache/avalon/phoenix/interfaces/**"/>
                <exclude name="org/apache/avalon/phoenix/launcher/**"/>
            </fileset>
            <fileset dir="${target.metagenerate}">
                <include name="org/apache/avalon/phoenix/engine/**"/>
                <include name="org/apache/avalon/phoenix/frontends/**"/>
                <include name="org/apache/avalon/phoenix/components/**"/>
                <include name="org/apache/avalon/phoenix/interfaces/**"/>
                <exclude name="org/apache/avalon/phoenix/launcher/**"/>
            </fileset>
        </jar>

        <jar jarfile="${target.lib}/phoenix-beanshell-commands.jar">
            <zipfileset dir="src/beanshell" prefix="bsh/commands/">
                <include name="**"/>
            </zipfileset>
        </jar>

        <jar jarfile="${target.lib}/phoenix-tools.jar" basedir="${target.classes}">
            <include name="org/apache/avalon/phoenix/tools/**"/>
            <include name="org/apache/avalon/phoenix/framework/**"/>
            <exclude name="org/apache/avalon/phoenix/tools/punit/**"/>
        </jar>

        <jar jarfile="${target.lib}/phoenix-punit.jar" basedir="${target.classes}">
            <include name="org/apache/avalon/phoenix/tools/punit/**"/>
        </jar>

        <jar jarfile="${target.lib}/phoenix-containerkit.jar" basedir="${target.classes}">
            <include name="org/apache/avalon/phoenix/containerkit/**"/>
        </jar>

    </target>

    <target name="checkstyle" if="do.checkstyle" description="Checkstyle">

        <!-- this invocation of checkstyle requires that checkstyle be downloaded and setup -->
        <!-- thats why you are required to define do.checkstyle property to generate the report -->
        <!-- To setup, place checkstyle-##-all.jar in your ANT_HOME/lib directory -->
        <taskdef name="checkstyle"
            classname="com.puppycrawl.tools.checkstyle.CheckStyleTask">
            <classpath refid="project.class.path"/>
        </taskdef>
        <checkstyle
            lcurlyType="nl"
            lcurlyMethod="nl"
            lcurlyOther="nl"
            rcurly="ignore"
            allowProtected="false"
            allowPackage="false"
            allowNoAuthor="false"
            maxLineLen="100"
            maxMethodLen="100"
            maxConstructorLen="100"
            memberPattern="^m_[a-z][a-zA-Z0-9]*$"
            staticPattern="^c_[a-z][a-zA-Z0-9]*$"
            constPattern="(^c_[a-z][a-zA-Z0-9]*$)|([A-Z_]*$)"
            ignoreImportLen="true"
            allowTabs="false"
            javadocScope="nothing"
            ignoreWhitespace="true"
            cacheFile="checkstyle.cache"
            failOnViolation="${checkstyle.failOnError}"
            ignoreCastWhitespace="true">
            <fileset dir="${java.dir}">
                <include name="**/*.java"/>
            </fileset>
            <formatter type="plain"/>
            <formatter type="xml" toFile="${target.dir}/checkstyle-results.xml"/>
        </checkstyle>
    </target>

    <!-- Copy BeanShell jars -->
    <target name="dist-beanshell" description="Copies Beanshell jars" if="beanshell.jars">
        <copy file="${target.lib}/phoenix-beanshell-commands.jar" todir="${bin.dist.container.lib}"/>
        <copy file="${beanshell.jar}" todir="${bin.dist.container.lib}"/>
    </target>

    <!-- Create the lite build -->
    <target name="dist-lite" depends="jars"
        description="generates the Phoenix distribution without the javadocs">

        <property name="bin.dist.bin" value="${bin.dist.dir}/bin"/>
        <property name="bin.dist.apps" value="${bin.dist.dir}/apps"/>
        <property name="bin.dist.ext" value="${bin.dist.dir}/ext"/>
        <property name="bin.dist.lib" value="${bin.dist.dir}/lib"/>
        <property name="bin.dist.tools.lib" value="${bin.dist.dir}/tools/lib"/>
        <property name="bin.dist.container.lib" value="${bin.dist.bin}/lib"/>
        <property name="bin.dist.conf" value="${bin.dist.dir}/conf"/>

        <mkdir dir="${bin.dist.container.lib}"/>
        <mkdir dir="${bin.dist.tools.lib}"/>
        <mkdir dir="${bin.dist.apps}"/>
        <mkdir dir="${bin.dist.ext}"/>
        <mkdir dir="${bin.dist.lib}"/>
        <mkdir dir="${bin.dist.conf}"/>

        <copy file="${target.lib}/phoenix-client.jar" todir="${bin.dist.lib}/"/>
        <copy file="${target.lib}/phoenix-tools.jar" todir="${bin.dist.tools.lib}/"/>
        <copy file="${target.lib}/phoenix-loader.jar" todir="${bin.dist.bin}/"/>
        <copy file="${target.lib}/phoenix-engine.jar" todir="${bin.dist.container.lib}"/>

        <copy file="${logkit.jar}" todir="${bin.dist.lib}"/>
        <copy file="${log4j.jar}" todir="${bin.dist.lib}"/>
        <copy file="${framework.jar}" todir="${bin.dist.lib}"/>
        <copy file="${excalibur-instrument.jar}" todir="${bin.dist.lib}"/>
        <copy todir="${bin.dist.tools.lib}">
            <fileset dir="${lib.dir}/tools">
                <include name="excalibur-i18n*.jar"/>
                <include name="qdox*.jar"/>
            </fileset>
            <fileset dir="${target.lib}">
                <include name="phoenix-containerkit.jar"/>
            </fileset>
        </copy>
        <copy todir="${bin.dist.container.lib}">
            <fileset dir="${lib.dir}/container">
                <include name="*.jar"/>
            </fileset>
        </copy>

        <copy file="${xerces.jar}" todir="${bin.dist.lib}"/>
        <copy file="${xml-api.jar}" todir="${bin.dist.lib}"/>
        <copy file="${xalan.jar}" todir="${bin.dist.lib}"/>
        <filter token="KERNEL-CLASS" value="${kernel.impl.class}"/>
        <copy todir="${bin.dist.conf}" filtering="on">
            <fileset dir="${conf.dir}">
                <include name="*.xml"/>
            </fileset>
        </copy>

        <copy todir="${bin.dist.apps}">
            <fileset dir="${lib.dir}/deploy/apps">
                <include name="*.sar"/>
            </fileset>
        </copy>
        <copy todir="${bin.dist.ext}">
            <fileset dir="${lib.dir}/deploy/ext">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy todir="${bin.dist.lib}">
            <fileset dir="${lib.dir}/deploy/lib">
                <include name="*.jar"/>
            </fileset>
        </copy>

        <delete dir="${target.mx}"/>
        <unzip src="${mx4j-tools.jar}" dest="${target.mx}"/>
        <property name="strings_en.xml" value="${target.mx}/mx4j/adaptor/http/xsl/strings_en.xml"/>
        <replace file="${strings_en.xml}" token="MX4J/Http Adaptor" value="Apache's Phoenix Server"/>
        <replace file="${strings_en.xml}" token="mx4jlogo" value="phoenixlogo"/>
        <replace file="${strings_en.xml}" token="MX4J logo" value="Phoenix Logo"/>
        <replace file="${strings_en.xml}" token="JMX Management Console" value="Avalon-Phoenix Management Console"/>
        <replace file="${strings_en.xml}" token="logo.gif" value="phoenix.gif"/>
        <replace file="${strings_en.xml}" token="common.phoenix.gif" value="common.logo.gif"/>
        <replace file="${strings_en.xml}" token="100" value=""/>
        <replace file="${strings_en.xml}" token="50" value=""/>
        <replace file="${strings_en.xml}" token="mx4j.sourceforge.net" value="jakarta.apache.org/avalon/phoenix"/>
        <replace file="${target.mx}/mx4j/adaptor/http/xsl/stylesheet.css" token="183,187,184" value="white"/>
        <copy file="src/logos/phoenix.gif" todir="${target.mx}/mx4j/adaptor/http/xsl"/>

        <zip destfile="${target.lib}/mx4j-tools.jar" basedir="${target.mx}"/>

        <copy file="${cli.jar}" todir="${bin.dist.bin}/lib"/>
        <copy file="${configkit.jar}" todir="${bin.dist.bin}/lib"/>
        <copy todir="${bin.dist.bin}/lib">
            <fileset refid="configkit.fileset"/>
        </copy>
        <copy file="${mx4j.jar}" todir="${bin.dist.bin}/lib"/>
        <copy file="${target.lib}/mx4j-tools.jar" todir="${bin.dist.bin}/lib"/>

        <antcall target="dist-beanshell"/>

        <copy file="${script.dir}/run.bat" todir="${bin.dist.bin}"/>
        <copy file="${script.dir}/run.sh" todir="${bin.dist.bin}"/>
        <copy file="${script.dir}/phoenix.sh" todir="${bin.dist.bin}"/>

        <chmod dir="${bin.dist.dir}" perm="go-rwx"/>
        <chmod file="${bin.dist.bin}/*.sh" perm="u+x"/>
        <chmod file="${bin.dist.bin}/*.bat" perm="u-x"/>
        <fixcrlf srcdir="${bin.dist.dir}" includes="**/*.bat" eol="crlf"/>
        <fixcrlf srcdir="${bin.dist.dir}" includes="**/*.sh" eol="lf"/>

    </target>

    <!-- Create the lite build -->

    <target name="install"
        depends="dist-lite-wrapper,install-check-phoenix"
        description="Install phoenix into phoenix.home">

        <mkdir dir="${phoenix.home}"/>

        <copy todir="${phoenix.home}">
            <fileset dir="${bin.dist.dir}"/>
        </copy>

        <chmod file="${phoenix.home}/bin/*.sh" perm="u+x"/>
        <chmod file="${phoenix.home}/bin/*.bat" perm="u-x"/>

    </target>

    <target name="install-check-phoenix" unless="phoenix.home">
        <fail message="phoenix.home not specified."/>
    </target>

    <!-- Create the distribution -->
    <target name="bin-dist" depends="all">

        <property name="bin.dist.docs" value="${bin.dist.dir}/docs"/>
        <property name="bin.dist.logs" value="${bin.dist.dir}/logs"/>
        <property name="bin.dist.javadocs" value="${bin.dist.dir}/docs/api"/>
        <property name="bin.dist.tools" value="${bin.dist.dir}/tools"/>

        <mkdir dir="${bin.dist.logs}"/>
        <mkdir dir="${bin.dist.docs}"/>
        <mkdir dir="${bin.dist.javadocs}"/>

        <copy todir="${bin.dist.docs}">
            <fileset dir="${target.docs}"/>
        </copy>

        <copy todir="${bin.dist.javadocs}">
            <fileset dir="${target.javadocs}"/>
        </copy>

        <copy todir="${bin.dist.tools}">
            <fileset dir="${target.dir}/lib">
                <include name="phoenix-metagenerate.jar"/>
                <include name="phoenix-punit.jar"/>
            </fileset>
        </copy>

        <echo file="${bin.dist.tools}/readme.txt" append="false">
            These are tools useful for build-time only.
            You can delete the tools/ dir for a runtime install of Phoenix.

            phoenix-metagenerate.jar needs to be used with qdox-1.0.jar
            See http://cvs.apache.org/viewcvs/avalon-apps/demo/target.xml for usage
            See http://jakarta.apache.org/avalon/phoenix/mx/index.html for documentation

            phoenix-punit.jar needs to be used with phoenix-containerkit-1.0.jar
            See http://cvs.apache.org/viewcvs/avalon-phoenix/src/test/org/apache/avalon/phoenix/tools/punit/test/
            for usage.
            See http://jakarta.apache.org/avalon/phoenix/punit/index.html for documentation
        </echo>

        <filter token="version" value="${version}"/>
        <filter token="dist.name" value="${dist.name}"/>
        <copy todir="${bin.dist.dir}" filtering="on">
            <fileset dir=".">
                <include name="README.txt"/>
                <include name="WARNING.txt"/>
                <include name="LICENSE.txt"/>
            </fileset>
        </copy>

        <chmod dir="${bin.dist.dir}" perm="go-rwx"/>

    </target>

    <!-- Create the source distribution -->
    <target name="src-dist">

        <property name="src.dist.src" value="${src.dist.dir}/src"/>
        <property name="src.dist.docs" value="${src.dist.dir}/docs"/>
        <property name="src.dist.javadocs" value="${src.dist.dir}/docs/api"/>
        <property name="src.dist.lib" value="${src.dist.dir}/lib"/>
        <property name="src.dist.tools" value="${src.dist.dir}/tools"/>

        <mkdir dir="${src.dist.dir}"/>
        <mkdir dir="${src.dist.docs}"/>
        <mkdir dir="${src.dist.javadocs}"/>

        <copy file="${xerces.jar}" todir="${src.dist.lib}/"/>
        <copy file="${xml-api.jar}" todir="${src.dist.lib}/"/>
        <copy file="${xalan.jar}" todir="${src.dist.lib}/"/>
        <copy file="${framework.jar}" todir="${src.dist.lib}"/>
        <copy todir="${src.dist.lib}">
            <fileset dir="${lib.dir}">
                <include name="excalibur*.jar"/>
                <include name="README.txt"/>
            </fileset>
        </copy>
        <mkdir dir="${src.dist.lib}/deploy"/>
        <copy todir="${src.dist.lib}/deploy">
            <fileset dir="${lib.dir}/deploy">
                <include name="**"/>
            </fileset>
        </copy>

        <copy file="${logkit.jar}" todir="${src.dist.lib}"/>

        <copy todir="${src.dist.src}">
            <fileset dir="${src.dir}"/>
        </copy>

        <copy todir="${src.dist.docs}">
            <fileset dir="${target.docs}"/>
        </copy>

        <copy todir="${src.dist.javadocs}">
            <fileset dir="${target.javadocs}"/>
        </copy>

        <filter token="version" value="${version}"/>
        <filter token="dist.name" value="${dist.name}"/>
        <copy todir="${src.dist.dir}" filtering="on">
            <fileset dir=".">
                <include name="ant.properties.sample"/>
                <include name="target.bat"/>
                <include name="target.sh"/>
                <include name="target.xml"/>
                <include name="BUILDING.txt"/>
                <include name="status.xml"/>
                <include name="forrest.properties"/>
                <include name="LICENSE.txt"/>
                <include name="project.properties"/>
                <include name="README.txt"/>
                <include name="WARNING.txt"/>
            </fileset>
        </copy>

        <fixcrlf srcdir="${src.dist.src}/java" includes="**/*.java" eol="lf"/>
        <chmod dir="${src.dist.dir}" perm="go-rwx"/>

    </target>

    <!-- Completely build all dists -->
    <target name="dist-src" depends="site-all, announcement">
        <mkdir dir="${dist.base}"/>
        <delete dir="${dist.name}"/>

        <antcall target="src-dist">
            <param name="src.dist.dir" value="${dist.name}"/>
        </antcall>

        <zip zipfile="${dist.base}/${dist.name}-src.zip"
            basedir="${dist.name}/.."
            includes="${dist.name}/**"/>

        <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-src.tar">
            <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
                <include name="${dist.name}/**"/>
            </tarfileset>
        </tar>

        <gzip zipfile="${dist.base}/${dist.name}-src.tar.gz"
            src="${dist.base}/${dist.name}-src.tar"/>

        <delete file="${dist.base}/${dist.name}-src.tar"/>
        <delete dir="${dist.name}"/>
    </target>

    <target name="dist-bin" depends="dist-src">
        <mkdir dir="${dist.base}"/>
        <delete dir="${dist.name}"/>

        <antcall target="bin-dist">
            <param name="bin.dist.dir" value="${dist.name}"/>
        </antcall>

        <!-- Two readme files to ensure directories are untarred -->
        <echo file="${dist.name}/apps/README.txt" append="false">
            Place SAR files in here for Phoenix to launch.
        </echo>
        <echo file="${dist.name}/ext/README.txt" append="false">
            Place extension jars here.
        </echo>
        <echo file="${dist.name}/logs/README.txt" append="false">
            The Phoenix Kernel Logs will be placed here.
        </echo>

        <zip zipfile="${dist.base}/${dist.name}-bin.zip">
            <fileset dir="${dist.name}/..">
                <include name="${dist.name}/**"/>
                <exclude name="${dist.name}/lib/bsh*.jar"/>
            </fileset>
        </zip>

        <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-bin.tar">
            <tarfileset dir="${dist.name}/.." mode="755" username="avalon" group="avalon">
                <include name="${dist.name}/bin/*.sh"/>
            </tarfileset>
            <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
                <include name="${dist.name}/**"/>
                <exclude name="${dist.name}/bin/*.sh"/>
                <exclude name="${dist.name}/lib/bsh*.jar"/>
            </tarfileset>
        </tar>

        <gzip zipfile="${dist.base}/${dist.name}-bin.tar.gz"
            src="${dist.base}/${dist.name}-bin.tar"/>

        <delete file="${dist.base}/${dist.name}-bin.tar"/>

        <!-- Do not delete the temp dir yet as it is needed by the platform specific builds. -->
    </target>

    <target name="dist-wrapper-windows" depends="dist-bin, check-wrapper" if="wrapper.present.Windows">
        <copy todir="${dist.name.wrapper}">
            <fileset dir="${dist.name}"/>
        </copy>

        <copy file="${repo.dir}/wrapper/bin/Wrapper.exe" todir="${dist.name.wrapper}/bin"/>
        <copy file="${repo.dir}/wrapper/bin/Wrapper.dll" todir="${dist.name.wrapper}/bin"/>
        <copy file="${wrapper.jar}" todir="${dist.name.wrapper}/bin"/>
        <copy file="${conf.dir}/wrapper.conf" todir="${dist.name.wrapper}/conf"/>

        <copy file="${repo.dir}/wrapper/bin/${Name}.bat" todir="${dist.name.wrapper}/bin"/>
        <copy file="${repo.dir}/wrapper/bin/Install${Name}-NT.bat" todir="${dist.name.wrapper}/bin"/>
        <copy file="${repo.dir}/wrapper/bin/Uninstall${Name}-NT.bat" todir="${dist.name.wrapper}/bin"/>

        <zip zipfile="${dist.base}/${dist.name.wrapper}-bin.zip">
            <fileset dir="${dist.name.wrapper}/..">
                <include name="${dist.name.wrapper}/**"/>
                <exclude name="${dist.name.wrapper}/lib/bsh*.jar"/>
            </fileset>
        </zip>

        <delete dir="${dist.name.wrapper}"/>
    </target>
    <target name="dist-wrapper-unix" depends="dist-bin, check-wrapper" if="wrapper.present.Unix">
        <copy todir="${dist.name.wrapper}">
            <fileset dir="${dist.name}"/>
        </copy>

        <copy file="${repo.dir}/wrapper/bin/wrapper" todir="${dist.name.wrapper}/bin"/>
        <copy file="${repo.dir}/wrapper/bin/realpath" todir="${dist.name.wrapper}/bin"/>
        <copy file="${repo.dir}/wrapper/bin/libwrapper.so" todir="${dist.name.wrapper}/bin"/>
        <copy file="${wrapper.jar}" todir="${dist.name.wrapper}/bin"/>
        <copy file="${conf.dir}/wrapper.conf" todir="${dist.name.wrapper}/conf"/>

        <copy file="${phoenix-wrapper.sh}" tofile="${dist.name.wrapper}/bin/${name}-wrapper.sh"/>

        <tar longfile="gnu" tarfile="${dist.base}/${dist.name.wrapper}-bin.tar">
            <tarfileset dir="${dist.name.wrapper}/.." mode="755" username="avalon" group="avalon">
                <include name="${dist.name.wrapper}/bin/*.sh"/>
                <include name="${dist.name.wrapper}/bin/wrapper"/>
                <include name="${dist.name.wrapper}/bin/realpath"/>
            </tarfileset>
            <tarfileset dir="${dist.name.wrapper}/.." username="avalon" group="avalon">
                <include name="${dist.name.wrapper}/**"/>
                <exclude name="${dist.name.wrapper}/bin/*.sh"/>
                <exclude name="${dist.name.wrapper}/bin/wrapper"/>
                <exclude name="${dist.name.wrapper}/bin/realpath"/>
                <exclude name="${dist.name.wrapper}/lib/bsh*.jar"/>
            </tarfileset>
        </tar>

        <gzip zipfile="${dist.base}/${dist.name.wrapper}-bin.tar.gz"
            src="${dist.base}/${dist.name.wrapper}-bin.tar"/>

        <delete file="${dist.base}/${dist.name.wrapper}-bin.tar"/>
        <delete dir="${dist.name.wrapper}"/>
    </target>
    <target name="dist" depends="dist-wrapper-windows, dist-wrapper-unix"
        description="generates the Phoenix distribution (src, bin, and bin with wrapper)">

        <delete dir="${dist.name}"/>
    </target>

    <!-- Cleans up build and distribution directories -->
    <target name="clean" description="cleans up the created directories">
        <delete dir="${target.dir}"/>
        <delete dir="${bin.dist.dir}"/>
        <delete>
            <fileset dir="." includes="**/*~" defaultexcludes="no"/>
            <fileset dir="." includes="velocity.log*"/>
        </delete>
    </target>

    <!-- Cleans absolutely everything up -->
    <target name="distclean" depends="clean" description="cleans up all generated files and directories">
        <delete dir="${dist.base}"/>
        <delete>
            <fileset dir="." includes="jakarta-news.xml"/>
            <fileset dir="." includes="Announcement.txt"/>
        </delete>
    </target>


    <!-- Create the API documentation -->
    <target name="javadocs">

        <delete dir="${target.javadocs}"/>
        <mkdir dir="${target.javadocs}"/>

        <javadoc packagenames="org.apache.*"
            sourcepath="${java.dir}:${compat.dir}:${api.dir}"
            destdir="${target.javadocs}">
            <classpath refid="project.class.path"/>
            <doclet name="com.sun.tools.doclets.standard.Standard">
                <param name="-author"/>
                <param name="-version"/>
                <param name="-doctitle" value="${Name}"/>
                <param name="-windowtitle" value="${Name} API"/>
                <param name="-bottom"
                    value="&quot;Copyright &#169; 2001 Apache Avalon Project. All Rights Reserved.&quot;"/>
                <param name="-link" value="http://java.sun.com/j2se/1.4/docs/api/"/>
                <param name="-link" value="http://java.sun.com/j2ee/sdk_1.3/techdocs/api/"/>
                <param name="-link" value="http://jakarta.apache.org/avalon/api/"/>
            </doclet>
        </javadoc>

    </target>


    <!-- Create the announcements and HEADER.html -->

    <target name="announcement">

        <filter token="Name" value="${Near}"/>
        <filter token="name" value="${near}"/>
        <filter token="version" value="${version}"/>
        <filter token="year" value="${year}"/>
        <filter token="status" value="${status}"/>
        <filter token="release" value="${release}"/>
        <filter token="short-version" value="${short.version}"/>

        <mkdir dir="${target.dir}"/>
        <mkdir dir="${dist.base}"/>

        <copy todir="${target.dir}" filtering="on">
            <mapper type="flatten"/>
            <fileset dir=".">
                <include name="${phoenix.tools.dir}/announcement.xml"/>
                <include name="status.xml"/>
            </fileset>
        </copy>

        <style style="${status2changes}" in="${target.dir}/status.xml"
            out="${target.dir}/changes.xml"/>
        <style style="${announce2txt}" in="${target.dir}/announcement.xml"
            out="Announcement.txt"/>
        <style style="${announce2header}" in="${target.dir}/announcement.xml"
            out="${dist.base}/HEADER.html"/>
        <style style="${announce2readme}" in="${target.dir}/announcement.xml"
            out="${dist.base}/README.html"/>
        <style style="${announce2site}" in="${target.dir}/announcement.xml"
            out="jakarta-news.xml"/>

    </target>

    <target name="site-all"
        depends="site,javadocs"
        description="Update site directory">

        <copy todir="${target.docs}/api" filtering="off">
            <fileset dir="${target.javadocs}"/>
        </copy>

        <copy todir="../avalon-site/docs/phoenix" filtering="off">
            <fileset dir="${target.docs}"/>
        </copy>

    </target>



    &forrest-targets;

</project>
