<?xml version="1.0"?>

<document>
    <properties>
        <title>Guide - Step by Step Overview</title>
        <author email="huw@apache.org">Huw Roberts</author>
    </properties>
    <body>
        <section name="Overview" >
            <p>
              This section gives a quick overview of how to go from a blocks source code, to a managed object accessible
              in a management interface.  It does not cover every aspect, nor is it strictly 'correct'.
            </p>

            <subsection name="In Development">
                <p>
                  For a block to be manageable, the developer inserts a series of XDoclet tags
                  in the class file.  Right now these are:
                </p>
                <p>
                At the class level:
                </p>

                <source>
/**
 * Ftp server starting point. Avalon framework will load this
 * from the jar file. This is also the starting point of remote
 * admin.
 *
 * @phoenix:block
 * @phoenix:mx-topic name="ftpServer"
 * @phoenix:service name="org.apache.avalon.ftpserver...
 */
public class FtpServerImpl extends AbstractLogEnabled
...
                </source>
                <p>
                where @phoenix:mx-topic marks the block as eligible for management.
                </p>
                <p>
                For each attribute:
                </p>
                <source>
    /**
     * @phoenix:mx-attribute
     * @phoenix:mx-description Returns the top published directory
     * @phoenix:mx-isWriteable false
     */
    public String getDefaultRoot() {
    ...
                </source>
                <p>
                and finally for each operation:
                </p>
                <source>
    /**
     * @phoenix:mx-operation
     * @phoenix:mx-description Returns port that the server listens on
     */
    public String getServerPort(Integer instance) {
    ...
                </source>
                <p>
                    When this is compiled the PhoenixDoclet task extracts this and inserts it
                    into an mxinfo file.  If a method doesn't have a @pheonix:mx-attribute tag it is not exposed for
                    management.
                </p>
                <p>
                    Here's what the entry generated from the tags above looks like:
                </p>

                <source><![CDATA[
<?xml version="1.0"?>
<!DOCTYPE mxinfo PUBLIC "-//PHOENIX/Mx Info DTD Version 1.0//EN"
                  "http://jakarta.apache.org/phoenix/mxinfo_1_0.dtd">

<mxinfo>

    <topic name="ftpServer" >

      <!-- attributes -->
      <attribute
        name="defaultRoot"
        description="Returns the top published directory"
        isWriteable="no"
        type="java.lang.String"
      />

      <!-- operations -->
      <operation
        name="getServerPort"
        description="Returns port that the server listens on"
        type="java.lang.String"
      >
        <param
          name="instance"
          description="no description"
          type="java.lang.Integer"
        />
      </operation>

    </topic>

</mxinfo>

                ]]></source>

                <p>
                    Alternatively, you could write the mxinfo file directly (particularly in cases
                    where you can't/don't want to modify the source code).
                    The DTD is available [TODO]here.
                </p>
            </subsection>
            <subsection name="At Startup">
                <p>
                    At startup, Phoenix registers each block to a local SystemManager context.  This
                    context determines where the block fits into the management hierarchy.
                </p>
                <source>
                [TODO - code snippet on the register line]
                </source>
                <p>
                    The system manager uses the mxinfo file in conjunction with introspection to
                    generate a ModelMBeanInfo object for each topic.  A RequiredModelMBean is then
                    created and exposed for management.
                </p>
            </subsection>
            <subsection name="While Running">
                <p>
                    In the default configuration, management is provided through MX4J.  The administrator can perform various
                    tasks such as deploying, starting and stopping applications and changing the configuration of various
                    blocks.
                </p>
                <p>
                    The server is accessed on port 8082 of the server. eg. http://localhost:8082.
                </p>
                <p>TODO: Include screenshot?</p>
            </subsection>
        </section>
    </body>
</document>
