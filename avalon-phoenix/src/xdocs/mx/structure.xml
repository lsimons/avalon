<?xml version="1.0"?>

<document>
  <properties>
    <title>Management Guide - Organizing Structure</title>
    <author email="huw@apache.org">Huw Roberts</author>
  </properties>
  <body>
    <section name="Outline">
      <ul>
        <li>
	  a conceptual overview for management
        </li>
      </ul>
    </section>
    <section name="Elements" >
      <p>
        Management information is stored in a structured format that contains both a 
        functional definition of the actions (what can be done) and descriptive information
        about the actions (to help guide the user).  It is composed of the following elements:
      </p>
      <subsection name="Context">
        <p>
          The Context contains a list of managed components called Targets, and a
          list of sub-Contexts.
        </p>
      </subsection>
      <subsection name="Target">
        <p>
          A target is a manageable object.  Examples of Targets in Phoenix include the 
          components, the applications and the blocks.  Each target has one or more topics.
	</p>
      </subsection>
      <subsection name="Topic">
        <p>
          A topic is a group of attributes that can be get and/or set on the Target and a group of operations that can be called on it.  It is intended that Topics group together
          a particular aspect of Targets manageability.
        </p>
      </subsection>
    </section>
    <section name='Hierarchy'>
      <p>
	This diagram illustrates how this might be presented in a management GUI:
      </p>
      <source>
Phoenix 
 | 
 +--Components 
 |   +-- Kernel 
 |   +-- Deployer 
 |   +-- etc. 
 | 
 +--Applications 
     +--Hello World 
     |    +-- Blocks
     |          +-- Block 1 
     |          +-- Block 2 
     | 
     +-- Ftp Server 
          +-- Blocks
                +-- Block 1 
                +-- Block 2 
      </source>
      <p>
        In this example Phoenix, Components and Blocks are Contexts.  Kernel, Deployer, Hello World, Block 1, etc are Targets.  Each Target will then have one or more Topics.  Topics might be Logging, Lifecycle, Deployer, etc.  
      </p>
      <p>
        In a jmx environment each topic would most likely be exported as its own mbean 
        (so in the above example the jmx name would be 'Instance=Phoenix,Application=Hello_World,Block=Block_2,Topic=Logger'.  
      </p>
      <p>
        In a swing environment each topic might have its own tab.
      </p>
      <p>
	In a command line environment, the syntax might be:
      </p>
      <source>
phoenix-mx.set( "Phoenix/Applications/Hello World/Logging/LogLevel", "DEBUG" );
phoenix-mx.describe( ""Phoenix/Applications/Hello World/Logging/LogLevel" );
      </source>
      <p>
        The point behind the 'Organizing Structure' is to keep the management specification 
        seperated from the  management agent, while at the same time providing enough definition 
        to keep a shared conceptual view.
      </p>
    </section>
    <section name="Management Proxies" >
      <p>
        There is one remaining concept to cover, the proxy.  It is a class that can be used 
        to wrap access to the underlying target.  Posible uses include the mapping of data 
        types to more friendly type, (eg. from Date to String and back), cleaning up method names, providing backwards
        compatibility with older versions, and exposing methods from classes reFerenced by 
        the target class.
      </p>
    </section>
  </body>
</document >