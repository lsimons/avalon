<?xml version="1.0"?>

<document>

 <header>
  <title>Todo</title>

   <author name="Avalon Documentation Team" email="avalon-dev@jakarta.apache.org"/>

 </header>

<body>

<section name="Todo">

<p>
This document describes functionality that is either missing or not finished
within Phoenix.
</p>

<p>
Wish List functionality is stuff that we would like to see implemented, but is
not critical for release. This is the area where you can take ownership of a
part of the project and contribute back.
</p>

<p>
Very Important Work to Complete is stuff that we feel is holding up a release of
Avalon.
</p>

<p>
If you are a new developer to Phoenix or even an existing developer, these are
areas where you can take ownership and help complete. Please do not ask us how
you can help, but rather specific questions about how you think that these items
should be implemented. It is up to you to take initiative and provide solutions
to the missing functionality described below. ;-) If your see yourself as more
of a application (rather than infrastructure) writer, then perhaps peruse
Cornerstone's to-do list - it's even more ambitious.
</p>

<p>
Documentation is *always* appreciated in any form. There are two ways to provide
helpful documentation. The first way is to write up HTML or straight text
documentation and send it to one of the primary authors directly (we are also
willing to give you CVS write access if you wish). The second way is to post
Questions/Answers to the FAQ under the Avalon sections there.
There is a Getting Started document named
"getting-started.html" that could always use additional documentation, examples
and clarification. You need to take the initiative and just start writing down
your thoughts and concerns and questions and answers and then giving those back
to us.
</p>

<p>
If you need more detailed help, please join, then send mail to the mailing
list (avalon-dev@jakarta.apache.org) and ask your specific questions there.
</p>

</section>

<section name="Wish List">

    <subsection title="Separate and Antify Validation code">
      <p>
      Refactor block validation code. Write an Ant taks that uses this
      and validates the block jar files and another task that validates the
      assembly.xml file.
      </p>
    </subsection>
    <subsection title="Log messages">
      <p>
      Refactor Log messages so that they are structured in a manner more
      suitable for administrators rather than developers.
      </p>
      <p>
      update 12/05/02: mostly done.
      </p>
    </subsection>

    <subsection title="Generated Configurations">
      <p>
      Define and implement a smart way to generate Avalon configurations.
      Define configuration template containing default configuration,
      user configuration file to overwrite or append configurations to template,
      implement code to merge all servers configuration file to a single Avalon
      configuration file.
      </p>
    </subsection>

    <subsection title="Time Scheduler changes">
      <p>
      Rework the DefaultTimeScheduler so that entrys are removed from heap when
      reset. Otherwise it could lead to excessive buildup of invalidated entries
      if many are reset but remain in heap.
      </p>
    </subsection>

    <subsection title="Opening some tightly kernel-coupled services">
      <p>
      Rework kernel so that ConfigurationRepository, Logging and Management can
      be routed through ServerApplications.
      </p>
    </subsection>

    <subsection title="Virtual File System / Jars within Jars">
      <p>
      Implement a simple read-only VFS so that .sar files do not need to be
      expanded.
      </p>
      <p>
      update 12/05/02: done.
      </p>
    </subsection>

    <subsection title="Thread pooling">
      <p>
      Rework kernel so that thread boundaries are respected and secure. This essentially
      involves using ThreadPools to execute phases and for management.
      </p>
    </subsection>

    <subsection title="JNDI service">
      <p>
      Determine if we need a naming service. If so provide a simple JNDI based naming
      service possibly built on top of cadastre.
      </p>
      <p>
      update 12/05/02: we've decided not to do so at this time.
      </p>
    </subsection>

    <subsection title="Block Management remotely">
      <p>
      Separate out and specify the way in which different parts of system are managed.
      ie Compare how remote Management of Blocks could occur vs Deployer/Kernel/Embeddor
      management occurs.
      </p>
    </subsection>

    <subsection title="Hot deployment">
      <p>
      A standard system for hot deploying and undeploying. This may require the building
      of FileMonitors that will read a file when it is changed.
      </p>
    </subsection>

    <subsection title="Reconfiguration">
      <p><strong>This has a few facets:</strong></p>
      <p>
      A standard reconfiguration system.  This may require the building
      of FileMonitors that will read a file when it is changed.  Any
      kind of block or component that extends the Reconfigurable interface
      gets sent the new configuration.
      </p>
      <p>
      A mechanism to allow one block to be the master of another's configuration
      programmatically.  This would mean that whilst in use, the configuration
      could change.  It could happen invisibly or as part of human interaction
      via some UI.  The blocks woyld be granted configuration-update rights in
      assembly.xml.  Discussed on the list in late Aug, early Sept 2001.
      </p>
      <p>
      Define and implement needed stuff to allow hot and warm reconfiguration at
      runtime.
      </p>

    </subsection>

    <subsection title="Proxy Interfaces">
      <p>
      Currently services are provided via a proxy interface. Rework kernel so that
      the proxy interface can be turned off via a command-line switch.
      </p>
    </subsection>

    <subsection title="Management Console">
      <p>
      Management console/Client interface. CLI version aswell as a GUI version.
      </p>
      <p>
      update 12/05/02: we have a draft of concept.
      </p>
    </subsection>

    <subsection title="Default JNDI Contexts">
      <p>
      Avalon should provide default JNDI contexts
      that Block implementers can extend and use like
      Context, EventContext, and DirectoryContext.
      </p>
    </subsection>

    <subsection title="Java Messaging Service">
      <p>
      JMS (Java Messaging Service) for the Connection Manager. It
      will provide a standard and flexible connection service and
      messaging service. It allows for both point to point messaging
      and multicast messaging (subscriber/provider).
      </p>
    </subsection>

    <subsection title="Server Pools">
      <p>
      Support for server pools.  Several Phoenix servers should be able
      to pool resources and act as one server regardless of VM, or
      physical machine they are on.
      </p>
    </subsection>

    <subsection title="Block loading remotely">
      <p>
      Remote loading of Blocks. Phoenix should be able to pull a block
      at run time from a remote server, check the signature, and run it
      with proper permissions.  This would allow for the possibility of
      automatically upgrading blocks.
      </p>
    </subsection>

    <subsection title="Remote Control">
      <p>
      Write some code to remotely control Phoenix. (This will most likely be
      rolled into JMX support).
      </p>
      <p>
      update 12/05/02: done (through jmx).
      </p>
    </subsection>

    <subsection title="Transactions">
      <p>
      Define and implement some Transaction pattern for the Repository. Maybe JTA?
      </p>
    </subsection>
</section>

<section name="Ongoing work">
    <subsection title="Help needed!">
      <p>
      We can really use some help here! This is a top priority and all
      contributions will be welcomed.
      </p>
    </subsection>

    <subsection title="Documentation">
      <p>
      Write all documentation.
      </p>
    </subsection>

    <subsection title="JavaDocs">
      <p>
      Update JavaDocs for decent developer documentation.
      </p>
    </subsection>

</section>

<section name="Very Important Work to Complete">

    <subsection title="Java Management eXtentions">
      <p>
      JMX (Java Management eXtentions) for central management of
      Avalon. If JMX cannot be done due to licensing, we should
      make the current beginnings of central management more
      robust.
      </p>
      <p>
      update 12/05/02: we're at roughly 80% functionality. We're
      using MX4J as our default MBeanServer.
      </p>
    </subsection>

</section>

</body>
</document>
