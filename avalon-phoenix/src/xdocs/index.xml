<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "dtd/document-v10.dtd">

<document>
  <header>
    <title>Phoenix Developer Documentation</title>
    <subtitle>Introduction</subtitle>
    <authors>
      <person name="Berin Loritsch" email="bloritsch@apache.org"/>
      <person name="Peter Donald" email="donaldp@apache.org"/>
    </authors>
  </header>
  <body>
    <s1 title="Introduction">
      <p>
        Phoenix is a micro-kernel designed and implemented on top of the Avalon
        framework. It is both an API to program to and a reference implementation.
        The reference implementation provides a number of facilities to manage the
        environment of Server Applications. Such facilities include log management,
        classloading, thread management and security. In the future it will 
        conditionally offer support extra facilities such as central server management, 
        server pools, and other facilities aimed at reducing the time to market. The API 
        defines a standard method of piecing togther server components and creating a server.
      </p>
    </s1>
    <s1 title="Multiple Server Application hosting">
      <p>
        Phoenix hosts one or more server applications at the same time in the same Virtual machine.
      </p>
      <figure src="images/phoenix-layers.jpg" alt="Phoenix layer diagram"/>
      <p>
        Shown above are three hosted server applications.  A mail server that would implement multiple listeners for incoming and outgoing services (POP3, SMTP, IMAP etc).  Outlook, Eudora and other mail clients would be able to connect to the server.  As it happens, Apache has a project in progress called "James" that provides these services and Newsgroups.  Also shown is a Web server.  That would respond to HTTP/HTTPS requests from similar standards based clients and be able to host it's own applications (web-apps and virtual websites). Lastly, and non-existant currently at Apache is an EJB Server.  This would be able to host it's own bean applications and might use the web server for it's HTTP needs.
      </p>
    </s1>
    <s1 title="Packaging of a server application">
      <p>
        Phoenix hosts server applications made up of blocks.  The blocks may depend on libraries to function correctly.  The blocks are tied together with Assembly instructions and Configured externally.
      </p>
      <figure src="images/phoenix-app-block.jpg" alt="Phoenix Application in Block view"/>
      <p>
        The server application is entirely contained withing one "sar" file.  Sar is "Server ARchive".  Each block is a zipped set of classes with a "bar" suffix.  This is identical in concept to jar, but bar is used to signify "Block ARichive".  The dependant libraries are regular jars (placed within a directory "lib" insde the sar file).  The Assembly and configuration instructions are in xml form and contained within a "conf" directory inside the sar file.
      </p>
      <figure src="images/phoenix-app-bar.jpg" alt="Phoenix Application in Bar view"/>
      <p>
        FtpServer (part of the Avalon/Cornerstone project) is distributed in sar form.  Here is a view of it's blocks.  It has no third party jars that it depends on.
      </p>
      <figure src="images/phoenix-app-ftpserver.jpg" alt="FtpServer Phoenix Application"/>
      <p>
        Notes - Phoenix does not limit the number of blocks that it allows in a sar file.  Apache's Ant tool now has "taskdefs" for making bar and sar files.  See the "Block Developers Guide" (left margin of this page) for more what/how/why.
      </p>
    </s1>
  </body>
  <footer>
    <legal>
      Copyright (c) @year@ The Jakarta Apache Project All rights reserved.
      $Revision: 1.2 $ $Date: 2001/10/05 10:36:38 $
    </legal>
  </footer>
</document>
