<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "dtd/document-v10.dtd">

<document>
  <header>
    <title>Avalon Phoenix - A future</title>
    <authors>
      <person name="Paul Hammant" email="Paul_Hammant@yahoo.com"/>
    </authors>
  </header>
  <body>
    <s1 title="Introduction">
      <p>
        A long term aim of Phoenix is to provide a platform that hosts multiple third party applications written only in Java within a single virtual machine.  The Phoenix platform is currently hosted on an Operating System such as Unix, Windows or Mac.  It could function directly on top of a Java Operating System.  A CPU combined with a suitable amount of memory, a basic BIOS, a Kernal, a suitable JVM and runtime library, could mount Phoenix and hosted server applications.
      </p>      
    </s1>
    <s1 title="One step further">
      <p>
        Imagine Sun making such a box under their own name or as Cobalt, using low power chips from their own stable or perhaps a StrongARM. That machine could be rack mounted like their current X1:
      </p> 
      <figure>
        <title>Sun X1</title>
        <graphic srccredit="&copy; Sun Microsystems" fileref="http://www.sun.com/products-n-solutions/hw/networking/images/prodsplash/x1.jpg" format="JPEG"/>
      </figure> 
      <p>
        If that rackable server had 32 such CPUs, each with 128Mb of memory all booting Phoenix. And if the CPUs shared a single hard drive, we might have a machine that was tuned to CPU intensive activities. Cocoon/Tomcat, EJB clusters, might be load balanced by one of the CPUs running a Phoenix load balancer.  Alternate scenarios are for virtual site hosting.  It could be a "1U" render or bean farm with each internal CPU having its own TCP/IP address.
      </p>
    </s1>
    <s1 title="Is all this possible?">
      <p>
        Well there are already romable J2SE implementations that are available for StrongARM chips on Compaq's handheld iPAQ.  We are there already, but for the client side rather than the server side.
      </p>
    </s1>
  </body>
</document>
