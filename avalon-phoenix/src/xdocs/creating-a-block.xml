<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "dtd/document-v10.dtd">

<document>
  <header>
    <title>Phoenix Block Developer's Guide - Creating a Block</title>
    <authors>
      <person id="PD" name="Peter Donald" email="peter@apache.org"/>
    </authors>
  </header>
  <body>
    <s1 title="Introduction">
      <p>
        This document will describe the process for creating your first block. There 
        are essentially three steps that must be completed before your block is ready 
        for assembling.
      </p>
      <ol>
        <li>Write the Block component.</li>
        <li>Write the BlockInfo meta-info description file.</li>
        <li>Package the component and related resources into a block jar file.</li>
      </ol>
    </s1>
    <s1 title="Writing the Block component">
      <p>
        Writing the Block is the main task you will be called to do. It follows all
        the rules of writing a standard Avalon component. Block writers must also 
        extend the <code>org.apache.phoenix.Block</code> interface. 
      </p>
      <p>
        If a block implements the Composer interface it will be passed an instance
        of <code>org.apache.phoenix.BlockContext</code> which is an extended version
        of <code>org.apache.avalon.Context</code>. Other than this minor change the 
        Block's container (the Phoenix Kernel) supports all the Avalon lifecycle 
        methods or will in the near future (at the moment suspend/resume is not yet 
        supported).
      </p>
      <p>
        The block can implement an instance of <code>org.apache.phoenix.Service</code>
        if it wishes to export a service to external blocks. It is also possible to 
        aquire services from other blocks in the <code>compose()</code> method.
      </p>
    </s1>
    <s1 title="Write the BlockInfo">
      <p>
        You must create this file to indicate which services this Block depends upon 
        and those services which it offers. It is more fully documented in the 
        <link href="blockinfo-specification.html">BlockInfo Specification</link> document.
      </p>
    </s1>
    <s1 title="Create the jar package">
      <p>
        The final step is packaging up the implementation files, BlockInfos and other
        resources into a jar file. The jar file is a standard jar file with special manifest 
        entries. For each Block that is included in the jar, a new manifest attribute
        must be added, namely &quot;Avalon-Block: true&quot;. An example manifest file is 
        displayed below.
      </p>
      <source>
Manifest-Version: 1.0
Created-By: Apache Avalon Project

Name: com/biz/cornerstone/blocks/MyBlock.class
Avalon-Block: true
      </source>
    </s1>
  </body>
  <footer>
    <legal>
      Copyright (c) @year@ The Jakarta Apache Project All rights reserved.
      $Revision: 1.5 $ $Date: 2002/04/02 18:56:21 $
    </legal>
  </footer>
</document>
