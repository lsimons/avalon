<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.1//EN" "document-v11.dtd">
<document>
  <header>
    <title>Guide - What is a Block Listener?</title>
      
  <authors><person name="Phoenix Documentation Team" email="avalon-phoenix-dev@jakarta.apache.org"/></authors></header>
  <body>
    <section><title>Introduction</title>
      <p>
        A Phoenix Application consists of Blocks. Blocks can depend on the
        services of other Blocks. However there is circumstances in which
        relationships between Blocks other than dependency relationships
        should exist in an application.
      </p>
      <p>
        For example, you may have a Block that is capable of exporting
        other Blocks as SOAP services. The Blocks that wish to be exported
        as SOAP services may need to export a service interface that extends
        SOAPClient.
      </p>
    </section>
    <section><title>What is a Block Listener?</title>
      <p>
        A BlockListener is a component that is created before any Blocks are
        created in an Application. It receives notification after each Block
        is created and setup for Application. The listener also receives
        notification when a Block is about to be shutdown.
      </p>
      <p>
        The relationship discussed above (between SOAPServer and SOAPClients)
        could be modelled as dependencies but that would mean that each application
        would need to modify the SOAPServer so that it depended on a particular
        number of SOAPClients that was specific to application. A better approach
        to modelling these relationships would be to use a BlockListener to "wire"
        together the SOAPClient services in Blocks to the SOAPServer service. As
        soon as any Block is detected that implements a SOAPClient service it could
        be registered with the SOAPServer.
      </p>
    </section>
    <section><title>How to make a block listener</title>
      <p>
        Like normal blocks, a block listener can be <em>LogEnabled</em> and take
        configuration via <em>Configurable</em>.  The special feature is that it
        must implement <em>BlockListener</em> and the four methods that are a
        consequence of that.  Those methods illustrate blocks being added and
        removed etc and come with a <em>BlockEvent</em> argument.  The following
        section in assembly.xml causes instantiation of the block listener:
      </p>
      <source>
        &lt;listener class="pkg.MyBlockListener" name="a-suitable-name" /&gt;
      </source>
    </section>
     <section><title>Guide Contents</title>
       <ol>
        <li><link href="what-is-a-block.html">What is a block?</link></li>
        <li>What is a block listener?</li>
        <li><link href="what-is-an-application-listener.html">What is an application listener?</link></li>
        <li><link href="creating-a-block.html">How do I create a block?</link></li>
        <li><link href="making-phoenix-compatible-comps.html">How do I make my components phoenix-compatible?</link></li>
        <li><link href="blockinfo-specification.html">BlockInfo specification</link></li>
       </ol>
      </section>
</body>
</document>
