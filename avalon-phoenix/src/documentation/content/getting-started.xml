<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.1//EN" "document-v11.dtd">
<document>

 <header>
   <title>Getting Started</title>



 <authors><person name="Phoenix Documentation Team" email="avalon-phoenix-dev@jakarta.apache.org"/><person name="Leo Simons" email="leosimons@apache.org"/><person name="Paul Hammant" email="Paul_Hammant@yahoo.com"/></authors></header>

<body>

<section><title>Introduction</title>

<p>
    This document provides developers with simple documentation for getting
    started with Phoenix. For information about the overall structure of
    Avalon Framework (on which Phoenix is based), please refer to the
    <link href="http://jakarta.apache.org/avalon/framework/index.html">Framework documentation</link>.
</p>

<p>
    Instructions for downloading and installing Phoenix can be found on the
    <link href="install.html">Install</link> document.
</p>

<p>
    More detailed instructions will be added to this document in the future. Feel free
    to send in patches ;)
</p>

</section>

<section><title>View Detailed API Documentation</title>

<p>
    To generate a full set of detailed API documentation for Avalon, go to the base
    directory of source distribution and run the appropriate build script for your
    platform with the parameter 'javadocs'.

    <code>

    &gt; build.[bat|sh] javadocs

</code>

</p>

</section>
<section><title>Run the HelloWorld example</title>

<p>
    After you have successfully built Phoenix, you can verify that it
    has compiled correctly by running the HelloWorld demo Service Application.
</p>
<p>
    Firstly you will need to get the demo-helloword.sar file and drop it into
    the apps directory of Phoenix.  Currently it needs to be built from CVS -
    <link href="http://cvs.apache.org/viewcvs/jakarta-avalon-apps/demo/">
    http://cvs.apache.org/viewcvs/jakarta-avalon-apps/demo/</link>.
</p>
<p>
    Then fire up phoenix with the following command:

    <code>

    &gt; bin/run.[bat|sh]

    </code>
</p>

<p>
    Next, fire up your favorite webbrowser and point it to http://localhost:8999/,
    where localhost is the network name of your machine ("localhost") should
    work on all windows platforms.<br/>
    If all goes well, you will see something like the following:

    <code>

    Hello World!
    Requests so far = 1
    you are 127.0.0.1 at 127.0.0.1

    </code>
</p>
<p>
    This shows that Phoenix has unpacked and launched the server application contained
    within the demo-helloworld.sar file.  If you close and relaunch Phoenix, it should
    restart the application.
</p>
<p>
    As examples go this is a fairly simple one.  You should ignore the altrmihelloworldserver,
    rmihelloworldserver and soaphelloworldserver packages as they are retrofitting the
    helloworld demo with remote capability using three technologies.  HelloWorld uses
    connection management from the Avalon-Cornerstone project, which is good as it allows us to
    share connection pooling across multiple servers.
</p>
</section>
<section><title>The Phoenix Developer Kit - A different example</title>
<p>
    This self contained kit could be considered a starter project for someone wanting to make a
    Phoenix compatible application.  The idea is that you start with this skeleton including
    Ant build script and then add in more and more as your se code to copy from elsewhere.
</p>
<p>
    This  also demonstrates that it is possible to make a server application that is dual mode.
    Dual mode to us is the ability for the server application to run inside Phoenix and to
    stand-alone from the command line.  It is a little bit of a sleight of hand as the codebase
    would be zipped into two forms - the sar file for phoenix and a jar file for standalone.
</p>
<p>
    The Phoenix development kit originates in Phoenix's CVS.  When you have that file, unzip it
    and immediately launch ant to make the jars and sars.  There are four:
    </p><ol>
      <li>phoenix-demo.sar - the server app in Phoenix form</li>
      <li>phoenix-demo-block.sar - used inside the sar</li>
      <li>phoenix-demo-client.sar - a client app to test the server</li>
      <li>phoenix-demo-server.sar - the server app in standalone form</li>
    </ol><p>

    The Server app in standalone mode after being tested with the client app(see below):

    <code>
java -jar phoenix-demo-server.jar
PDK Demo listening on port 7654
Ctrl-C to exit
String passed = Hello!!!!!
    </code>

    The Server app running inside Phoenix and after being tested with the client app (see below):

    <code>
Phoenix 4.0a4

Server started on port 1234
String passed = Hello!!!!!
    </code>

    The client application being used to poke the server :

    <code>
java -jar phoenix-demo-client.jar localhost 7654 Hello!!!!!
    </code>

    (Change the port to 1234 from 7654 to poke the in-Phoenix server).

</p>
<p>
    Note - because of the need to make this dual mode, the PDK does not use Cornerstone
    components.  We normally recommend that people should reuse components from cornerstone as
    the potential for sharing will be much higher.
</p>
</section>
</body>
</document>
