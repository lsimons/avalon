<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.1//EN" "document-v11.dtd">
<document>
  <header>
    <title>Guide - Example Configuration</title>
    
    
  <authors><person name="Stephen McConnell" email="mcconnell@osm.net"/><person name="Gerhard Froehlich" email="g-froehlich@gmx.de"/></authors></header>
  <body>
    <section><title>Introduction</title>
      <p>This page contains a real production example of a block
      assembly and block .xinfo description based an extract from
      a B2B Enterprise Integration and Collaboration Platform developed by
      <link href="http://www.osm.net">OSM</link>.</p>
      <p>This example was originally a Mailing List response to a
      some user questions!</p>
      <p>The orginal post was written by Stephen McConnell from OSM.</p>
    </section>
    <section><title>The example</title>
      <p>Each Block has an associated xinfo file and the xinfo file
      is stored alongside the block in a jar file. The <code>.xinfo</code>
      file contains a description of a reasonably simple block that serves
      as a factory for business processes that handle PKI certification
      requests:</p>
      <source>
&lt;?xml version="1.0"?&gt;

&lt;blockinfo&gt;
&lt;block&gt;
    &lt;version&gt;1.0&lt;/version&gt;
  &lt;/block&gt;

  &lt;services&gt;
      &lt;!--
      This block could be declaring several services that it supports.
      Unlike a Java interface, the service includes a version tag. So
      it's possible for a block to have several services with possibly
      different versions. If there are multiple services then just
      declare them with multiple service entries here. Phoenix will make
      sure that the class with the same name as the .xinfo file
      implements these interfaces (if it doesn't then Phoenix will
      terminate).
      --&gt;
      &lt;service name="org.apache.acme.hub.gateway.FactoryService"/&gt;
  &lt;/services&gt;

  &lt;!--
  So far, we have the definition of a class that supports possibly
  multiple version interfaces. But things get much more interesting, when
  we think about the services that this block requires in order to function
  properly. That's partly handled by the dependencies element and partly by
  the assembly.xml file (which I'll explain later). In the following
  dependency example there are seven "service" dependencies (i.e. 7 versioned
  interface dependencies that must be fulfilled for this block to function.
  --&gt;

  &lt;dependencies&gt;
      &lt;!--
      Each dependency contains a declaration of a role name and a service
      interface and a version that can fulfil that role. The dependency
      does not say anything about where that service implementation should
      come from (that's the job the assembly.xml file). The role element
      is simply the label used in the implementation of your block configure
      method that distinguishes a particular instance of the service.
      --&gt;
      &lt;dependency&gt;
          &lt;role&gt;GATEWAY&lt;/role&gt;
          &lt;service name="org.apache.acme.hub.gateway.GatewayContext"/&gt;
      &lt;/dependency&gt;

      &lt;!--
      This dependency declaration simply states that in order to function,
      this block requires a &lt;service/&gt; (in this case a wrapper to a CORBA
      ORB version 2.4) and that the block implementation will lookup this
      service using the "ORB" keyword.
      --&gt;
      &lt;dependency&gt;
          &lt;role&gt;ORB&lt;/role&gt;
          &lt;service name="org.apache.acme.hub.gateway.ORBService"
                   version="2.4"/&gt;
      &lt;/dependency&gt;

      &lt;!--
      This dependency declares a requirement for a PSS (Persistent State
      Service) Storage Home.
      --&gt;
      &lt;dependency&gt;
          &lt;role&gt;PSS&lt;/role&gt;
          &lt;service name="org.apache.acme.hub.gateway.ProcessorStorageHomeService"/&gt;
      &lt;/dependency&gt;

      &lt;!--
      This dependency enables the block to establish a call-back to the
      block supplying the service. This block uses the Registry interface
      to publish a business process description to a higher level manager.
      --&gt;
      &lt;dependency&gt;
          &lt;role&gt;REGISTRY&lt;/role&gt;
          &lt;service name="org.apache.acme.hub.gateway.Registry"/&gt;
      &lt;/dependency&gt;

      &lt;!-- etc. --&gt;
      &lt;dependency&gt;
          &lt;role&gt;DOMAIN&lt;/role&gt;
          &lt;service name="org.apache.acme.hub.gateway.DomainService"/&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
          &lt;role&gt;RANDOM&lt;/role&gt;
          &lt;service name="org.apache.acme.hub.gateway.RandomService"/&gt;
      &lt;/dependency&gt;
      &lt;dependency&gt;
          &lt;role&gt;CLOCK&lt;/role&gt;
          &lt;service name="org.apache.acme.service.time.TimeService"/&gt;
      &lt;/dependency&gt;

  &lt;/dependencies&gt;

&lt;/blockinfo&gt;

      
      </source>
      <p>Next is the block declaration (an extract from an <code>assembly.xml</code>
      file). This enables the declaration of WHERE the services are coming from.
      I.e. you may have a system with many blocks and even the potential for matching
      services available from more that one block. The class attribute provides the
      link to the <code>.xinfo</code> file and the implementation class. The name
      is used a key within the <code>assembly.xml</code> file when wiring things together.
      E.g. the provide element references a block by its name - and declares that the
      named block will serve as the provider of the service. The role attribute matches
      the role element in the <code>.xinfo</code> dependency declaration.</p>
      <p>The name attribute also serves a the key to lookup a configuration element in
      the application configuration.xml file.</p>
      <source>
&lt;?xml version="1.0"?&gt;

&lt;assembly&gt;

  &lt;!-- other assembly information here --&gt;

  &lt;!-- Certification Request Processor Factory --&gt;
  &lt;block class="org.apache.acme.pki.process.CertificationRequestServer"
         name="certification" &gt;
    &lt;provide name="gateway" role="GATEWAY"/&gt;
    &lt;provide name="gateway" role="ORB"/&gt;
    &lt;provide name="gateway" role="PSS"/&gt;
    &lt;provide name="gateway" role="DOMAIN"/&gt;
    &lt;provide name="gateway" role="RANDOM"/&gt;
    &lt;provide name="pki" role="REGISTRY"/&gt;
    &lt;provide name="time" role="CLOCK"/&gt;
  &lt;/block&gt;

  &lt;!-- more assembly information here --&gt;

&lt;/assembly&gt;
      
      </source>
    <section><title/></section>

    <section><title>Why this seperation?</title></section>
    <ul>
      <li>It forces structure and separation</li>
      <li>It provides a way of managing possibly multiple versions of the
          same interface in a single environment</li>
      <li>It enables explicit declaration of the source of service provision</li>
    </ul>

    <p>For example you can have multiple blocks providing a TimeService.
    One of those blocks uses an external time reference while the others
    use a local time reference. The local time block
    declare dependencies on the external source time block and is periodically
    synchronised. In this example all of the TimeService services are exposing
    the same interface, same version (i.e. same service), but the decision as to
    which service is the provider to another can  be explicitly controlled.
    While the time example is perhaps trivial, there are significant policy
    security implications related to service provider selection.</p>
    </section>
  </body>
</document>
