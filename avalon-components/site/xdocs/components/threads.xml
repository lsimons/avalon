<?xml version="1.0"?>

<document>

  <properties>
    <author email="mcconnell@apache.org">Stephen McConnell</author>
    <title>Cornerstone Scheduler</title>
  </properties>

  <body>
    <section name="Cornerstone Components - Threads">
      <subsection name="Description">
        <p>The threads component provides support for the establishment
        a set of named thread pools.  The component implementation can be configured
        such that multiple thread pools may be defined within which each pool has 
        a minimum and maximum pool criteria and daemon property.  Consumer components
        can access threads from named or default pool using the ThreadManager 
        service interface.</p>
      </subsection>
      <subsection name="Deployment Facts">
        <table>
          <tr><td>Container Support</td><td>
           <a href="http://avalon.apache.org/excalibur/fortress/">Fortress</a>, 
           <a href="http://avalon.apache.org/sandbox/merlin/">Merlin</a>, 
           <a href="http://avalon.apache.org/phoenix/">Phoenix</a>.</td>
          </tr>
          <tr><td>Lifestyle</td><td>singleton</td></tr>
          <tr><td>Lifecycle</td>
            <td>
              <table>
                <tr><th>Stage</th><th>Description</th></tr>
                <tr><td>LogEnabled</td><td>Logs information concerning created pools during 
                  configuration at the DEBUG level.</td></tr>
                <tr>
                  <td>Configurable</td>
                  <td>
                  Declaration of the thread pools and associated 
                  pool establishment criteria.  An example configuration is 
                  presented below.
<source><![CDATA[
<configuration>
  <thread-group>
    <name>default</name>
    <is-daemon>false</is-daemon>
    <max-threads>100</max-threads>
    <min-threads>20</min-threads>
  </thread-group>
</configuration>
]]></source>
                  </td>
                </tr>
              </table>
            </td>
          </tr>
        </table>
      </subsection>
      <subsection name="Example">
        <table>
          <tr><th>Source</th><th>Description</th></tr>
          <tr>
            <td><a href="http://cvs.apache.org/viewcvs.cgi/avalon-cornerstone/threads/tutorial/src/java/org/apache/avalon/cornerstone/threads/tutorial/ThreadConsumer.java">ThreadConsumer.java</a>
            </td>
            <td>
              A demonstration component implementation demonstrates the resolution
              of a ThreadManager and subsequent access to a ThreadPoll against 
              which a Runnable object is launched.  Termination of the container 
              before this time will trigger disposal of the compoennt causing the 
              interuption of the subsidiary thread.
            </td>
          </tr>
          <tr>
            <td>
              <a href="http://cvs.apache.org/viewcvs.cgi/avalon-cornerstone/threads/tutorial/src/java/org/apache/avalon/cornerstone/threads/tutorial/Counter.java">Counter.java</a>
            </td>
            <td>
              The runnable object that simply iniates a countdown and will normally 
              complete and teminate within 10 seconds.  Used by the ThreadConsumer
              component to establish a threaded activity.
            </td>
          </tr>
          <tr>
            <td>
              <a href="http://cvs.apache.org/viewcvs.cgi/*checkout*/avalon-cornerstone/threads/tutorial/src/conf/BLOCK-INF/block.xml">block.xml</a>
            </td>
            <td>
              Merlin deployment directive.
<source><![CDATA[
<block>

   <info>
     <name>threads-tutorial</name>
   </info>

   <implementation>

     <categories priority="INFO"/>

     <engine>
       <classpath>
         <repository>
           <resource id="cornerstone:cornerstone-threads-api" version="1.0"/>
           <resource id="excalibur:excalibur-thread" version="1.1.1"/>
           <resource id="excalibur:excalibur-event" version="2.0"/>
         </repository>
       </classpath>
     </engine>

     <include id="cornerstone:cornerstone-threads-impl" version="1.0"/>

     <component name="test" 
        class="org.apache.avalon.cornerstone.threads.tutorial.ThreadConsumer" 
        activation="true"/>

   </implementation>

</block>

]]></source>
            </td>
          </tr>
        </table>
      </subsection>
      <subsection name="Runtime">
<source><![CDATA[
$ cd avalon-cornerstone\threads\tutorial
$ merlin target\cornerstone-threads-tutorial-1.0.jar

[INFO   ] (sys): initialization: localhost
[INFO   ] (sys): commencing block assembly phase
[INFO   ] (test): aquiring cornerstone threads service
[INFO   ] (threads): container initialization: threads
[INFO   ] (test): initialization
[INFO   ] (sys): Block hierarchy established.
[INFO   ] (test.counter): count: 10
[INFO   ] (test.counter): count: 9
[INFO   ] (test.counter): count: 8
[INFO   ] (test.counter): count: 7
]]></source>
<p>
Interrupting the container (using ^C) will trigger component disposal
which in turn will trigger early termination of the thread established
using the cornerstone thread manager.
</p>
<source><![CDATA[
[INFO   ] (sys): commencing decommissioning phase
[INFO   ] (test): disposal
[INFO   ] (test): disposal invoked while child thread active
[INFO   ] (test): waiting for child
[INFO   ] (test.counter): I've been interrupted.
[INFO   ] (test.counter): Time to die.
[INFO   ] (test): disposal complete
[INFO   ] (sys): bye
]]></source>
      </subsection>
      
    </section>
  </body>

</document>


