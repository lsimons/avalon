<?xml version="1.0"?>

<project default="main" basedir=".">

  <!--
    Give user a chance to override without editing this file
    (and without typing -D each time he compiles it)
  -->
  <property file=".ant.properties"/>
  <property file="${user.home}/.ant.properties"/>

  <property name="name" value="cornerstone"/>
  <property name="Name" value="Cornerstone"/>
  <property name="version" value="0.7"/>
  <property name="year" value="1999-2001"/>

  <property name="build.debug" value="on"/>
  <property name="build.optimize" value="off"/>
  <property name="build.deprecation" value="off"/>

  <!-- Set the installation variables for Cornerstone/Phoenix -->
  <property name="phoenix.home" value="../jakarta-avalon-phoenix/dist"/>
  <property name="install.dir" value="${phoenix.home}"/>

  <!-- Set the properties for intermediate directory -->
  <property name="build.dir" value="build"/>
  <property name="build.lib" value="${build.dir}/lib"/>
  <property name="build.src" value="${build.dir}/src"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.xdocs" value="${build.dir}/xdocs"/>
  <property name="build.context" value="${build.dir}/documentation"/>

  <!-- Set the properties for source directories -->
  <property name="src.dir" value="src"/>
  <property name="lib.dir" value="lib"/>
  <property name="java.dir" value="${src.dir}/java"/>
  <property name="manifest.dir" value="${src.dir}/manifest"/>
  <property name="conf.dir" value="${src.dir}/conf"/>
  <property name="tools.dir" value="../jakarta-avalon/tools"/>
  <property name="docs.dir" value="docs"/>
  <property name="www.dir" value="../jakarta-avalon-site/docs/cornerstone"/>
  <property name="avalon.skin" value="${tools.dir}/lib/jakarta-style.jar"/>
  <property name="xdocs.dir" value="${src.dir}/xdocs"/>
  <property name="context.dir" value="../jakarta-avalon/src/documentation"/>

  <property name="dist.name" value="${Name}-${version}"/>
  <property name="dist.base" value="distributions"/>

  <property name="xerces.jar" value="${tools.dir}/lib/xerces.jar"/>
  <property name="logkit.jar" value="${lib.dir}/logkit.jar"/>
  <property name="framework.jar" value="${lib.dir}/avalon-framework.jar"/>
  <property name="excalibur.jar" value="${lib.dir}/avalon-excalibur.jar"/>
  <property name="scratchpad.jar" value="${lib.dir}/avalon-scratchpad.jar"/>
  <property name="phoenix-client.jar" value="${lib.dir}/phoenix-client-20010912.jar"/>
  <property name="testlet.jar" value="${tools.dir}/lib/testlet.jar"/>
  <property name="tools.jar" value="${java.home}/../lib/tools.jar"/>

  <path id="project.class.path">
    <pathelement location="${framework.jar}"/>
    <pathelement location="${excalibur.jar}"/>
    <pathelement location="${scratchpad.jar}"/>
    <pathelement location="${logkit.jar}"/>
    <pathelement location="${testlet.jar}"/>
    <pathelement location="${xerces.jar}"/>
    <pathelement location="${phoenix-client.jar}"/>
    <pathelement path="${java.class.path}" />
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
      <exclude name="phoenix-client.jar"/>
      <exclude name="avalon-*"/>
      <exclude name="logkit.jar"/>
    </fileset>
    <pathelement path="${build.classes}" />
  </path>

  <path id="tools.class.path">
    <pathelement location="${tools.jar}"/>
    <fileset dir="${tools.dir}/lib"/>
    <fileset dir="${tools.dir}/ext"/>
  </path>

  <!-- Main target -->
  <target name="main" depends="jars" description="Generates the files minus documentation">
    <ant antfile="build.xml" dir="apps/demo" target="main" inheritall="false"/>
    <ant antfile="build.xml" dir="apps/ftpserver" target="main" inheritall="false"/>
    <ant antfile="build.xml" dir="apps/jesktop" target="main" inheritall="false"/>
  </target>

  <target name="all" depends="main,docs" description="Generates the files including documentation"/>

  <!-- Help on usage -->
  <target name="help" depends="usage"/>
  <target name="usage">
    <echo message="Run ant -projecthelp to get a list of targets to run"/>
  </target>

  <!-- COmpile the project -->
  <target name="compile">
  
    <available property="jsse.present" 
        classname="javax.net.ssl.SSLServerSocket" 
        classpathref="project.class.path"/>

    <available classname="electric.registry.Registry" 
        classpathref="project.class.path" 
        property="glue.present"/>

    <mkdir dir="${build.classes}"/>

    <javac srcdir="${java.dir}"
           destdir="${build.classes}"
           debug="${build.debug}"
           optimize="${build.optimize}"
           deprecation="${build.deprecation}">
      <classpath refid="project.class.path" />
      <exclude name="org/apache/avalon/cornerstone/blocks/sockets/TLSServerSocketFactory.java"
               unless="jsse.present" />
      <exclude name="org/apache/avalon/cornerstone/blocks/soapification/glue/**.java"
               unless="glue.present" />
    </javac>

    <copy todir="${build.classes}">
      <fileset dir="${java.dir}">
        <include name="**/*.xinfo"/>
      </fileset>
    </copy>

  </target>

  <!-- Creates all the .jar file -->  
  <target name="jars" depends="compile">

    <mkdir dir="${build.lib}"/>

    <jar file="${build.lib}/cornerstone-compilation.jar"
         basedir="${build.classes}">
      <include name="org/apache/avalon/cornerstone/services/**"/>
    </jar>  
  
    <jar file="${build.lib}/cornerstone.bar"
         basedir="${build.classes}"
         manifest="${manifest.dir}/cornerstone.mf">
      <include name="org/apache/avalon/cornerstone/blocks/**"/>
      <include name="org/apache/avalon/cornerstone/services/**"/>
    </jar>
  
  </target>

  <!-- Performs unit tests -->
  <target name="test" depends="check"/>
  <target name="check" depends="jars" description="Perform any built in tests">

    <test showSuccess="true" showBanner="false" showTrace="true" forceShowTrace="true" >
      <classpath>
        <pathelement path="${build.classes}" />
        <pathelement path="${java.class.path}" />
      </classpath>

      <testlet>org.apache.avalon.cornerstone.services.scheduler.test.CronTimeTriggerTestlet</testlet>
    </test>

  </target>

  <!-- Create the API documentation -->
  <target name="javadocs" description="Generates the Java Docs">

    <delete dir="${docs.dir}/api"/>
    <mkdir dir="${docs.dir}/api"/>

    <javadoc packagenames="org.*"
             sourcepath="${java.dir}"
             destdir="${docs.dir}/api">
      <classpath refid="project.class.path" />
      <doclet name="com.sun.tools.doclets.standard.Standard">
       <param name="-author"/>
       <param name="-version"/>
       <param name="-doctitle" value="${Name}"/>
       <param name="-windowtitle" value="${Name} API"/>
       <param name="-bottom"
              value="&quot;Copyright &#169; 2001 Apache Jakarta Project. All Rights Reserved.&quot;"/>
      </doclet>
    </javadoc>

  </target>

  <!-- prepares printer friendly documentation -->
  <target name="printerdocs" description="Generates the printer-friendly Docs">
    <echo message="Printer friendly docs are not yet implemented"/>
  </target>

  <!-- Prepares the documentation directory -->
  <target name="xdocs" description="Generates the Docs">

    <mkdir dir="${build.context}"/>
    <mkdir dir="${build.xdocs}"/>
    <mkdir dir="${build.dir}/work"/>

    <!-- Base pointers for non-xdocs documentation. Override these 
         in .ant.properties to link to local docs -->
    <property name="avalon.base" value="http://jakarta.apache.org/avalon"/>
    <property name="framework.base" value="http://jakarta.apache.org/avalon/framework"/>
    <property name="phoenix.base" value="http://jakarta.apache.org/avalon/phoenix"/>
    <property name="cornerstone.base" value="http://jakarta.apache.org/avalon/cornerstone"/>
    <property name="logkit.base" value="http://jakarta.apache.org/avalon/logkit"/>
    <property name="testlet.base" value="http://jakarta.apache.org/avalon/testlet"/>

    <filter token="year" value="${year}"/>
    <filter token="AVALON_BASE" value="${avalon.base}"/>
    <filter token="FRAMEWORK_BASE" value="${framework.base}"/>
    <filter token="PHOENIX_BASE" value="${phoenix.base}"/>
    <filter token="CORNERSTONE_BASE" value="${cornerstone.base}"/>
    <filter token="LOGKIT_BASE" value="${logkit.base}"/>
    <filter token="TESTLET_BASE" value="${testlet.base}"/>

    <copy todir="${build.context}" filtering="on">
      <fileset dir="${context.dir}">
        <exclude name="resources/**"/>
        <exclude name="xdocs"/>
      </fileset>
    </copy>

    <copy todir="${build.context}/xdocs" filtering="on">
      <fileset dir="${xdocs.dir}"/>
    </copy>

    <copy todir="${build.context}/resources">
      <fileset dir="${context.dir}/resources"/>
      <fileset dir="${xdocs.dir}">
        <include name="**/images/**"/>
      </fileset>
    </copy>

    <delete>
      <fileset dir="${docs.dir}">
        <exclude name="api/**"/>
      </fileset>
    </delete>
    <mkdir dir="${docs.dir}"/>

    <java classname="org.apache.cocoon.Main" fork="true">
      <arg value="-c${build.context}/"/>
      <arg value="-d${docs.dir}"/>
      <arg value="-w${build.dir}/work"/>
      <arg value="-l${build.dir}/work/cocoon.log"/>
      <arg value="-uINFO"/>
      <arg value="-f${xdocs.dir}/cornerstone.uris"/>
      <classpath refid="tools.class.path"/>
    </java>
  </target>

  <target name="docs" depends="javadocs,xdocs"/>

  <!-- Create the binary distribution -->
  <target name="bin-dist" depends="all">  

    <!-- bin.dist.dir usually already specified -->
    <property name="bin.dist.dir" value="dist"/>
    <property name="bin.dist.docs" value="${bin.dist.dir}/docs"/>

    <copy todir="${bin.dist.docs}">
      <fileset dir="${docs.dir}"/>
    </copy>

    <copy file="${build.lib}/cornerstone.bar" tofile="${bin.dist.dir}/cornerstone-${version}.bar"/>

    <chmod dir="${bin.dist.dir}" perm="go-rwx" />
  </target>
  
  <!-- Create the source distribution -->
  <target name="src-dist" depends="docs">

    <!-- src.dist.dir usually already specified -->
    <property name="src.dist.dir" value="dist-src"/>
    <property name="src.dist.src" value="${src.dist.dir}/src"/>
    <property name="src.dist.docs" value="${src.dist.dir}/docs"/>
    <property name="src.dist.lib" value="${src.dist.dir}/lib"/>
    <property name="src.dist.tools" value="${src.dist.dir}/tools"/>

    <mkdir dir="${src.dist.dir}" />
    <mkdir dir="${src.dist.docs}"/>

    <copy todir="${src.dist.tools}">
      <fileset dir="${tools.dir}"/>
    </copy>

    <copy file="${logkit.jar}" todir="${src.dist.lib}"/>
    <copy file="${framework.jar}" todir="${src.dist.lib}"/>
    <copy file="${excalibur.jar}" todir="${src.dist.lib}"/>
    <copy file="${phoenix-client.jar}" todir="${src.dist.lib}"/>

    <copy todir="${src.dist.src}">
      <fileset dir="${src.dir}"/>
    </copy>

    <copy todir="${src.dist.dir}/apps">
      <fileset dir=".">
        <include name="apps/*/src/**"/>
        <include name="apps/*/build.xml"/>
        <include name="apps/*/lib/**"/>
      </fileset>
    </copy>

    <copy todir="${src.dist.docs}">
      <fileset dir="${docs.dir}"/>
    </copy>

    <copy todir="${src.dist.dir}">
      <fileset dir=".">
        <include name="README"/>
        <include name="WARNING"/>
        <include name="LICENSE"/>
        <include name="build.bat"/>
        <include name="build.sh"/>
        <include name="build.xml"/>
      </fileset>
    </copy>

    <fixcrlf srcdir="${src.dist.dir}" includes="build.sh" eol="lf"/>
    <fixcrlf srcdir="${src.dist.dir}" includes="build.bat" eol="crlf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="*.sh" eol="lf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="ant" eol="lf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="antRun" eol="lf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="*.bat" eol="crlf"/>

    <chmod perm="+x">
      <fileset dir="${src.dist.dir}">
        <include name="build.sh" />
      </fileset>
    </chmod>

    <fixcrlf srcdir="${src.dist.src}/java" includes="**/*.java" eol="lf"/>

    <chmod dir="${src.dist.dir}" perm="go-rwx" />

  </target>

  <!-- Distribute Applications as apps subdir of distributions/ -->
  <target name="distributions-apps" depends="jars">
    <copy todir="${dist.base}/phoenix-apps" flatten="true">
      <fileset dir="apps">
        <include name="*/dist/*.sar"/>
        <include name="demo/build/*.sar"/>
      </fileset>
    </copy>    
  </target>

  <!-- Completely build all dists -->
  <target name="dist" description="Generates the distribution">

    <mkdir dir="${dist.base}"/>
    <zip file="${dist.base}/${dist.name}-bin.zip"
         basedir="${dist.name}/.."
         includes="${dist.name}/**"/>

    <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-bin.tar">
      <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
        <include name="${dist.name}/**"/>
      </tarfileset>
    </tar>

    <gzip tofile="${dist.base}/${dist.name}-bin.tar.gz"
          src="${dist.base}/${dist.name}-bin.tar"/>

    <delete file="${dist.base}/${dist.name}-bin.tar"/>
    <delete dir="${dist.name}" />

    <antcall target="src-dist" inheritall="false">
      <param name="src.dist.dir" value="${dist.name}" />
    </antcall>

    <zip file="${dist.base}/${dist.name}-src.zip"
         basedir="${dist.name}/.."
         includes="${dist.name}/**"/>

    <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-src.tar" >
      <tarfileset dir="${dist.name}/.." mode="755" username="avalon" group="avalon">
        <include name="${dist.name}/build.sh"/>
      </tarfileset>
      <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
        <include name="${dist.name}/**"/>
        <exclude name="${dist.name}/build.sh"/>
      </tarfileset>
    </tar>

    <gzip tofile="${dist.base}/${dist.name}-src.tar.gz"
          src="${dist.base}/${dist.name}-src.tar"/>

    <delete file="${dist.base}/${dist.name}-src.tar"/>
    <delete dir="${dist.name}" />

    <antcall target="distributions-apps" inheritall="false">
      <param name="dist.dir" value="${dist.name}" />
    </antcall>

    <mkdir dir="${dist.base}/phoenix-apps"/>

    <ant antfile="build.xml" dir="apps/demo" target="dist" inheritall="false">
      <property name="bin.dist.dir" value="${dist.name}" />
    </ant>
    <ant antfile="build.xml" dir="apps/ftpserver" target="check" inheritall="false">
      <property name="dist.dir" value="${dist.name}" />
    </ant>
    <ant antfile="build.xml" dir="apps/jesktop" target="check" inheritall="false">
      <property name="dist.dir" value="${dist.name}" />
    </ant>

    <copy todir="${dist.base}/phoenix-apps" flatten="true">
      <fileset dir="apps">
        <include name="*/dist/*.sar"/>
      </fileset>
    </copy>        

  </target>

  <target name="install" depends="main" description="Installs Cornerstone into Phoenix">

    <copy file="${build.lib}/cornerstone.bar" tofile="${install.dir}/cornerstone.bar"/>
    <ant antfile="build.xml" dir="apps/demo" target="install" inheritall="false"/>
  </target>

  <target name="uninstall" description="Uninstalls Cornerstone into Phoenix">
    <delete file="${install.dir}/cornerstone.bar"/>
    <ant antfile="build.xml" dir="apps/demo" target="uninstall" inheritall="false"/>
  </target>

  <!-- Update the www directory -->
  <target name="site-docs" depends="docs">

    <mkdir dir="${www.dir}"/>

    <!-- delete all old documents but keep CVS directories -->
    <!-- note that by doing an include the defaultexcludes (CVS dirs) will be kept -->
    <delete>
      <fileset dir="${www.dir}">
        <include name="**"/>
      </fileset>
    </delete>

    <mkdir dir="${www.dir}"/>
    <copy todir="${www.dir}">
      <fileset dir="${docs.dir}" />
    </copy>

  </target>

  <!-- Cleans up build and distribution directories -->
  <target name="clean" description="Cleans up artifacts from build process">
    <delete dir="${build.dir}" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>

    <ant antfile="build.xml" dir="apps/demo" target="clean" inheritall="false"/>
  </target>

  <!-- Cleans absolutely everything up -->
  <target name="distclean" depends="clean" description="Cleans up all genereated files and directories">
    <delete dir="${docs.dir}" />
    <delete dir="${dist.base}" />

    <ant antfile="build.xml" dir="apps/demo" target="distclean" inheritall="false"/>
  </target>
  
</project>
