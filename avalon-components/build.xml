<?xml version="1.0"?>

<!--
==============================================================================

 Cornerstone build file

==============================================================================
-->

<project default="all" basedir=".">

  <!--
    Give user a chance to override without editing this file
    (and without typing -D each time he compiles it)
  -->
  <property file=".ant.properties"/>
  <property file="${user.home}/.ant.properties"/>

  <property name="name" value="cornerstone"/>
  <property name="Name" value="Cornerstone"/>
  <property name="version" value="0.7"/>
  <property name="year" value="1999-2001"/>

  <!--
    these are here only for those who use jikes compiler. For other
    developers this part makes no difference.
  -->
  <property name="build.compiler.emacs" value="on"/>
  <property name="build.compiler.warnings" value="true"/>
<!--  <property name="build.compiler.pedantic" value="true"/> -->
  <property name="build.compiler.depend" value="true"/>
  <property name="build.compiler.fulldepend" value="true"/>

  <property name="build.debug" value="on"/>
  <property name="build.optimize" value="off"/>
  <property name="build.deprecation" value="off"/>

  <!--
       ===================================================================
       Set the installation variables for Cornerstone/Phoenix
       ===================================================================
  -->
  <property name="phoenix.home" value="../jakarta-phoenix/dist"/>
  <property name="phoenix.apps" value="${phoenix.home}/apps"/>
  <property name="install.dir" value="${phoenix.home}"/>
  <property name="install.bin.dir" value="${install.dir}/bin"/>
  <property name="install.lib.dir" value="${install.dir}/lib"/>
  <property name="install.data.dir" value="${install.dir}/conf"/>
  <property name="install.doc.dir" value="${install.dir}/docs"/>

  <!--
       ===================================================================
       Set the properties for intermediate directory
       ===================================================================
  -->
  <property name="build.dir" value="build"/>
  <property name="build.lib" value="${build.dir}/lib"/>
  <property name="build.src" value="${build.dir}/src"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.javadocs" value="${build.dir}/javadocs"/>
  <property name="build.docs" value="${build.dir}/docs"/>
  <property name="build.xdocs" value="${build.dir}/xdocs"/>
  <property name="build.context" value="${build.dir}/documentation"/>

  <!--
       ===================================================================
       Set the properties for source directories
       ===================================================================
  -->
  <property name="src.dir" value="src"/>
  <property name="lib.dir" value="lib"/>
  <property name="java.dir" value="${src.dir}/java"/>
  <property name="manifest.dir" value="${src.dir}/manifest"/>
  <property name="conf.dir" value="${src.dir}/conf"/>
  <property name="tools.dir" value="../jakarta-avalon/tools"/>
  <property name="docs.dir" value="docs"/>
  <property name="www.dir" value="../jakarta-avalon/www/cornerstone"/>
  <property name="avalon.skin" value="${tools.dir}/lib/jakarta-style.jar"/>
  <property name="xdocs.dir" value="${src.dir}/xdocs"/>
  <property name="javadocs.dir" value="${docs.dir}/api"/>
  <property name="context.dir" value="../jakarta-avalon/src/documentation"/>

  <property name="dist.name" value="${Name}-${version}"/>
  <property name="dist.base" value="distributions"/>

  <property name="xerces.jar" value="${tools.dir}/lib/xerces.jar"/>
  <property name="logkit.jar" value="${lib.dir}/logkit.jar"/>
  <property name="framework.jar" value="${lib.dir}/avalon-framework.jar"/>
  <property name="excalibur.jar" value="${lib.dir}/avalon-excalibur.jar"/>
  <property name="scratchpad.jar" value="${lib.dir}/avalon-scratchpad.jar"/>
  <property name="phoenix-client.jar" value="${lib.dir}/phoenix-client.jar"/>
  <property name="testlet.jar" value="${tools.dir}/lib/testlet.jar"/>
  <property name="tools.jar" value="${java.home}/../lib/tools.jar"/>

  <path id="project.class.path">
    <pathelement location="${framework.jar}"/>
    <pathelement location="${excalibur.jar}"/>
    <pathelement location="${scratchpad.jar}"/>
    <pathelement location="${logkit.jar}"/>
    <pathelement location="${testlet.jar}"/>
    <pathelement location="${xerces.jar}"/>
    <pathelement location="${phoenix-client.jar}"/>
    <pathelement path="${java.class.path}" />
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
      <exclude name="phoenix-client.jar"/>
      <exclude name="avalon-*"/>
      <exclude name="logkit.jar"/>
    </fileset>
    <pathelement path="${build.classes}" />
  </path>

  <path id="tools.class.path">
    <pathelement location="${tools.jar}"/>
    <fileset dir="${tools.dir}/lib">
      <exclude name="ant.jar" />
    </fileset>
  </path>

  <!--
       ===================================================================
                                  Main target
       ===================================================================
  -->
  <target name="all" depends="compile,jars,bars" description="Generates all the Cornerstone jar/bar/sar files">
    <parallel>
      <ant antfile="build.xml" dir="apps/demo" target="all"/>
      <ant antfile="build.xml" dir="apps/ftpserver" target="all"/>
      <ant antfile="build.xml" dir="apps/jesktop" target="all"/>
    </parallel>
  </target>

  <!--
       ===================================================================
                                  Help on usage
       ===================================================================
  -->
  <target name="usage">
    <echo message=""/>
    <echo message="${Name} Build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" available targets are:"/>
    <echo message=""/>
    <echo message="   all         -> generates all the ${Name} jar/bar/sar files"/>
    <echo message="   install     -> installs Cornerstone into Phoenix"/>
    <echo message="   uninstall   -> uninstalls Cornerstone from Phoenix"/>
    <echo message="   check       -> perform any built in tests"/>
    <echo message="   docs        -> generates the ${Name} Documentation"/>
    <echo message="   printerdocs -> generates printer-friendly ${Name} Docs"/>
    <echo message="   javadocs    -> generates the API documentation (java 1.2+ only)"/>
    <echo message="   dist        -> generates the ${Name} distribution"/>
    <echo message="   clean       -> cleans up the created directories"/>
    <echo message="   distclean   -> cleans up all genereated files and directories"/>
    <echo message=""/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
  </target>

  <target name="help" depends="usage"/>

  <!--
       ===================================================================
       Set up dist properties
       ===================================================================
  -->
  <target name="setup-properties" >

    <property name="dist.dir" value="dist"/>
    <property name="dist.lib" value="${dist.dir}/lib"/>
    <property name="dist.docs" value="${dist.dir}/docs"/>
    <property name="dist.javadocs" value="${dist.dir}/docs/api"/>

    <property name="src.dist.dir" value="dist-src"/>
    <property name="src.dist.src" value="${src.dist.dir}/src"/>
    <property name="src.dist.docs" value="${src.dist.dir}/docs"/>
    <property name="src.dist.javadocs" value="${src.dist.dir}/docs/api"/>
    <property name="src.dist.lib" value="${src.dist.dir}/lib"/>
    <property name="src.dist.tools" value="${src.dist.dir}/tools"/>
  </target>

  <!--
       ===================================================================
                         Prepares the build directory
       ===================================================================
  -->
  <target name="compile">
  
    <mkdir dir="${build.dir}"/>
    
    <available property="jsse.present" 
        classname="javax.net.ssl.SSLServerSocket" 
        classpathref="project.class.path"/>

    <available classname="electric.registry.Registry" 
        classpathref="project.class.path" 
        property="glue.present"/>

    <mkdir dir="${build.classes}"/>

    <javac srcdir="${java.dir}"
           destdir="${build.classes}"
           debug="${build.debug}"
           optimize="${build.optimize}"
           deprecation="${build.deprecation}">
      <classpath refid="project.class.path" />
      <exclude name="org/apache/avalon/cornerstone/blocks/serversocket/TLSServerSocketAcceptor.java"
               unless="jsse.present" />
      <exclude name="org/apache/avalon/cornerstone/blocks/sockets/TLSServerSocketFactory.java"
               unless="jsse.present" />
      <exclude name="org/apache/avalon/cornerstone/blocks/soapification/glue/**.java"
               unless="glue.present" />
    </javac>

    <copy todir="${build.classes}">
      <fileset dir="${java.dir}">
        <include name="**/*.xinfo"/>
      </fileset>
    </copy>

  </target>

  <!--
       ===================================================================
                           Creates all the .jar file
       ===================================================================
  -->  
  
  <target name="jars" depends="compile">

    <mkdir dir="${build.lib}"/>

    <jar jarfile="${build.lib}/avalon-cornerstone-compilation.jar"
         basedir="${build.classes}">
      <exclude name="**/Default*"/>
      <exclude name="**/*.xinfo"/>
      <exclude name="**/demos/**"/>
    </jar>  
  
  </target>

  <!--
       ===================================================================
                           Creates all the .bar file
       ===================================================================
  -->  
  
  <target name="bars" depends="jars">  
  
    <mkdir dir="${build.lib}"/>  
  
    <jar jarfile="${build.lib}/cornerstone.bar"
         basedir="${build.classes}"
         manifest="${manifest.dir}/cornerstone.mf">
      <include name="org/apache/avalon/cornerstone/blocks/**"/>
      <include name="org/apache/avalon/cornerstone/services/**"/>
    </jar>
  
  </target>

  <!--
       ===================================================================
       Performs unit tests
       ===================================================================
  -->
  <target name="test" depends="check"/>

  <target name="check" depends="jars" description="Perform any built in tests">

    <test showSuccess="true" showBanner="false" showTrace="true" forceShowTrace="true" >
      <classpath>
        <pathelement path="${build.classes}" />
        <pathelement path="${java.class.path}" />
      </classpath>

      <testlet>org.apache.avalon.cornerstone.services.scheduler.test.CronTimeTriggerTestlet</testlet>
    </test>

    <parallel>
      <ant antfile="build.xml" dir="apps/demo" target="check"/>
      <ant antfile="build.xml" dir="apps/ftpserver" target="check"/>
      <ant antfile="build.xml" dir="apps/jesktop" target="check"/>
    </parallel>
  
  </target>
  <!--
       ===================================================================
       Custom test for SoapHelloWorldServer demo
       ===================================================================
  -->
  <target name="soaphello-test" depends="compile">

    <java classname="org.apache.avalon.cornerstone.demos.soaphelloworldserver.SOAPHelloWorldServerTester">
      <classpath>
        <pathelement path="${build.classes}" />
        <fileset dir="${lib.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </java>    
    

  </target>

  <!--
       ===================================================================
       Create the API documentation
       ===================================================================
  -->
  <target name="javadocs" description="Generates the Cornerstone Java Docs">

    <delete dir="${build.javadocs}"/>
    <mkdir dir="${build.javadocs}"/>

    <javadoc packagenames="org.apache.*"
             sourcepath="${java.dir}"
             destdir="${build.javadocs}">
      <classpath refid="project.class.path" />
      <doclet name="com.sun.tools.doclets.standard.Standard">
       <param name="-author"/>
       <param name="-version"/>
       <param name="-doctitle" value="${Name}"/>
       <param name="-windowtitle" value="${Name} API"/>
       <param name="-bottom"
              value="&quot;Copyright &#169; 2001 Apache Jakarta Project. All Rights Reserved.&quot;"/>
      </doclet>
    </javadoc>

    <parallel>
      <ant antfile="build.xml" dir="apps/demo" target="javadocs"/>
      <ant antfile="build.xml" dir="apps/ftpserver" target="javadocs"/>
      <ant antfile="build.xml" dir="apps/jesktop" target="javadocs"/>
    </parallel>

  </target>

  <!-- Create the Local API documentation -->
  <target name="local-javadocs" depends="javadocs">

    <delete dir="${javadocs.dir}"/>
    <mkdir dir="${javadocs.dir}"/>

    <copy todir="${javadocs.dir}">
      <fileset dir="${build.javadocs}" />
    </copy>

  </target>

  <!-- prepares printer friendly documentation -->
  <target name="printerdocs" depends="javadocs" description="Generates the printer-friendly Cornerstone Docs">
    <echo message="Printer friendly docs are not yet implemented"/>
    <parallel>
      <ant antfile="build.xml" dir="apps/demo" target="printerdocs"/>
      <ant antfile="build.xml" dir="apps/ftpserver" target="printerdocs"/>
      <ant antfile="build.xml" dir="apps/jesktop" target="printerdocs"/>
    </parallel>
  </target>

  <!-- Prepares the documentation directory -->
  <target name="docs" depends="javadocs" description="Generates the Cornerstone Docs">

    <mkdir dir="${build.context}"/>
    <mkdir dir="${build.xdocs}"/>
    <mkdir dir="${build.docs}"/>
    <mkdir dir="${build.dir}/work"/>

    <!-- Base pointers for non-xdocs documentation. Override these in .ant.properties to link to local docs -->
    <property name="avalon.base" value="http://jakarta.apache.org/avalon"/>
    <property name="framework.base" value="http://jakarta.apache.org/avalon/framework"/>
    <property name="phoenix.base" value="http://jakarta.apache.org/avalon/phoenix"/>
    <property name="cornerstone.base" value="http://jakarta.apache.org/avalon/cornerstone"/>
    <property name="logkit.base" value="http://jakarta.apache.org/avalon/logkit"/>
    <property name="testlet.base" value="http://jakarta.apache.org/avalon/testlet"/>

    <filter token="year" value="${year}"/>
    <filter token="AVALON_BASE" value="${avalon.base}"/>
    <filter token="FRAMEWORK_BASE" value="${framework.base}"/>
    <filter token="PHOENIX_BASE" value="${phoenix.base}"/>
    <filter token="CORNERSTONE_BASE" value="${cornerstone.base}"/>
    <filter token="LOGKIT_BASE" value="${logkit.base}"/>
    <filter token="TESTLET_BASE" value="${testlet.base}"/>

    <copy todir="${build.context}" filtering="on">
      <fileset dir="${context.dir}">
        <exclude name="resources/**"/>
        <exclude name="xdocs"/>
      </fileset>
    </copy>

    <copy todir="${build.context}/xdocs" filtering="on">
      <fileset dir="${xdocs.dir}"/>
    </copy>

    <copy todir="${build.context}/resources" filtering="off">
      <fileset dir="${context.dir}/resources"/>
      <fileset dir="${xdocs.dir}">
        <include name="**/images/**"/>
      </fileset>
    </copy>

    <java classname="org.apache.cocoon.Main" fork="true">
      <arg value="-c${build.context}/"/>
      <arg value="-d${build.docs}"/>
      <arg value="-w${build.dir}/work"/>
      <arg value="-l${build.dir}/work/cocoon.log"/>
      <arg value="-uINFO"/>
      <arg value="-f${xdocs.dir}/cornerstone.uris"/>
      <classpath>
        <path refid="tools.class.path"/>
        <fileset dir="${tools.dir}/ext"/>
      </classpath>
    </java>

    <parallel>
      <ant antfile="build.xml" dir="apps/demo" target="docs"/>
      <ant antfile="build.xml" dir="apps/ftpserver" target="docs"/>
      <ant antfile="build.xml" dir="apps/jesktop" target="docs"/>
    </parallel>
  </target>

  <!--
       ===================================================================
       Create the Local site documentation
       ===================================================================
  -->
  <target name="local-xdocs" depends="docs">

    <delete>
      <fileset dir="${docs.dir}">
        <exclude name="api/**"/>
      </fileset>
    </delete>
    <mkdir dir="${docs.dir}"/>

    <copy todir="${docs.dir}">
      <fileset dir="${build.docs}" />
    </copy>

  </target>

  <target name="local-docs" depends="local-javadocs,local-xdocs"/>

  <!--
       ===================================================================
       Update the www directory
       ===================================================================
  -->
  <target name="site-docs" depends="local-docs">

    <mkdir dir="${www.dir}"/>

    <!-- delete all old documents but keep CVS directories -->
    <!-- note that by doing an include the defaultexcludes (CVS dirs) will be kept -->
    <delete>
      <fileset dir="${www.dir}">
        <include name="**"/>
      </fileset>
    </delete>

    <mkdir dir="${www.dir}"/>
    <copy todir="${www.dir}">
      <fileset dir="${docs.dir}" />
    </copy>

  </target>

  <target name="install" depends="all,install-no-cjan,install-yes-cjan,install-check-phoenix" description="Installs Cornerstone into Phoenix">
    <mkdir dir="${phoenix.apps}" />

    <parallel>
      <ant antfile="build.xml" dir="apps/demo" target="install"/>
      <ant antfile="build.xml" dir="apps/ftpserver" target="install"/>
      <ant antfile="build.xml" dir="apps/jesktop" target="install"/>
    </parallel>
  </target>

  <target name="install-yes-cjan" if="cjan.lib">
    <mkdir dir="${cjan.lib}" />
    <copy file="${build.lib}/cornerstone.bar" todir="${cjan.lib}"/>
    <echo message="Installed in cjan.lib (${cjan.lib})." />
  </target>

  <target name="install-no-cjan" unless="cjan.lib">
    <echo message="WARNING: cjan.lib not specified." />
  </target>

  <target name="install-check-phoenix" unless="phoenix.home">
    <fail message="phoenix.home not specified." />
  </target>

  <target name="uninstall" depends="uninstall-cjan" description="Uninstalls Cornerstone into Phoenix">
    <parallel>
      <ant antfile="build.xml" dir="apps/demo" target="uninstall"/>
      <ant antfile="build.xml" dir="apps/ftpserver" target="uninstall"/>
      <ant antfile="build.xml" dir="apps/jesktop" target="uninstall"/>
    </parallel>
  </target>

  <target name="uninstall-cjan" if="cjan.lib">
    <mkdir dir="${cjan.lib}" />
    <delete file="${build.lib}/cornerstone.bar" dir="${cjan.lib}"/>
    <echo message="Uninstalled in cjan.lib (${cjan.lib})." />
  </target>

  <!--
       ===================================================================
                            Create the binary distribution
       ===================================================================
  -->
  <target name="bin-dist" depends="compile,jars,bars,javadocs,docs,setup-properties,dist-norm,dist-soap">  
    <chmod dir="${dist.dir}" perm="go-rwx" />
  </target>
  
  <target name="dist-dirs" depends="setup-properties">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.docs}"/>
    <mkdir dir="${dist.javadocs}"/>  
  </target>
  
  <target name="dist-norm" depends="dist-dirs">

    <copy todir="${dist.docs}">
      <fileset dir="${build.docs}"/>
    </copy>

    <copy todir="${dist.javadocs}">
      <fileset dir="${build.javadocs}"/>
    </copy>

    <copy file="${build.lib}/${name}.bar" tofile="${dist.dir}/${name}-${version}.bar"/>
    <copy file="${build.lib}/avalon-demo.sar" tofile="${dist.dir}/avalon-demo-${version}.sar"/>
    <copy file="${build.lib}/avalon-cornerstone-compilation.jar" tofile="${dist.dir}/avalon-cornerstone-compilation-${version}.jar"/>
    
  </target>    
  
  <target name="dist-soap" if="glue.present">      
  
    <copy file="${build.lib}/avalon-soapdemo.sar" tofile="${dist.dir}/avalon-soapdemo-${version}.sar"/>
    <delete dir="${phoenix.apps}/avalon-demo"/>
    <copy file="${build.lib}/avalon-demo.sar" todir="${phoenix.apps}"/>

    
  </target>

  <!--
       ===================================================================
                            Create the source distribution
       ===================================================================
  -->
  <target name="src-dist" depends="javadocs,docs,setup-properties">

    <mkdir dir="${src.dist.dir}" />
    <mkdir dir="${src.dist.docs}"/>
    <mkdir dir="${src.dist.javadocs}"/>

    <copy todir="${src.dist.tools}">
      <fileset dir="${tools.dir}"/>
    </copy>

    <copy file="${logkit.jar}" tofile="${src.dist.lib}/logkit.jar"/>
    <copy file="${framework.jar}" tofile="${src.dist.lib}/framework.jar"/>
    <copy file="${excalibur.jar}" tofile="${src.dist.lib}/excalibur.jar"/>
    <copy file="${phoenix-client.jar}" tofile="${src.dist.lib}/phoenix-client.jar"/>

    <copy todir="${src.dist.src}">
      <fileset dir="${src.dir}"/>
    </copy>

    <copy todir="${src.dist.dir}/apps">
      <fileset dir=".">
        <include name="apps/*/src/**"/>
        <include name="apps/*/build.xml"/>
        <include name="apps/*/lib/**"/>
      </fileset>
    </copy>

    <copy todir="${src.dist.docs}">
      <fileset dir="${build.docs}"/>
    </copy>

    <copy todir="${src.dist.javadocs}">
      <fileset dir="${build.javadocs}"/>
    </copy>

    <copy todir="${src.dist.dir}">
      <fileset dir=".">
        <include name="README"/>
        <include name="WARNING"/>
        <include name="LICENSE"/>
        <include name="build.bat"/>
        <include name="build.sh"/>
        <include name="build.xml"/>
      </fileset>
    </copy>

    <fixcrlf srcdir="${src.dist.dir}" includes="build.sh" eol="lf"/>
    <fixcrlf srcdir="${src.dist.dir}" includes="build.bat" eol="crlf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="*.sh" eol="lf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="ant" eol="lf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="antRun" eol="lf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="*.bat" eol="crlf"/>

    <chmod perm="+x">
      <fileset dir="${src.dist.dir}">
        <include name="build.sh" />
      </fileset>
    </chmod>

    <fixcrlf srcdir="${src.dist.src}/java" includes="**/*.java" eol="lf"/>

    <chmod dir="${src.dist.dir}" perm="go-rwx" />

  </target>

  <!--
       ===================================================================
                 Completely build all dists
       ===================================================================
  -->
  <target name="dist" depends="all" description="Generates the Cornerstone distribution">
    <mkdir dir="${dist.base}"/>
    <mkdir dir="${dist.base}/phoenix-apps"/>

    <parallel>
      <antcall target="dist">
        <param name="dist.dir" value="${dist.name}" />
      </antcall>
      <ant antfile="build.xml" dir="apps/demo" target="check">
        <property name="dist.dir" value="${dist.name}" />
      </ant>
      <ant antfile="build.xml" dir="apps/ftpserver" target="check">
        <property name="dist.dir" value="${dist.name}" />
      </ant>
      <ant antfile="build.xml" dir="apps/jesktop" target="check">
        <property name="dist.dir" value="${dist.name}" />
      </ant>
    </parallel>

    <copy todir="${dist.base}/phoenix-apps" flatten="true">
      <fileset dir="${dist.name}">
        <include name="*.sar"/>
      </fileset>
    </copy>        

    <zip zipfile="${dist.base}/${dist.name}-bin.zip"
         basedir="${dist.name}/.."
         includes="${dist.name}/**"/>

    <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-bin.tar">
      <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
        <include name="${dist.name}/**"/>
      </tarfileset>
    </tar>

    <gzip zipfile="${dist.base}/${dist.name}-bin.tar.gz"
          src="${dist.base}/${dist.name}-bin.tar"/>

    <delete file="${dist.base}/${dist.name}-bin.tar"/>
    <delete dir="${dist.name}" />

    <antcall target="src-dist">
      <param name="src.dist.dir" value="${dist.name}" />
    </antcall>

    <zip zipfile="${dist.base}/${dist.name}-src.zip"
         basedir="${dist.name}/.."
         includes="${dist.name}/**"/>

    <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-src.tar" >
      <tarfileset dir="${dist.name}/.." mode="755" username="avalon" group="avalon">
        <include name="${dist.name}/build.sh"/>
      </tarfileset>
      <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
        <include name="${dist.name}/**"/>
        <exclude name="${dist.name}/build.sh"/>
      </tarfileset>
    </tar>

    <gzip zipfile="${dist.base}/${dist.name}-src.tar.gz"
          src="${dist.base}/${dist.name}-src.tar"/>

    <antcall target="distributions-apps">
      <param name="dist.dir" value="${dist.name}" />
    </antcall>

    <delete file="${dist.base}/${dist.name}-src.tar"/>
    <delete dir="${dist.name}" />

  </target>

  <!--
       ===================================================================
                 Cleans up build and distribution directories
       ===================================================================
  -->
  <target name="clean" description="Cleans up artifacts from build process">
    <delete dir="${build.dir}" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
    <parallel>
      <ant antfile="build.xml" dir="apps/demo" target="clean"/>
      <ant antfile="build.xml" dir="apps/ftpserver" target="clean"/>
      <ant antfile="build.xml" dir="apps/jesktop" target="clean"/>
    </parallel>
  </target>

  <!--
       ===================================================================
                      Cleans absolutely everything up
       ===================================================================
  -->
  <target name="distclean" depends="clean" description="Cleans up all genereated files and directories">
    <delete dir="${docs.dir}" />
    <delete dir="${dist.dir}" />

    <parallel>
      <ant antfile="build.xml" dir="apps/demo" target="distclean"/>
      <ant antfile="build.xml" dir="apps/ftpserver" target="distclean"/>
      <ant antfile="build.xml" dir="apps/jesktop" target="distclean"/>
    </parallel>
  </target>
  
  <!--
       ===================================================================
           Distribute Applications as "apps" subdir of distributions/
       ===================================================================
  -->
  <target name="distributions-apps" depends="bars">
    <copy todir="${dist.base}/phoenix-apps" flatten="true">
      <fileset dir="apps">
        <include name="*/dist/*.sar"/>
      </fileset>
    </copy>    
  </target>

</project>
