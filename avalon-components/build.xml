<?xml version="1.0"?>

<!--
==============================================================================

 Cornerstone build file

==============================================================================
-->

<project default="main" basedir=".">

  <!--
    Give user a chance to override without editing this file
    (and without typing -D each time he compiles it)
  -->
  <property file=".ant.properties"/>
  <property file="${user.home}/.ant.properties"/>

  <property name="name" value="cornerstone"/>
  <property name="Name" value="Cornerstone"/>
  <property name="version" value="0.7"/>

  <!--
    these are here only for those who use jikes compiler. For other
    developers this part makes no difference.
  -->
  <property name="build.compiler.emacs" value="on"/>
  <property name="build.compiler.warnings" value="true"/>
<!--  <property name="build.compiler.pedantic" value="true"/> -->
  <property name="build.compiler.depend" value="true"/>
  <property name="build.compiler.fulldepend" value="true"/>

  <property name="debug" value="off"/>
  <property name="optimize" value="off"/>
  <property name="deprecation" value="off"/>

  <!--
       ===================================================================
       Set the properties for intermediate directory
       ===================================================================
  -->
  <property name="build.dir" value="build"/>
  <property name="build.lib" value="${build.dir}/lib"/>
  <property name="build.src" value="${build.dir}/src"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.javadocs" value="${build.dir}/javadocs"/>
  <property name="build.docs" value="${build.dir}/docs"/>

  <!--
       ===================================================================
       Set the properties for source directories
       ===================================================================
  -->
  <property name="src.dir" value="src"/>
  <property name="lib.dir" value="lib"/>
  <property name="java.dir" value="${src.dir}/java"/>
  <property name="manifest.dir" value="${src.dir}/manifest"/>
  <property name="conf.dir" value="${src.dir}/conf"/>
  <property name="tools.dir" value="tools"/>
  <property name="docs.dir" value="docs"/>
  <property name="www.dir" value="www"/>
  <property name="javadocs.dir" value="${docs.dir}/api"/>

  <property name="dist.name" value="${Name}-${version}"/>

  <path id="project.class.path">
    <pathelement path="${java.class.path}" />
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
    </fileset>
    <pathelement path="${build.classes}" />
  </path>

  <!--
       ===================================================================
                                  Main target
       ===================================================================
  -->
  <target name="main" depends="jars" />

  <!--
       ===================================================================
                                  Help on usage
       ===================================================================
  -->
  <target name="usage">
    <echo message=""/>
    <echo message="${Name} Build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" available targets are:"/>
    <echo message=""/>
    <echo message="   jars       -> generates the ${Name} jar files"/>
    <echo message="   javadocs   -> generates the API documentation (java 1.2+ only)"/>
    <echo message="   install    -> installs Cornerstone into Phoenix"/>
<!--    
    <echo message="   docs       -> generates the ${Name} Documentation"/>
    <echo message="   dist-lite  -> generates the ${Name} distribution without the javadocs (default)"/>
    <echo message="   dist       -> generates the ${Name} distribution"/>
 -->
    <echo message="   clean      -> cleans up the created directories"/>
    <echo message="   real-clean -> cleans up all genereated files and directories"/>
    <echo message=""/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
  </target>

  <target name="help" depends="usage"/>

  <!--
       ===================================================================
                         Prepares the build directory
       ===================================================================
  -->
  <target name="compile">
    <mkdir dir="${build.dir}"/>
    <available property="jsse.present" classname="javax.net.ssl.SSLServerSocket" />

    <mkdir dir="${build.classes}"/>

    <javac srcdir="${java.dir}"
           destdir="${build.classes}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}">
      <classpath refid="project.class.path" />
      <exclude name="org/apache/cornerstone/blocks/serversocket/TLSServerSocketAcceptor.java"
               unless="jsse.present" />
      <exclude name="org/apache/cornerstone/blocks/sockets/TLSServerSocketFactory.java"
               unless="jsse.present" />
    </javac>

    <copy todir="${build.classes}">
      <fileset dir="${java.dir}">
        <include name="**/*.xinfo"/>
      </fileset>
    </copy>

  </target>

  <!--
       ===================================================================
                           Creates all the .jar file
       ===================================================================
  -->
  <target name="jars" depends="compile">

    <mkdir dir="${build.lib}"/>

    <jar jarfile="${build.lib}/cornerstone.bar"
         basedir="${build.classes}"
         manifest="${manifest.dir}/cornerstone.mf">
      <include name="org/apache/cornerstone/blocks/**"/>
      <include name="org/apache/cornerstone/services/**"/>
    </jar>

    <jar jarfile="${build.lib}/demo-httpproxy.bar"
         basedir="${build.classes}"
         manifest="${manifest.dir}/http-proxy-demo.mf">
      <include name="org/apache/cornerstone/demos/httpproxy/*"/>
    </jar>

    <jar jarfile="${build.lib}/demo-helloworld.bar"
         basedir="${build.classes}"
         manifest="${manifest.dir}/helloworld-demo.mf">
      <include name="org/apache/cornerstone/demos/helloworldserver/*"/>
    </jar>

    <jar jarfile="${build.lib}/demo-simpleserver.bar"
         basedir="${build.classes}"
         manifest="${manifest.dir}/simpleserver-demo.mf">
      <include name="org/apache/cornerstone/demos/simpleserver/*"/>
    </jar>

    <jar jarfile="${build.lib}/avalon-demo.sar">

      <zipfileset dir="${build.lib}/" prefix="blocks/">
        <include name="*.bar"/>
      </zipfileset>

      <zipfileset dir="${lib.dir}" prefix="lib/">
        <include name="jsse.jar" if="jsse.present" />
        <include name="jnet.jar" if="jsse.present" />
        <include name="jcert.jar" if="jsse.present" />
      </zipfileset>

      <zipfileset dir="${conf.dir}" fullpath="conf/assembly.xml">
        <include name="avalon-demo-assembly.xml"/>
      </zipfileset>

      <zipfileset dir="${conf.dir}" fullpath="conf/server.xml">
        <include name="avalon-demo-server.xml"/>
      </zipfileset>

      <zipfileset dir="${conf.dir}" fullpath="conf/keyStore">
        <include name="keystore"/>
      </zipfileset>

    </jar>

  </target>

  <!--
       ===================================================================
       Performs unit tests
       ===================================================================
  -->
  <target name="test" depends="jars">

<!--
    <path id="test.class.path">
      <pathelement path="${java.class.path}" />
      <pathelement path="${build.classes}" />
    </path>

    <property name="test.class.path" refid="test.class.path" />
    <echo message="TCP: ${test.class.path}" />
-->

    <test showSuccess="false" showBanner="false" showTrace="true" forceShowTrace="true" > 
      <classpath>
        <pathelement path="${build.classes}" /> 
        <pathelement path="${java.class.path}" />
      </classpath>

      <testlet>org.apache.cornerstone.services.scheduler.test.CronTimeTriggerTestlet</testlet>
    </test> 

  </target>

  <!--
       ===================================================================
       Create the API documentation
       ===================================================================
  -->
  <target name="javadocs">

    <delete dir="${build.javadocs}"/>
    <mkdir dir="${build.javadocs}"/>

    <javadoc packagenames="org.apache.*"
             sourcepath="${java.dir}"
             destdir="${build.javadocs}">
      <classpath refid="project.class.path" />
      <doclet name="com.sun.tools.doclets.standard.Standard">
       <param name="-author"/>
       <param name="-version"/>
       <param name="-use"/>
       <param name="-doctitle" value="${Name}"/>
       <param name="-windowtitle" value="${Name} API"/>
       <param name="-bottom" 
              value="&quot;Copyright &#169; 2001 Apache Jakarta Project. All Rights Reserved.&quot;"/>
      </doclet>
    </javadoc>

  </target>

  <!--
       ===================================================================
       Create the Local API documentation
       ===================================================================
  -->
  <target name="local-javadocs" depends="javadocs">

    <delete dir="${javadocs.dir}"/>
    <mkdir dir="${javadocs.dir}"/>

    <copy todir="${javadocs.dir}">
      <fileset dir="${build.javadocs}" />
    </copy>

  </target>

  <!--
       ===================================================================
       Update the www directory
       ===================================================================
  -->
  <target name="site-docs" depends="local-javadocs">

    <!-- delete all old documents but keep CVS directories -->
    <!-- note that by doing an include the defaultexcludes (CVS dirs) will be kept -->
    <delete>
      <fileset dir="${www.dir}">
        <include name="**"/>
      </fileset>
    </delete>

    <mkdir dir="${www.dir}"/>
    <copy todir="${www.dir}">
      <fileset dir="${docs.dir}" />
    </copy>

  </target>

  <target name="install" depends="jars,install-check" if="install.dir">

    <property name="install.apps" value="${install.dir}/apps"/>
    <delete file="${install.apps}/avalon-demo.sar"/>
    <delete dir="${install.apps}/avalon-demo"/>
    <copy file="${build.lib}/avalon-demo.sar" todir="${install.apps}"/>

  </target>

  <target name="install-check" unless="install.dir">

    <property name="install.dir" value="../jakarta-avalon-phoenix/dist"/>
  
    <echo message="install.dir not specified." />
    <echo message="Guessing install.dir=${install.dir} not specified." />
  
  </target>

  <!--
       ===================================================================
                 Cleans up build and distribution directories
       ===================================================================
  -->
  <target name="clean">
    <delete dir="${build.dir}" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
  </target>

  <!--
       ===================================================================
                      Cleans absolutely everything up
       ===================================================================
  -->
  <target name="real-clean" depends="clean">
    <delete dir="${docs.dir}" />
  </target>
 
</project>
