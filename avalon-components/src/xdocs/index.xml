<?xml version="1.0"?>

<document>
    <properties>
        <title>Cornerstone - Overview</title>
        <author email="avalon-dev@jakarta.apache.org">Avalon Documentation Team</author>
    </properties>
    <body>
        <section name="Introduction">
            <p>
              Cornerstone is a set of services for the Phoenix kernel. It contains "blocks"
              that plug into Phoenix.
            </p>
        </section>
        <section name="Service List (and the blocks that implement them)">
            <subsection name="ConnectionManager">
                <p>
                  The ConnectionManager service provides a facility to listen for incoming socket connections.
                </p>
                <p>
                  The DefaultConnectionManager block gives a thread pooled implementation of this service.
                  If there  were many server components all depending on this block, they would all share
                  the same thread pool.
                </p>
            </subsection>
            <subsection name="DataSourceSelector">
              <p>
                The DataSourceSelector service provides a way to select DataSourceComponent.
              </p>
              <p>
                The DefaultDataSourceSelector block gives a set of ready to use DataSourceComponents.
              </p>
            </subsection>
            <subsection name="DocumentBuilderFactory">
              <p>
                The DocumentBuilderFactory service provides a way to depend on a DOM Parser.  This
                implements the same methods (bar the factory one) that
                javax.xml.parsers.DocumentBuilderFactory does.
              </p>
              <p>
                The DOMBuilderFactory block will instantiate a javax.xml.parsers.DocumentBuilderFactory
                parser as named in its configuration.
              </p>
              <p>
                <strong>Note -</strong> One might ask why the javax.xml.parsers.DocumentBuilderFactory
                is not just used to load a parser.  The reason is that the factory method in that abstract
                class will register the first DOM parser loaded as the DOM parser to use for the whole VM.
                Clearly for a multi-server solution like Phoenix we must allow differet servers to load
                their preferred parser.  After all not all parser are created equal (in terms of features,
                speed and size).
              </p>
            </subsection>
            <subsection name="PacketManager">
              <p>
                The PacketManager service provides a facility to listen for incoming datagram connections.
              </p>
              <p>
                The DefaultPacketManager block gives a thread pooled implementation of this service.
                If there  were many server components all depending on this block, they would all share
                the same thread pool.
              </p>
            </subsection>
            <subsection name="SAXParserFactory">
              <p>
                The SAXParserFactory service provides a way to depend on a SAX Parser.  This implements
                the same methods (bar the factory one) that javax.xml.parsers.SAXParserFactory does.
              </p>
              <p>
                The SAXParserFactoryImpl block will instantiate a javax.xml.parsers.SAXParserFactory
                parser as named in its configuration.
              </p>
              <p>
                <strong>Note -</strong> Same note as for DocumentBuilderFactory above.
              </p>
            </subsection>
            <subsection name="TimeScheduler">
              <p>
                The TimeScheduler service provides a way to a depending block to do things an certain intervals.
              </p>
              <p>
                The DefaultTimeScheduler block implements the service.
              </p>
              <p>
                Used in conjunction with the service is a TimeTrigger.  There are two such tiggers at the
                moment - CronTimeTrigger and PeriodicTimeTigger.
              </p>
            </subsection>
            <subsection name="SOAPification">
              <p>
                The SOAPification service provides a way to publish an arbitart interface remotely using SOAP.
              </p>
              <p>
                The Glue block implements this service using the 'Glue' from 'The Mind Electric'.  As this
                product is commercial, we 1) do not include the jar for it in the source distro, 2) do not make
                available for download a Cornerstone that includes the Glue block.
              </p>
              <p>
                There is some question currentl as to whether Glue 2,x works with with Pheonix.  Glue 1.3 does.
              </p>
            </subsection>
            <subsection name="SocketManager">
              <p>
                The SocketManager service provides a way to lookup a factory for server of client sockets.
              </p>
              <p>
                The DefaultSocketManager block implements this service
              </p>
            </subsection>
            <subsection name="Store">
              <p>
                The Store service provides a way to store named Objects or Streams without knowing how they
                are stored.
              </p>
              <p>
                The RepositoryManager block implements this service and provides (in invocation of select(..) ) an
                appropriate Respository.  The two configurable implementations use the local file system for
                storage.
              </p>
            </subsection>
            <subsection name="ThreadManager">
              <p>
                The ThreadManager service provides a way get default or named Thread Pool.
              </p>
              <p>
                The DefaultThreadManager block implements this service an leans on Excalibur
                implementations of ThreadPool.
              </p>
            </subsection>
        </section>
    </body>
</document>
