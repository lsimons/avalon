<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "dtd/document-v10.dtd">

<document>
  <header>
    <title>Cornerstone Developer Documentation</title>
    <subtitle>The 'Hello World' Example Application</subtitle>
    <authors>
      <person name="Paul Hammant" email="Paul_Hammant@yahoo.org"/>
    </authors>
  </header>
  <body>
    <s1 title="Introduction">
      <p>
        The 'Hello World' demo server component is a socket listener app that replies 'Hello World' to client applications that open the port.  The reply is in HTML form so can be viewed by a Browser.  The HTTP headers are missing, but it still works.  Telnet is another client that can view the message.
      </p>
    </s1>
    <s1 title="Architecture">
      <p>
        The following shows how the HelloWorld demo block depends on ConnectionManager from cornerstone.  These 
        two blocks packaged as a server application (.SAR file) are loaded and launched by Phoenix, itself sitting on top of Avalon's framework.
      </p>
      <figure src="images/helloworld.gif" alt="Layer diag"/>
    </s1>
    <s1 title="Relevant source modules">
      <p>
        The HelloWorld demo compiles as part of the build process for cornerstone.  The important modules that contribute to the demo are listed here.  All are within the src directory
      </p>
      <ol>
        <li>
          <strong>org.apache.avalon.cornerstone.demos.helloworldserver package</strong> This package contains the Java source for 'Hello World' and the xinfo block descriptor.
        </li>
        <li>
          <strong>manifest/helloworld-demo.mf</strong> This contains a manifest for use in the bar file that details what's inside the block archive 'demo-helloworld.bar'
        </li>
        <li>
          <strong>conf\avalon-demo-assembly.xml</strong> This contains the assembly configuration for the resulting server archive (sar) file.
        </li>
      </ol>
    </s1>
    <s1 title="Java Source">
      <s2 title="HelloWorldHandler.java">
        <p>
          Instantiated and dispatched by the impl once per socket request that comes in.
        </p>
      </s2>
      <s2 title="HelloWorldServer.java">
        <p>
          The interface that's the contract for the Server block.  As it happens HelloWorld is not that resusable.  If it were "ObjectDataBase.java" many server apps could use it through this interface.  The interface could set more useful things that the greeting ("Hello", "Bonjour" etc.)
        </p>
      </s2>
      <s2 title="HelloWorldServerImpl.java">
        <p>
          This like all impls implements an interface.  Which interface is rather obvious in this case. It's a standard pattern that uses other blocks (SocketManager and ConnectionManager) to do the hard work of listening on a port, pooling threads and connections and organizing socket invokations in a queue and multi app friendly way.
        </p>
      </s2>
      <s2 title="HelloWorldServerImpl.xinfo">
        <p>
          This is obviously associated with the impl.  It expresses that impls needs in respect of other blocks in a way that Avalon can readily use for rapid deployment.
        </p>
      </s2>
    </s1>
    <s1 title="helloworld-demo.mf">
      <p>
        The file is renamed as part of the build process to MANIFEST.MF and placed in the ususal directory (META-INF).  It's used to allow Avalon to quickly index the contents of blocks.
      </p>
<source>
Manifest-Version: 1.0
Created-By: Apache Avalon Project

Name: org/apache/cornerstone/demos/helloworldserver/HelloWorldServerImpl.class
Avalon-Block: true
</source>
    </s1>
    <s1 title="avalon-demo-assembly xml">
    <p>
      The file is renamed as part of the build process to assembly.xml, and only has a separate name here to aid development.  The bulk of the contents of the file pertain to other blocks including ones that HelloWorld is dependant upon.  Here's the section that's for HelloWorld
    </p>
<source>
(text snipped)
    &lt;block class="org.apache.avalon.cornerstone.demos.helloworldserver.HelloWorldServerImpl"
           name="helloworldserver" &gt;
        &lt;provide name="sockets2" role="org.apache.avalon.cornerstone.services.sockets.SocketManager"/&gt;
        &lt;provide name="connections"
                 role="org.apache.avalon.cornerstone.services.connection.ConnectionManager" /&gt;
    &lt;/block&gt;
(text snipped)
</source>
      <p>
        Of the block element, listed attributes are the instatiatable class implementing the HelloWorld interface (not mentioned itself in this assembly xml), the display name of the block, and two services that HelloWorld needs.
      </p>
    </s1>
    <s1 title="avalon-demo-config xml">  
    <p>
      The file is renamed as part of the build process to config.xml, and only has a separate name here to aid development.  Again here is the pertinent section:
    </p>      
<source> 
(text snipped)
        &lt;helloworldserver&gt;
          &lt;port&gt;8999&lt;/port&gt;
          &lt;bind&gt;127.0.0.1&lt;/bind&gt;
          &lt;helloworldhandler&gt;
             &lt;connectiontimeout&gt; 360000 &lt;/connectiontimeout&gt;
          &lt;/helloworldhandler&gt;
        &lt;/helloworldserver&gt;
(text snipped)
</source>
      <p>
        The configuration element named &lt;helloworldserver&gt; is used as it's name suggests and is passed the blocks being used for the app. Elements port and bind are used by the socket manager.
      </p>
      <p>
        If you had configuration for an app, you'd specify it here in with eelement and attribute names that are invented for the application.
      </p>
    </s1>     
    <s1 title="Starting your own server project">
      <p>
        Familiarity with Ant and it's build script would be a good place to start.  After learning how Cornerstone compiles and jars the demos would be a good second step.  Thirdly, as I've done before, take the demos out of Cornerstone, delete classes and xml not relating to the HelloWorld server and rename from HelloWorld to whatever suits you.  I import into the lib dir avalon-cornerstone-compilation-0.x.jar to allow things that use it to compile.  I also import cornerstone-0.x.bar to the same place to allow it's inclusion in the sar file being made.  The build xml file even contains a target that allow you to install the freshly made sar file into a nearby Avalon installation - "build install", though for development you'll initially only be running "build" and "build clean".
      </p>
      <p>
        As a secondary process, it would be handy to learn xdocs (the technology that allows the creation of these book pages).  You're copying cornerstone to be (after some selective trimming) the foundation stone for new server app, so you might as well take adavantage of all it's templates..  "build xdocs" and look in build/docs.  All the Apache java based projects do this and then copy that to the website.  The project I'm involved with <link href="http://www.jesktop.org">Jesktop</link> does too.
      </p>
    </s1>
  </body>
  <footer>
    <legal>
      Copyright (c) @year@ The Jakarta Apache Project All rights reserved.
      $Revision: 1.5 $ $Date: 2001/09/05 08:52:21 $
    </legal>
  </footer>
</document>
