<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "dtd/document-v10.dtd">

<document>
  <header>
    <title>Cornerstone Developer Documentation</title>
    <subtitle>The 'Hello World' Example Application</subtitle>
    <authors>
      <person name="Paul Hammant" email="Paul_Hammant@yahoo.org"/>
    </authors>
  </header>
  <body>
    <s1 title="Introduction">
      <p>
        The 'Hello World' demo server component is a socket listener app that replies 'Hello World' to client applications that open the port.  The reply is in HTML form so can be viewed by a Browser.  The HTTP headers are missing, but it still works.  Telnet is another client that can view the message.
      </p>
    </s1>
    <s1 title="Architecture">
      <p>
        The following shows the HelloWorld demo block depending on ConnectionManager from cornerstone.  It also shows the Soapification service (Glue STD implementation) and the SOAPHelloWorld block depending on it and the HelloWorld block.  All these blocks are placed together on in one sar file as a server application.
      </p>
      <figure src="images/soaphelloworld.gif" alt="Layer diag"/>
    </s1>
    <s1 title="Relevant source modules">
      <p>
        The SOAPHelloWorld demo compiles as part of the build process for cornerstone, but only if Glue's jars have been taken from the zip file downloaded from <link href="www.themindelectric.com">here</link> and placed in the lib directory of cornerstone. That's commercial software and we are not distributing it, nor granting you rights to use it.  Please refer to the terms and conditions of use at The Mind Electric.  The important modules that contribute to the demo are listed here.  All are within the src directory
      </p>
      <ol>
        <li>
          <strong>org.apache.avalon.cornerstone.demos.soaphelloworldserver package</strong> This package contains the Java source for 'SOAP Hello World' and the xinfo block descriptor.
        </li>
        <li>
          <strong>manifest/soaphelloworld-demo.mf</strong> This contains a manifest for use in the bar file that details what's inside the block archive 'demo-soaphelloworld.bar'
        </li>
        <li>
          <strong>conf\avalon-soapdemo-assembly.xml</strong> This contains the assembly configuration for the resulting server archive (sar) file.
        </li>
      </ol>
    </s1>
    <s1 title="Java Source">
      <s2 title="SOAPHelloWorldHandler.java">
        <p>
          Instantiated and dispatched by the impl once per socket request that comes in.
        </p>
      </s2>
      <s2 title="SOAPHelloWorldServer.java">
        <p>
          The interface that's the contract for the Server block.  This service interface is empty, there are no methods, but it is mandatory for Phoenix apps.
        </p>
      </s2>
      <s2 title="SOAPHelloWorldServerImpl.java">
        <p>
          This, like all impls, implements a service interface.  Quite simply it gets its dependancies, SOAP (Glue) and HelloWorld server, ties them toegether and then launches publishes the HelloWorld interface (via Glue).
        </p>
      </s2>
      <s2 title="SOAPHelloWorldServerImpl.xinfo">
        <p>
          This is obviously associated with the impl.  It expresses that impls needs in respect of other blocks in a way that Avalon can readily use for rapid deployment.
        </p>
      </s2>
      <s2 title="SOAPHelloWorldServerTester.java">
        <p>
          This class illustrates the SOAP served WDSL page in use.  It uses Glue again to bind to the service and invoke the setGreeting(String) method passing in "Howdie Partner" as the greeting.  We're using Glue here, but any SOAP compliant language could be used invoke methods in the published WSDL definition.
        </p>
      </s2>      
    </s1>
    <s1 title="soaphelloworld-demo.mf">
      <p>
        The file is renamed as part of the build process to MANIFEST.MF and placed in the ususal directory (META-INF).  It's used to allow Avalon to quickly index the contents of blocks.
      </p>
<source>
Manifest-Version: 1.0
Created-By: Apache Avalon Project

Name: org/apache/cornerstone/demos/soaphelloworldserver/SOAPHelloWorldServerImpl.class
Avalon-Block: true
</source>
    </s1>
    <s1 title="avalon-soapdemo-assembly xml">
    <p>
      The file is renamed as part of the build process to assembly.xml, and only has a separate name here to aid development.  The bulk of the contents of the file pertain to other blocks including ones that SOAPHelloWorld is dependant upon.  Here's the section that's for SOAPHelloWorld.
    </p>
<source>
(text snipped)
  &lt;block class="org.apache.avalon.cornerstone.demos.helloworldserver.HelloWorldServerImpl" 
         name="helloworldserver" &gt;
    &lt;provide name="sockets" role="org.apache.avalon.cornerstone.services.sockets.SocketManager"/&gt;
    &lt;provide name="connections" 
             role="org.apache.avalon.cornerstone.services.connection.ConnectionManager" /&gt;
  &lt;/block&gt;

  &lt;block class="org.apache.avalon.cornerstone.blocks.soapification.glue.Glue" 
         name="glue-soapification" &gt;
  &lt;/block&gt;

  &lt;block class="org.apache.avalon.cornerstone.demos.soaphelloworldserver.SOAPHelloWorldServerImpl" 
         name="soaphelloworldserver" &gt;
    &lt;provide name="helloworldserver" 
             role="org.apache.avalon.cornerstone.demos.helloworldserver.HelloWorldServer"/&gt;
    &lt;provide name="glue-soapification" 
             role="org.apache.avalon.cornerstone.services.soapification.SOAPification" /&gt;
  &lt;/block&gt;
(text snipped)
</source>
      <p>
        The first segment shows HelloWorldServerImpl being preseneted as a block that depends on SocketManager and ConnectionManager as blocks.
      </p>
      <p>
        The second segment shows Glue being preseneted as a block that depends on nothing.  Incidentally, this is imperfect, it would be nice if Glue could use a pluggable webserver rather than the inbuilt one.
      </p>
      <p>
        The third segment shows SOAPHelloWorldServerImpl being preseneted as a block that depends on HelloWorldServer service (implemented by HelloWorldServerImpl) and SOAPification service (implemented by Glue)
      </p>      
    </s1>
    <s1 title="avalon-soapdemo-config xml">    
    <p>
      The file is renamed as part of the build process to config.xml, and only has a separate name here to aid development.  Again here are the pertinent sections:
    </p>    
<source> 
(text snipped)
  &lt;helloworldserver&gt;
      &lt;port&gt;7999&lt;/port&gt;
      &lt;bind&gt;127.0.0.1&lt;/bind&gt;
      &lt;helloworldhandler&gt;
        &lt;connectiontimeout&gt;360000&lt;/connectiontimeout&gt;
      &lt;/helloworldhandler&gt;
  &lt;/helloworldserver&gt;

  &lt;glue-soapification&gt;  
      &lt;port&gt;7998&lt;/port&gt;
  &lt;/glue-soapification&gt; 
  
  &lt;soaphelloworldserver&gt;  
      &lt;pub-name&gt;helloworld&lt;/pub-name&gt;
  &lt;/soaphelloworldserver&gt;  
(text snipped)
</source>
      <p>
        The first segment is the parameter for HelloWorldServer (presenting a HTTP-like service through port 7999).
      </p>
      <p>      
        The second segment named &lt;glue-soapification&gt; is for Glue itself, it means that all WSDL pages present will be done so over port 7998.  Client code accessing the SOAP services will do so through this port.
      </p>
      <p>
        The third segment is the parameters for SOAPHelloWorldServer.  It's only configurable aspect is the is the name of the page to present in WSDL form.  In this case it would be "http://localhost:7998/helloworld.wsdl".
      </p>
    </s1>    
  </body>
  <footer>
    <legal>
      Copyright (c) @year@ The Jakarta Apache Project All rights reserved.
      $Revision: 1.1 $ $Date: 2001/09/05 08:52:21 $
    </legal>
  </footer>
</document>
