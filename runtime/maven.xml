<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE project [
  <!ENTITY % index SYSTEM "file:index.ent"> %index;
]>
<project default="avalon:help" xmlns:maven="jelly:maven" xmlns:j="jelly:core" xmlns:util="jelly:util" xmlns:ant="jelly:ant">

  <mkdir dir="target" />
  
  <ant:property name="avalonTarget" value="avalon:build"/>

  <goal name="avalon:help">
    <echo>
To build the avalon platform you need to invoke the following three goals:

  $ maven plugins  --- builds the core plugins
  $ maven meta     --- builds framework, utilities, meta and the meta api
  $ maven merlin   --- builds repository, logging, composition, activation and merlin

Subsequent builds can be updated using:

  $ maven merlin

A set of utility goals are also provided that build projects including the building all dependent projects.  These include:

  util
  framework
  meta
  repository
  logging
  composition
  activation
  merlin

To build a project independnet of dependent project groups is possible using any of the above targets by prepending the "x" character.  For example, to locally build the meta package without triggering dependent project builds, just enter the following command:

  $ maven xmeta

Note you need maven rc2 or later, and you need to make sure xalan-2.5.1.jar is in your $MAVEN_HOME/lib/endorsed dir.

      </echo>
  </goal>

  <!-- phase 1 targets -->
  <goal name="plugins" prereqs="xplugins"/>

  <!-- phase 2 targets -->
  <goal name="framework" prereqs="xframework"/>
  <goal name="meta" prereqs="framework,xutil,xmeta"/>

  <!-- phase 3 targets -->
  <goal name="util" prereqs="xutil"/>
  <goal name="repository" prereqs="xrepository"/>
  <goal name="logging" prereqs="repository,xlogging"/>
  <goal name="composition" prereqs="repository,logging,xcomposition"/>
  <goal name="activation" prereqs="composition,xactivation"/>
  <goal name="merlin" prereqs="activation,xmerlin"/>

  <!-- phase 4 targets -->
  <goal name="tutorials" prereqs="xtutorials"/>

  <!-- local goals -->

  <goal name="xframework">
    <maven:reactor basedir="${basedir}"
      includes="framework/project.xml"
      banner="Building:"
      goals="${avalonTarget}"
      ignoreFailures="false" 
      postProcessing="false" />
  </goal>

  <goal name="xutil">
    <maven:reactor basedir="${basedir}"
      includes="util/project.xml"
      banner="Building:"
      goals="${avalonTarget}"
      ignoreFailures="false" 
      postProcessing="false" />
  </goal>

  <goal name="xmeta">
    <maven:reactor basedir="${basedir}"
      includes="meta/project.xml"
      banner="Building:"
      goals="${avalonTarget}"
      ignoreFailures="false" 
      postProcessing="false" />
  </goal>

  <goal name="xrepository">
    <maven:reactor basedir="${basedir}"
      includes="repository/project.xml"
      banner="Building:"
      goals="${avalonTarget}"
      ignoreFailures="false" 
      postProcessing="false" />
  </goal>

  <goal name="xlogging">
    <maven:reactor basedir="${basedir}"
      includes="logging/project.xml"
      banner="Building:"
      goals="${avalonTarget}"
      ignoreFailures="false" 
      postProcessing="false" />
  </goal>

  <goal name="xcomposition">
    <maven:reactor basedir="${basedir}"
      includes="composition/project.xml"
      banner="Building:"
      goals="${avalonTarget}"
      ignoreFailures="false" 
      postProcessing="false" />
  </goal>

  <goal name="xactivation">
    <maven:reactor basedir="${basedir}"
      includes="activation/project.xml"
      banner="Building:"
      goals="${avalonTarget}"
      ignoreFailures="false" 
      postProcessing="false" />
  </goal>

  <goal name="xmerlin">
    <maven:reactor basedir="${basedir}"
      includes="merlin/project.xml"
      banner="Building:"
      goals="${avalonTarget}"
      ignoreFailures="false" 
      postProcessing="false" />
  </goal>

  <goal name="xplugins">
    <maven:reactor basedir="${basedir}"
      includes="maven-plugins/project.xml"
      banner="Building:"
      goals="${avalonTarget}"
      ignoreFailures="false" 
      postProcessing="false" />
  </goal>

  <goal name="xtutorials">
    <maven:reactor basedir="${basedir}"
      includes="tutorials/project.xml"
      banner="Building:"
      goals="${avalonTarget}"
      ignoreFailures="false" 
      postProcessing="false" />
  </goal>

  <!--
  ==============================================================================
  filter resources 
  ==============================================================================
  -->

  <preGoal name="java:jar-resources">
    <ant:filter token="AVALON-LOGGING-LOGKIT-SPEC" 
        value="&avalon-logging-logkit-artifact-spec;"/>
    <ant:filter token="AVALON-LOGGING-LOG4J-SPEC" 
        value="&avalon-logging-log4j-artifact-spec;"/>
    <ant:filter token="AVALON-LOGGING-LOGKIT-DATAGRAM-SPEC" 
        value="&avalon-logging-logkit-datagram-artifact-spec;"/>
    <ant:filter token="AVALON-LOGGING-LOGKIT-SYSLOG-SPEC" 
        value="&avalon-logging-logkit-syslog-artifact-spec;"/>
    <ant:filter token="MERLIN_IMPLEMENTATION" 
        value="artifact:merlin/merlin-impl#&merlin-impl-version;"/>
    <ant:filter token="LOGGING_IMPLEMENTATION" 
        value="&avalon-logging-logkit-artifact;"/>
    <ant:filter token="STANDARD_RUNTIME" 
        value="&avalon-activation-artifact;"/>
    <ant:filter token="FRAMEWORK_IMPL_VERSION" 
        value="&avalon-framework-impl-version;"/>
  </preGoal>

  <postGoal name="java:compile">

    <util:file var="merlinProperties" name="merlin.properties"/>
    <j:if test="${merlinProperties.exists()}">
      <ant:copy 
          file="merlin.properties" 
          toDir="${maven.build.dir}/classes" 
          verbose="yes"
          filtering="on">
        <filterset>
          <filter token="MERLIN_IMPLEMENTATION" value="&merlin-impl-artifact;"/>
          <filter token="LOGGING_IMPLEMENTATION" value="&avalon-logging-logkit-artifact;"/>
          <filter token="STANDARD_RUNTIME" value="&avalon-activation-artifact;"/>
        </filterset>
      </ant:copy>
    </j:if>
  </postGoal>

  <postGoal name="jar:jar">
    <j:set var="path" 
          value="${pom.artifactId}-${pom.currentVersion}.jar"/>
    <checksum file="${maven.build.dir}/${path}" fileext=".md5"/>
    <j:if test="${maven_gpg_exe != null}">
      <ant:exec executable="${maven_gpg_exe}">
        <ant:arg value="-a"/>
        <ant:arg value="--yes"/>
        <ant:arg value="-b"/>
        <ant:arg value="${maven.build.dir}/${path}"/>
      </ant:exec>
    </j:if>
  </postGoal>

  <postGoal name="jar:install">
    <j:set var="path" 
          value="${pom.artifactId}-${pom.currentVersion}.jar"/>
    <ant:copy todir="${maven.repo.local}/${pom.groupId}/jars" preserveLastModified="true">
      <ant:fileset dir="${maven.build.dir}">
        <ant:include name="${path}.meta"/>
        <ant:include name="${path}.asc"/>
        <ant:include name="${path}.md5"/>
      </ant:fileset>
    </ant:copy>
  </postGoal>

  <postGoal name="plugin:install">
    <j:set var="path" 
          value="${pom.artifactId}-${pom.currentVersion}.jar"/>
    <ant:copy todir="${maven.repo.local}/${pom.groupId}/plugins" preserveLastModified="true">
      <ant:fileset dir="${maven.build.dir}">
        <ant:include name="${path}.meta"/>
        <ant:include name="${path}.asc"/>
        <ant:include name="${path}.md5"/>
      </ant:fileset>
    </ant:copy>
  </postGoal>

</project>
