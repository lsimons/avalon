/* 
 * Copyright 2004 Apache Software Foundation
 * Licensed  under the  Apache License,  Version 2.0  (the "License");
 * you may not use  this file  except in  compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed  under the  License is distributed on an "AS IS" BASIS,
 * WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 * implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.avalon.test.playground;

import org.apache.avalon.framework.activity.Disposable;
import org.apache.avalon.framework.activity.Initializable;
import org.apache.avalon.framework.context.Context;
import org.apache.avalon.framework.logger.AbstractLogEnabled;
import org.apache.avalon.lifecycle.Creator;

/**
 * Definition of an extension handler that handles the Expoitable
 * extension stage interface.
 *
 * @avalon.component name="exploitation" lifestyle="thread"
 * @avalon.extension id="urn:avalon.test.playground:exploitable"
 * @author <a href="mailto:dev@avalon.apache.org">Avalon Development Team</a>
 */
public class ExploitationManager extends AbstractLogEnabled implements Creator, Initializable, Disposable
{

    //=======================================================================
    // Initializable
    //=======================================================================

    /**
     * Initialization of the handler.
     */
    public void initialize()
    {
        getLogger().debug( "initialize" );
    }

    //=======================================================================
    // Disposable
    //=======================================================================

    /**
     * Disposal of the handler.
     */
    public void dispose()
    {
        getLogger().debug( "dispose" );
    }

    //=======================================================================
    // Extension
    //=======================================================================

    /**
     * Handle the creation stage.
     * @param object the object to handle
     * @param context the extension stage context
     * @exception Exception if a stage execution error occurs
     */
    public void create( Object object, Context context ) throws Exception
    {
        if( object instanceof Exploitable )
        {
            ((Exploitable) object).incarnate();
        }
    }

    /**
     * Handle the destroy stage.
     * @param object the object to handle
     * @param context the extension stage context
     */
    public void destroy( Object object, Context context )
    {
        if( object instanceof Exploitable )
        {
            ((Exploitable) object).etherialize();
        }
    }
}
