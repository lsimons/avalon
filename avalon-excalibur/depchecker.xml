<?xml version="1.0"?>

<!--
============================================================
                Dependency updater
                   Version 2.3
           Jeff Turner <jefft@apache.org>

This Ant script provides "functions" to check if
dependencies are present, and take appropriate action if
they are not. "Appropriate action" may be:

- Print an error message
- Build the project, if local
- Retrieve the jar dependency via HTTP GET

To use it, type 'ant -f depchecker.xml'
============================================================-->

<!--
checkRequiredFile parameters:

name:
    Name of the jar. Eg 'avalon-collections.jar'
path:
    Path to named jar. Eg ${avalon-collections.jar}
proj.home (optional):
    Path to local project which builds the jar. Only set if
    the jar could be local, eg another component.
proj.target (optional):
    Ant script target to run in local project to build the jar
url (optional)
    URL of the jar, to retrieve to ${path} if it doesn't already exist at
    ${path}

Algorithm is as follows:

IF the directory ${proj.home} exists THEN:
    // The dependency is local; if the jar doesn't exist, we can build it 
    IF file ${path} does not exist THEN:
       call ${proj.home}/build.xml's 'dist.lite' target to build that
       project's jar, which will then build it's own dependencies if necessary
    ELSE we're fine
ELSE
    // The dependency is remote; we can't build it,
    IF file ${path} does not exist THEN:
        IF ${url} is present THEN:
            do a HTTP GET to retrieve the jar to ${path}
        ELSE
            print an error saying "Can't find file ${path}"
    ELSE we're fine
-->

<project name="dependencies" default="main" basedir=".">
    <!-- The target to call if ${proj.target} isn't specified -->
    <property name="default.target" value="dist.lite"/>

    <target name="main" depends="usage"/>
    <target name="usage">
        <echo><![CDATA[
            =======================================================
            This is Excalibur's dependency updater script.
            Which has been called incorrectly :)

            To use it, you must call the checkRequiredFile or
            checkRequiredClass targets from your Ant script.

            For example:

            <ant antfile="depchecker.xml" target="checkRequiredFile">
                <properties name="name" value="excalibur-concurrent.jar"/>
                <properties name="path" value="$${excalibur-concurrent.jar}"/>
                <properties name="proj.home" value="../concurrent"/>
                <properties name="proj.target" value="dist.lite"/>
            </ant>

            That will check if $${excalibur-concurrent.jar} points to a jar, and
            if it doesn't, build the $${proj.home} project in order to generate
            the jar

            or:

            <ant antfile="depchecker.xml" target="checkRequiredFile">
                <property name="name" value="commons-io.jar"/>
                <property name="path" value="$${lib.repo}/commons-io.jar"/>
                <property name="url" value="http://jakarta.apache.org/turbine/jars/commons-io.jar"/>
            </ant>

            That will check if $${lib.repo}/commons-io.jar exists, and if not,
            download it from $${url}


            The properties are as follows:

            For checkRequiredFile:
            name:
                Name of the jar. Eg 'avalon-collections.jar'
            path:
                Path to named jar. Eg $${avalon-collections.jar}

            proj.home (optional):
                Path to local project which builds the jar. Only set if the jar
                could be local, eg another component.
            proj.target (optional) [dist.lite]:
                Ant script target to run in local project to build the jar

            url (optional):
                URL to retrieve jar if not present on the local filesystem
            
            For checkRequiredClass:
            name:
                Name of jar in which the class usually resides
            class:
                Name of class to check for
            classpath:
                String classpath (; or : separated) to search for $${class} in
            =======================================================
            ]]></echo>
    </target>

    <!-- ====================================================== -->
    <!-- Call to ensure a class is present in the classpath     -->
    <!-- ====================================================== -->
    <target name="checkRequiredClass">
        <available classname="${class}" classpath="${classpath}" property="requirement.satisfied"/>
        <antcall target="checkRequiredClass.fail"/>
    </target>


    <!-- ====================================================== -->
    <!-- Call to ensure a file (usu. jar) is present. If not,   -->
    <!-- either build it (if local), or print an error (remote) -->
    <!-- ====================================================== -->
    <target name="checkRequiredFile" depends="checkIfLocal, checkRequiredFileLocal, checkRequiredFileRemote"/>

    <target name="checkIfLocal" if="proj.home">
        <available type="dir" file="${proj.home}" property="local"/>
    </target>

    <!--
    Check for a local requirement (another component). If not found,
    update_dependency will build it
    -->
    <target name="checkRequiredFileLocal" if="local">
        <available type="file" file="${path}" property="requirement.satisfied"/>
        <antcall target="update_dependency"/>
        <available type="file" file="${path}" property="build.succeeded"/>
        <antcall target="build.fail"/>
    </target>

    <!--
    Check for a remote requirement. If not found, checkRequiredFile.fail will
    print an error. Alternatively, we could do a HTTP get to retrieve the file
    -->
    <target name="checkRequiredFileRemote" unless="local">
        <available type="file" file="${path}" property="requirement.satisfied"/>
        <antcall target="get_dependency"/>
        <available type="file" file="${path}" property="get.succeeded"/>
        <antcall target="checkRequiredFile.fail"/>
    </target>

    <!-- =================================================================== -->
    <!-- Script called to recursively call another depencency.xml file in    -->
    <!-- another project, and then run the 'dist.lite' target.               -->
    <!-- =================================================================== -->
    <target name="update_dependency" description="Update files for one dependency" unless="requirement.satisfied">
        <echo message="Updating files from dependency ${proj.home}"/>
        <!-- Set target if it wasn't previously set -->
        <property name="proj.target" value="${default.target}"/>
        <ant dir="${proj.home}" target="${proj.target}" inheritAll="false">
            <property name="skip.tests" value="${skip.tests}"/>
        </ant>
    </target>

    <target name="get_dependency" description="Retrieve a jar via HTTP" if="url" unless="requirement.satisfied">
        <get
            src="${url}"
            dest="${path}"
            verbose="true"
            usetimestamp="true"/>
        <echo>Retrieved ${path}</echo>
    </target>

    <target name="checkRequiredFile.fail" unless="get.succeeded">
        <echo>
            +----------------------------------------------------------------+
            | FILE NOT FOUND:                                                |
            | ${path}
            +----------------------------------------------------------------+
            | You must define the following property in order                |
            | to build:                                                      |
            |                                                                |
            | ${name} (currently "${path}")
            |                                                                |
            | Usually this is done by copying ant.properties.sample to       |
            | ant.properties and defining the property there. This may also  |
            | be done in ${user.home}/.ant.properties.                       |
            +----------------------------------------------------------------+
        </echo>
        <fail message="Failed requirement: file not found"/>
    </target>

    <target name="checkRequiredClass.fail" unless="requirement.satisfied">
        <echo>
            +----------------------------------------------------------------+
            | CLASS NOT FOUND:                                               |
            | ${class}
            +----------------------------------------------------------------+
            | A jar containing class:                                        |
            |   ${class}
            | must be in your classpath or Ant lib directory                 |
            |   ${ant.home}/lib
            | Typically it is in a jar called:                               |
            |   ${name}                                                      
            +----------------------------------------------------------------+
        </echo>
        <fail message="Failed requirement: class not found"/>
    </target>

    <target name="build.fail" unless="build.succeeded">
        <echo>
            +-----------------------------------------------------------------+
            + BUILD FAILURE                                                   |
            +-----------------------------------------------------------------+
            |                                                                 |
            | The dependency-checking system tried to build the project:      |
            |   ${proj.home}
            | which should have provided the property:                        |
            |   ${name} = ${path}
            | However, after the build, no such file exists.                  |
            |                                                                 |
            | Typically this is because the required project changed the name |
            | of the jar it produces. If so, please correct this in           |
            | default.properties, ant.properties.sample or ant.properties     |
            +-----------------------------------------------------------------+
        </echo>
        <fail message="Failed Requirement"/>
    </target>

</project>
