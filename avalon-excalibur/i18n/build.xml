<?xml version="1.0"?>

<project name="Excalibur i18n" default="main" basedir=".">

  <!-- load per-project properties -->
  <property file="project.properties"/>

  <!--
    Give user a chance to override without editing this file
    (and without typing -D each time he compiles it)
  -->
  <property file=".ant.properties"/>
  <property file="../.ant.properties"/>
  <property file="${user.home}/.ant.properties"/>

  <!-- Settings used to configure compile environment -->
  <property name="build.debug" value="on"/>
  <property name="build.optimize" value="off"/>
  <property name="build.deprecation" value="off"/>
  <property name="build.compress" value="false"/>

  <!-- location of intermediate products -->
  <property name="build.dir" value="build"/>
  <property name="build.lib" value="${build.dir}/lib"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.tests" value="${build.dir}/tests"/>
  <property name="build.reports" value="${build.dir}/reports"/>

  <!-- Set the properties for source directories -->
  <property name="src.dir" value="src"/>
  <property name="java.dir" value="${src.dir}/java"/>
  <property name="test.dir" value="${src.dir}/test"/>

  <!-- Set the properties for distribution directories -->
  <property name="dist.dir" value="dist"/>
  <property name="dist.javadocs" value="${dist.dir}/docs/api"/>

  <!-- property to specify name of zip/jar files -->
  <property name="dist.name" value="excalibur-${name}-${version}"/>

  <!-- property indicating directory where all distribution archives are placed -->
  <property name="dist.base" value="distributions"/>

  <!-- Classpath for product -->
  <path id="project.class.path">
    <pathelement location="${java.class.path}"/>
    <pathelement location="${build.classes}"/>
    <pathelement location="${junit.jar}"/>
  </path>

  <target name="main" depends="dist" description="Build the project"/>
  <target name="rebuild" depends="clean,main" description="Rebuild the project"/>

  <!-- Compiles the source code -->
  <target name="compile" description="Compiles the source code">

    <mkdir dir="${build.classes}"/>

    <!-- Compile all classes excluding the tests.  They are compiled in their own task -->
    <javac srcdir="${java.dir}"
           destdir="${build.classes}"
           debug="${build.debug}"
           optimize="${build.optimize}"
           deprecation="${build.deprecation}"
           target="1.2">
      <classpath refid="project.class.path" />
      <src path="${test.dir}"/>
      <include name="**/*.java"/>
    </javac>

  </target>

  <!-- Creates all the .jar file -->
  <target name="jar" depends="compile" description="Generates the jar files">

    <mkdir dir="${build.lib}"/>

    <jar jarfile="${build.lib}/${dist.name}.jar"
         basedir="${build.classes}"
         compress="${build.compress}">
      <exclude name="**/test/**"/>
      <zipfileset dir=".." prefix="META-INF/">
        <include name="LICENSE.txt"/>
      </zipfileset>
    </jar>
  </target>

  <!-- Creates all the Javadocs -->
  <target name="javadocs" depends="compile" description="Generates the javadocs">

    <mkdir dir="${dist.javadocs}"/>
    <javadoc packagenames="org.apache.*"
             sourcepath="${java.dir}"
             destdir="${dist.javadocs}">
      <classpath refid="project.class.path" />
      <doclet name="com.sun.tools.doclets.standard.Standard">
       <param name="-author"/>
       <param name="-version"/>
       <param name="-doctitle" value="${Name}"/>
       <param name="-windowtitle" value="${Name} API"/>
       <param name="-link" value="http://java.sun.com/j2se/1.4/docs/api/"/>
       <param name="-link" value="http://java.sun.com/j2ee/sdk_1.3/techdocs/api/"/>
       <param name="-link" value="http://jakarta.apache.org/avalon/api/"/>
       <param name="-bottom"
              value="&quot;Copyright &#169; ${year} Apache Jakarta Project. All Rights Reserved.&quot;"/>
      </doclet>
    </javadoc>
  </target>

  <target name="test" depends="compile" description="Perform the unit tests">

    <echo message="Performing Unit Tests" />
    <junit fork="true" printsummary="yes" dir="${build.tests}">
      <formatter type="xml"/>    <!-- xml reports for junitreport -->
      <formatter type="plain"/>  <!-- text reports for humans     -->

      <classpath>
        <path refid="project.class.path"/>
        <pathelement location="${build.classes}"/>
      </classpath>
      <batchtest todir="${build.reports}">
        <fileset dir="${build.classes}">
          <include name="**/test/*TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>

  </target>

  <target name="test-reports" depends="test" description="Generate Reports for the unit tests">

    <junitreport todir="${build.tests}">
      <fileset dir="${build.tests}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${build.reports}"/>
    </junitreport>

    <!-- Clean up the xml reports used by the junitreport task -->
    <delete>
        <fileset dir="${build.tests}" includes="TEST-*.xml"/>
        <fileset dir="${build.tests}" includes="TESTS-*.xml"/>
    </delete>
  </target>

  <!-- Creates the distribution -->
  <target name="dist" depends="jar, test, javadocs" description="Generates the jar files">

    <mkdir dir="${dist.dir}"/>
    <copy file="${build.lib}/${dist.name}.jar" todir="${dist.dir}"/>
    <copy file="../LICENSE.txt" todir="${dist.dir}"/>
    <copy file="../KEYS" todir="${dist.dir}"/>

    <mkdir dir="${dist.base}"/>

    <zip zipfile="${dist.base}/${dist.name}-bin.zip" compress="true">
      <zipfileset dir="${dist.dir}" prefix="${dist.name}"/>
    </zip>

    <checksum fileext=".md5">
      <fileset dir="${dist.base}" />
    </checksum>

  </target>

  <!-- Cleans up build and distribution directories -->
  <target name="clean" description="Cleans up the project">
    <delete dir="${build.dir}" />
    <delete dir="${dist.dir}" />
    <delete dir="test" /> <!-- unit testing output directory -->
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
  </target>

  <target name="real-clean" depends="clean" description="Cleans up the project, including distributions">
    <delete dir="${dist.base}" />
  </target>

</project>
