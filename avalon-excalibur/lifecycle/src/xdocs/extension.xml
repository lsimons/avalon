<?xml version="1.0"?>

<document>
  <header>
    <title>Lifecycle Extensions</title>
    <authors>
      <person name="Avalon Development Team" email="dev@avalon.apache.org"/>
    </authors>
  </header>
  <body>

  <s1 title="What are lifecycle extensions ?">
   <p>
    Lifecycle extensions are additional stages a component can traverse through during
    it's lifetime. Lifecycle extensions allow a container to provide extra functionality
    to components in addition to the standard stages defined by Avalon Framework.
   </p>

   <p>
    Avalon Framework defines a set of standard interfaces often termed as Lifecycle
    stages that can be used by a container to determine the components requirements
    during deployment and subsequent decommissioning.
   </p>

   <p>
    These interfaces allows the developer to separate the various concerns involved when
    writing a component. Often termed SoC and IoC (Separation of Concerns and Inversion of
    Control), these concepts represent one of the primary advantages of using Avalon.
   </p>

   <p>
    Sometimes it's useful to extend this development paradigm from the framework level
    into the application domain, to create customized lifecycle extensions that are called
    upon in addition to the standard set defined by the Avalon Framework.
   </p>

   <p>
    Such custom lifecycle stages can further enable domain specific logic across many,
    perhaps even unrelated components, can reduce code duplication, and allows the developer
    to reuse the same development and thinking paradigm as the standard lifecycle stages.
   </p>

   <p>
    For example, you might want to pass a specialized SecurityManager to some of your
    components before they are initialized, or have their internal state persistently cached
    during system shutdown and restored at during startup. You might want to pass user
    dependent decryption keys to your component, or give components the opportunity to
    recycle themselves before being disposed or returned to a pooled component handler.
   </p>

   <p>
    The possibilities and number of extensions are only limited by the requirements of your
    particular application domain.
   </p>

   <p>
    This document describes how to add new lifecycle extensions using <strong>Fortress</strong>
    and <strong>Merlin</strong> containers.
    This document assumes a knowledge of what an Avalon lifecycle is, and a basic understanding
    of the standard lifecycle interfaces Avalon Framework defines. References in this document to
    Service and ServiceManager can also be freely interpreted as Component and ComponentManager
    by the reader.
   </p>

   <p>
    <note>As at the time of writing, Fortress and Merlin is the only Avalon container that
    supports lifecycle extensions, which means components that use this feature will not work
    with the other Avalon containers (ExcaliburComponentManager, Phoenix, Tweety, etc)</note>
   </p>

   <p>
    Support for lifecycle extensions in the other Avalon containers is technically possible but
    has not yet been discussed. Please check with the Avalon developer mailing list if you use
    one of these containers and would like to use lifecycle extensions.
   </p>

  </s1>

  <s1 title="How do I extend a Component's lifecycle ?">
   <p>
    Extending a Component's lifecycle is straightforward. An overview of the process
    follows:
   </p>

    <ol>
     <li>Define the new component interface</li>

     <p>
      Create the new interface defining the operations that should be called upon components
      that implement this interface. Using the previously mentioned examples, this would be
      your <code>SecurityManageable</code>, <code>Cacheable</code>, <code>Decryptable</code>,
      <code>Recycleable</code> interfaces.
     </p>

     <li>Define an extension object that calls upon the methods defined in the new interface,
     during one or more of the pre-defined phases of component's lifecycle</li>

     <p>
      Create a class that implements the <code>Creator</code> and/or <code>Accessor</code>
      interfaces and implemets the interaction with target components supplied under the
      create, destroy, access and relase operations.
     </p>

     <li>Register your extension object</li>

     <p>
       This depends on the container you are using.  In
       Merlin you need to include the &lt;extensions&gt; tag in the component .xinfo file and
       Merlin will automatically recognize it.  In Fortress you register the extension object
       with a <code>LifecycleExtensionManager</code>
     </p>

     <li>Implement the new component interface on your component</li>

     <p>
      Add the new <code>implements</code> clause to your Component, or Component implementation,
      and write any methods defined in the implemented interface.
     </p>

     <p>
      Proceed as normal. Checking for extensions is done implicitly within both Fortress and
      Merlin. Once lifecycle extensions are registered they will be activated during the 4
      phases defined later in this document.
     </p>
    </ol>
  </s1>

  <s1 title="When can a Component's lifecycle be extended ?">
   <p>
    The life of any component can be broken down to the following phases:
   </p>

    <ol>
     <li>Creation</li>

     <p>
      When the component is instantiated.
     </p>

     <li>Access</li>

     <p>
      When the component is accessed via a ServiceManager/Selector
      (<code>lookup()/select()</code>).
     </p>

     <li>Release</li>

     <p>
      When the component is released via a ServiceManager/Selector (<code>release()</code>).
     </p>

     <li>Destruction</li>

     <p>
      When the component is decommissioned, ready for garbage collection.
     </p>

    </ol>

   <p>
    <note>A component will go through it's Creation and Destruction phase only once. Since
    extension classes can implement different handling strategies (Poolable, ThreadSafe,
    etc), the access and release phases of a component can be applied multiple times.</note>
   </p>

   <p>
    Lifecycle extensions can be added to any of the above defined phases. This allows
    you to control the interception point your particular extension will be applied under.
   </p>

   <p>
    For example, thread or user dependent extensions would be added at the access and release
    levels (ie. when the component is retrieved and returned to the ServiceManager) as they
    depend on runtime data not available until they are actually used.
   </p>

   <p>
    More static, or global extensions would be added at the creation or destruction level, since
    they do not depend on any external data that change during runtime, nor are they particular
    to any one context of use.
   </p>

  </s1>

  <s1 title="Lifestyle Extension Interfaces">

      <p>
      A container manages extensions using an extension handler.  Handlers may implement
      the <code>Creator</code> and/or <code>Accessor</code> interfaces.  A creator extension
      will be activated during the create and destroy stages of a component lifecycle.  A
      accessor extension will be activated during the access and release stages.
      </p>

      <s2 title="The Creator Interface">

<p>The <code>Creator</code> interface describes the create and destroy
stages that occur between a component and a container
during service management.  Lifecycle extensions supporting create
and destroy stages must implement this interface.</p>

      <source>
 package org.apache.avalon.lifecycle;

 import org.apache.avalon.framework.context.Context;

 public interface Creator
 {
    /**
     * Create stage handler.
     *
     * @param object the object that is being created
     * @param context the context instance required by the create handler
     *    implementation
     * @exception Exception if an error occurs
     */
    void create( Object object, Context context )
        throws Exception;

    /**
     * Destroy stage handler.
     *
     * @param object the object that is being destroyed
     * @param context the context instance required by the handler
     *    implementation
     */
    void destroy( Object object, Context context );

 }
     </source>
      </s2>

      <s2 title="Accessor Interface">
<p>
The <code>Accessor</code> interface describes the access and release
stages that occur between a service or component manager and a container
during service deployment.  Lifecycle extensions supporting access
and release stages must implement this interface.
</p>
<source>
 package org.apache.avalon.lifecycle;

 import org.apache.avalon.framework.context.Context;

 public interface Accessor
 {
    /**
     * Access stage handler.
     *
     * @param object the object that is being accessed
     * @param context the context instance required by the access handler
     *    implementation
     * @exception Exception if an error occurs
     */
    void access( Object object, Context context )
        throws Exception;

    /**
     * Release stage handler.
     *
     * @param object the object that is being released
     * @param context the context instance required by the release handler
     *    implementation
     */
    void release( Object object, Context context );

 }
</source>
   </s2>
  </s1>

  <s1 title="Need more information ?">
   <p>
    If you have any particular questions, comments, etc, please send an email to the Avalon
    developer mailing <link href="mailto:dev@avalon.apache.org">list</link>.
   </p>
  </s1>

  </body>
  <footer>
    <legal>
      Copyright (c) @year@ The Jakarta Apache Project All rights reserved.
      $Revision: 1.1 $ $Date: 2003/03/11 13:31:34 $
    </legal>
  </footer>
</document>
