<?xml version="1.0"?>

<project name="Excalibur Logger" default="main" basedir=".">

    <property file="${user.home}/build.properties"/>
    <property file="${basedir}/../ant.properties"/>
    <property file="${basedir}/ant.properties"/>
    <property file="${user.home}/.ant.properties"/>
    <property file="${basedir}/../libraries.properties"/>
    <property file="${basedir}/../default.properties"/>
    <property file="${basedir}/default.properties"/>

    <!-- Classpath for product -->
    <path id="project.class.path">
        <pathelement location="${build.classes}"/>
        <pathelement location="${avalon-logkit.jar}"/> <!-- deprecated -->
        <pathelement location="${logkit.jar}"/>
        <pathelement location="${avalon-framework.jar}"/>
        <pathelement location="${excalibur-i18n.jar}"/>
        <pathelement location="${checkstyle.jar}"/>

        <!-- Optional jars -->
        <pathelement location="${servlet.jar}"/>
        <pathelement location="${jdbc.jar}"/>
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${mail.jar}"/>
        <pathelement location="${jms.jar}"/>
        <pathelement path="${java.class.path}"/>
    </path>

    <path id="tools.class.path">
        <pathelement location="${junit.jar}"/>
        <pathelement location="${tools.jar}"/>
    </path>

    <path id="test.class.path">
        <pathelement location="${build.testclasses}"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${commons-collections.jar}"/>
        <pathelement location="${excalibur-instrument.jar}"/>
        <pathelement location="${excalibur-testcase.jar}"/>
        <pathelement location="${excalibur-component.jar}"/>
        <pathelement location="${excalibur-pool.jar}"/>
        <path refid="project.class.path"/>
    </path>
    <property name="cp" refid="test.class.path"/>

    <target name="cocoon-warning" unless="servlet.present">
        <echo>**********************************************</echo>
        <echo>*            COCOON USERS WARNING             </echo>
        <echo>*                                             </echo>
        <echo>* The generated jar ${build.lib}/${jar.name}  </echo>
        <echo>* is not suitable for use in Cocoon, as it    </echo>
        <echo>* lacks servlet support                       </echo>
        <echo>**********************************************</echo>
    </target>

    <target name="main" depends="test,jar,cocoon-warning" description="Build the project"/>
    <target name="rebuild" depends="clean,main" description="Rebuild the project"/>

    <!-- Checks the environment for existing resources -->
    <target name="check-environment">
        <available property="log4j.present" classname="org.apache.log4j.LogManager">
            <classpath refid="project.class.path"/>
        </available>
        <available property="servlet.present" classname="javax.servlet.Servlet">
            <classpath refid="project.class.path"/>
        </available>
        <available property="jms.present" classname="javax.jms.Queue">
            <classpath refid="project.class.path"/>
        </available>
        <available property="datasource.present" classname="javax.sql.DataSource">
            <classpath refid="project.class.path"/>
        </available>
        <available property="javamail.present" classname="javax.mail.Session">
            <classpath refid="project.class.path"/>
        </available>
        <available property="lf5.present" classname="org.apache.log.output.lf5.LF5LogTarget">
            <classpath refid="project.class.path"/>
        </available>
    </target>

    <!-- Check that if we want servlet logging support, our logkit.jar has it enabled too -->
    <target name="dependencies.servlet" if="servlet.present">
            <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkRequiredClass">
                <property name="proj.jar.name" value="logkit.jar"/>
                <property name="class" value="org.apache.log.output.ServletOutputLogTarget"/>
                <property name="classpath" value="${cp}"/>
                <property name="remedy" value="Recompile LogKit with servlet support enabled, or disable servlet support in ${Name} by setting a blank 'servlet.jar' property in ant.properties"/>
            </ant>
        </target>

    <!-- Check that if we want JDBC logging support, our logkit.jar has it enabled too -->
    <target name="dependencies.datasource" if="datasource.present">
            <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkRequiredClass">
                <property name="proj.jar.name" value="logkit.jar"/>
                <property name="class" value="org.apache.log.output.db.ColumnInfo"/>
                <property name="classpath" value="${cp}"/>
                <property name="remedy" value="Recompile LogKit with JDBC logging support enabled, or disable JDBC support in ${Name} by setting a blank 'jdbc.jar' property in ant.properties"/>
            </ant>
    </target>

    <!-- Check that if we want JMS logging support, our logkit.jar has it enabled too -->
    <target name="dependencies.jms" if="jms.present">
            <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkRequiredClass">
                <property name="proj.jar.name" value="logkit.jar"/>
                <property name="class" value="org.apache.log.output.jms.JMSQueueTarget"/>
                <property name="classpath" value="${cp}"/>
                <property name="remedy" value="Recompile LogKit with JMS support enabled, or disable JMS support in ${Name} by setting a blank 'jms.jar' property in ant.properties"/>
            </ant>
    </target>

    <target name="dependencies.optional"
        depends="check-environment,dependencies.servlet,dependencies.datasource,dependencies.jms"
        description="Checks if dependencies for optional components are present"/>

    <target name="dependencies" depends="dependencies.optional" description="Check dependencies" unless="skip.dependencies">
        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkCommon"/>
        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkFramework"/>
        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkLogkit"/>
        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkI18n"/>
    </target>

    <target name="dependencies-test" depends="dist-jar, dependencies"
        description="Check unit test dependencies" unless="skip.dependencies">
        <!-- Need the jar to prevent recursive deps. -->

        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkCommonsCollections"/>
        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkInstrument"/>
        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkJUnit"/>
        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkTestcase"/>
        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkComponent"/>
        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkPool"/>
    </target>

  <target name="op-warning" description="General warning target (used by other targets)">
    <echo>**********************************************</echo>
    <echo>*</echo>
    <echo>*  Classes needed for output via ${thing} are not </echo>
    <echo>*  available.  Excalibur Logger should build without them</echo>
    <echo>*</echo>
    <echo>*  Recovery:</echo>
    <echo>*  ${recovery}</echo>
    <echo>*</echo>
    <echo>***********************************************</echo>
    <echo/>
  </target>

  <target name="jms-warn" unless="jms.present"
      description="Outputs a warning if javax.jms.* classes are missing during compilation">
      <antcall target="op-warning">
          <param name="thing" value="JMS"/>
          <param name="recovery"
              value="Get jms.jar from inside jms-1_0_2b.zip from http://java.sun.com/products/jms/docs.html and place it in ${lib.repo} (if defined), or set the $${jms.jar} property in ant.properties"/>
      </antcall>
  </target>

  <target name="sql-warn" unless="datasource.present"
      description="Outputs a warning if javax.sql.* classes are missing during compilation">
      <antcall target="op-warning">
          <param name="thing" value="SQL databases"/>
          <param name="recovery"
              value="Get jdbc2_0-stdext.jar (listed as 'JDBC 2.0 Optional Package Binary') from http://java.sun.com/products/jdbc/download.html and place it in ${lib.repo} (if defined), or set the $${sql.jar} property in ant.properties"/>
      </antcall>
  </target>

  <target name="mail-warn" unless="javamail.present"
      description="Outputs a warning if javax.mail.* classes are missing during compilation">
      <antcall target="op-warning">
          <param name="thing" value="SMTP"/>
          <param name="recovery"
              value="Get mail.jar from inside javamail-1_2.zip from http://java.sun.com/products/javamail/ and place it in ${lib.repo} (if defined), or set the $${mail.jar} property in ant.properties"/>
      </antcall>
  </target>

  <target name="log4j-warn" unless="log4j.present"
      description="Outputs a warning if log4j classes are missing during compilation">
      <antcall target="op-warning">
          <param name="thing" value="Log4j"/>
          <param name="recovery"
              value="Get log4j.jar from http://jakarta.apache.org/log4j/docs/download.html and place it in ${lib.repo} (if defined), or set the $${log4j.jar} property in ant.properties"/>
      </antcall>
  </target>

  <target name="servlet-warn" unless="servlet.present"
      description="Outputs a warning if javax.servlet.* classes are missing during compilation">
      <antcall target="op-warning">
          <param name="thing" value="Servlets"/>
          <param name="recovery"
              value="Get servlet.jar from http://jakarta.apache.org/builds/jakarta-tomcat/release/, or from http://gump.covalent.net/jars/latest/jakarta-servletapi-4/servlet.jar, and place it in the lib dir"/>
      </antcall>
  </target>

  <target name="lf5-warn" unless="lf5.present"
      description="Outputs a warning if LF5 classes are missing during compilation">
      <antcall target="op-warning">
          <param name="thing" value="LogFactor 5"/>
          <param name="recovery"
              value="Get the newest LF5-enabled logkit, and place it in the lib dir"/>
      </antcall>
  </target>


  <target name="optional-warnings" depends="jms-warn,sql-warn,mail-warn,log4j-warn,servlet-warn,lf5-warn"
      description="Outputs warnings if some jars are missing from the environment">
  </target>

  <!-- Compiles the source code -->
  <target name="compile" depends="dependencies, check-environment, optional-warnings" description="Compiles the source code">

        <mkdir dir="${build.classes}"/>

        <!-- Compile all classes including the tests. -->
        <javac srcdir="${java.dir}"
            destdir="${build.classes}"
            debug="${build.debug}"
            optimize="${build.optimize}"
            deprecation="${build.deprecation}"
            target="1.2">
            <classpath refid="project.class.path" />
            <include name="**/*.java"/>
            <exclude name="**/Log4J*"
                     unless="log4j.present"/>
            <exclude name="**/LF5TargetFactory.java*"
                     unless="lf5.present"/>
            <exclude name="org/apache/avalon/excalibur/logger/factory/ServletTargetFactory.java"
                     unless="servlet.present"/>
            <exclude name="org/apache/avalon/excalibur/logger/factory/JMSTargetFactory.java"
                     unless="jms.present"/>
            <exclude name="org/apache/avalon/excalibur/logger/factory/JDBCTargetFactory.java"
                     unless="datasource.present"/>
            <exclude name="org/apache/avalon/excalibur/logger/factory/SMTPTargetFactory.java"
                     unless="javamail.present"/>

        </javac>

        <!-- copy resources to same location as .class files -->
        <copy todir="${build.classes}">
            <fileset dir="${java.dir}">
                <exclude name="**/*.java"/>
                <exclude name="**/package.html"/>
            </fileset>
        </copy>

    </target>

    <!-- Compiles the unit test source code -->
    <target name="compile-test" depends="compile, dependencies-test" description="Compiles the source code">
        <mkdir dir="${build.testsrc}"/>

        <!-- Copy over all of the tests applying test filters -->
        <copy todir="${build.testsrc}">
            <fileset dir="${test.dir}"/>
        </copy>

        <mkdir dir="${build.testclasses}"/>

        <!-- Compile all test classes. -->
        <javac srcdir="${build.testsrc}"
            destdir="${build.testclasses}"
            debug="${build.debug}"
            optimize="${build.optimize}"
            deprecation="${build.deprecation}"
            target="1.2">
            <classpath refid="test.class.path" />
            <include name="**/*.java"/>
            <exclude name="**/Log4J*"
                     unless="log4j.present"/>
            <exclude name="org/apache/avalon/excalibur/logger/factory/ServletTargetFactory.java"
                     unless="servlet.present"/>
            <exclude name="org/apache/avalon/excalibur/logger/factory/LF5TargetFactory.java"
                     unless="log4j.present"/>
            <exclude name="org/apache/avalon/excalibur/logger/factory/JMSTargetFactory.java"
                     unless="jms.present"/>
            <exclude name="org/apache/avalon/excalibur/logger/factory/JDBCTargetFactory.java"
                     unless="datasource.present"/>
            <exclude name="org/apache/avalon/excalibur/logger/factory/SMTPTargetFactory.java"
                     unless="javamail.present"/>
        </javac>

        <copy todir="${build.testclasses}">
            <fileset dir="${test.dir}">
                <exclude name="**/*.java"/>
                <exclude name="**/package.html"/>
            </fileset>
        </copy>

    </target>

    <!-- Copies and filters the license. Used by jar and dist -->
    <target name="prepare-conf">
        <mkdir dir="${build.conf}"/>
        <copy todir="${build.conf}" flatten="true">
            <fileset dir="../" includes="LICENSE.txt"/>
            <filterset>
                <filter token="year" value="${year}"/>
            </filterset>
        </copy>

    </target>

    <!-- Creates all the .jar file -->
    <target name="jar" depends="compile, prepare-conf" description="Generates the jar files">

        <mkdir dir="${build.lib}"/>

        <jar jarfile="${build.lib}/${jar.name}"
            basedir="${build.classes}"
            compress="${build.compress}">
            <manifest>
              <attribute name="Extension-Name" value="${name}"/>
              <attribute name="Specification-Vendor" value="Apache Software Foundation"/>
              <attribute name="Specification-Version" value="${version}"/>
              <attribute name="Implementation-Vendor" value="Apache Software Foundation"/>
              <attribute name="Implementation-Version" value="${package-version}"/>
              <attribute name="Implementation-Vendor-Id" value="ASF"/>
            </manifest>
            <exclude name="**/test/**"/>
            <zipfileset dir="${build.conf}" prefix="META-INF/">
                <include name="LICENSE.txt"/>
            </zipfileset>
        </jar>
    </target>

    <!-- Creates all the Javadocs -->
    <target name="javadocs" depends="compile" description="Generates the javadocs" unless="skip.javadocs">

        <mkdir dir="${dist.javadocs}"/>
        <javadoc packagenames="org.apache.*"
            sourcepath="${java.dir}"
            destdir="${dist.javadocs}">
            <classpath refid="project.class.path" />
            <doclet name="com.sun.tools.doclets.standard.Standard">
                <param name="-author"/>
                <param name="-version"/>
                <param name="-doctitle" value="${Name}"/>
                <param name="-windowtitle" value="${Name} API"/>
                <param name="-link" value="http://java.sun.com/j2se/1.4/docs/api/"/>
                <param name="-link" value="http://java.sun.com/j2ee/sdk_1.3/techdocs/api/"/>
                <param name="-link" value="http://avalon.apache.org/api/"/>
                <param name="-bottom"
                    value="&quot;Copyright &#169; ${year} Apache Avalon Project. All Rights Reserved.&quot;"/>
                <param name="-tag" value="avalon.component:t:Avalon Component:"/>
                <param name="-tag" value="avalon.service:t:Avalon Service:"/>
                <param name="-tag" value="x-avalon.info:t:Avalon Component Information:"/>
                <param name="-tag" value="x-avalon.lifestyle:t:Avalon Component Lifestyle:"/>
                <param name="-tag" value="avalon.dependency:m:Avalon Component Dependency:"/>
            </doclet>
        </javadoc>
    </target>

    <target name="test" depends="compile-test" description="Perform the unit tests" unless="skip.tests">

        <echo message="Performing Unit Tests" />

        <mkdir dir="${build.tests}"/>

        <junit fork="true"
            haltonfailure="${junit.failonerror}"
            printsummary="yes"
            dir="${build.tests}">
            <classpath refid="test.class.path"/>

            <formatter type="xml"/>    <!-- xml reports for junitreport -->
            <formatter type="plain" usefile="false"/>  <!-- text reports for humans     -->

            <batchtest todir="${build.tests}">
                <fileset dir="${build.testclasses}">
                    <include name="**/test/*TestCase.class"/>
                    <exclude name="**/Abstract*"/>
                </fileset>
            </batchtest>
        </junit>

    </target>

    <target name="test-reports" depends="test" description="Generate Reports for the unit tests">

        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkBSF"/>

        <mkdir dir="${build.reports}/junit"/>

        <junitreport todir="${build.reports}/junit">
            <fileset dir="${build.tests}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.reports}/junit"/>
        </junitreport>

        <!-- Clean up the xml reports used by the junitreport task -->
        <!--
        <delete>
            <fileset dir="${build.tests}" includes="TEST-*.xml"/>
            <fileset dir="${build.tests}" includes="TESTS-*.xml"/>
        </delete>
        -->

    </target>

    <target name="checkstyle" if="do.checkstyle" description="Checkstyle">

        <!-- this invocation of checkstyle requires that checkstyle be downloaded and setup -->
        <!-- thats why you are required to define do.checkstyle property to generate the report -->
        <taskdef name="checkstyle"
            classname="com.puppycrawl.tools.checkstyle.CheckStyleTask">
            <classpath refid="project.class.path"/>
        </taskdef>
        <checkstyle
            lcurlyType="nl"
            lcurlyMethod="nl"
            lcurlyOther="nl"
            rcurly="ignore"
            allowProtected="false"
            allowPackage="false"
            allowNoAuthor="false"
            maxLineLen="100"
            maxMethodLen="100"
            maxConstructorLen="100"
            memberPattern="^m_[a-z][a-zA-Z0-9]*$"
            staticPattern="^c_[a-z][a-zA-Z0-9]*$"
            constPattern="(^c_[a-z][a-zA-Z0-9]*$)|([A-Z_]*$)"
            ignoreImportLen="true"
            allowTabs="false"
            javadocScope="protected"
            ignoreWhitespace="true"
            cacheFile="checkstyle.cache"
            failOnViolation="false"
            ignoreCastWhitespace="true">
            <fileset dir="${java.dir}">
                <include name="**/*.java"/>
            </fileset>
            <formatter type="plain"/>
            <formatter type="xml" toFile="${build.dir}/checkstyle-results.xml"/>
        </checkstyle>
    </target>

    <target name="checkstyle-report"
        depends="checkstyle"
        if="do.checkstyle"
        description="Generate Checkstyle Report">

        <mkdir dir="${build.reports}/checkstyle"/>
        <property name="checkstyle.pathhack" location="."/>
        <style style="${tools.dir}/etc/checkstyle-frames.xsl" in="${build.dir}/checkstyle-results.xml"
            out="${build.reports}/checkstyle/delete-me.html">
            <param name="pathhack" expression="${checkstyle.pathhack}"/>
        </style>

    </target>

    <!-- Creates the distribution -->
    <target name="dist"
        depends="dist-jar, test-reports, checkstyle-report, docs, javadocs"
        description="Generates a distribution (jar + docs + javadocs + unit tests + checkstyle reports)">

        <copy file="${build.conf}/LICENSE.txt" todir="${dist.dir}"/>

        <zip zipfile="${dist.dir}/src.zip" compress="false">
            <zipfileset dir="src/java"/>
        </zip>

        <mkdir dir="${dist.base}"/>

        <zip zipfile="${dist.base}/${dist.name}.zip" compress="true">
            <zipfileset dir="${dist.dir}" prefix="${dist.name}"/>
            <zipfileset dir="${docs.dir}" prefix="${dist.name}/docs"/>
        </zip>

    <checksum file="${dist.base}/${dist.name}.zip" fileext=".md5"/>
    </target>

    <!-- Creates a mini jar-only distribution -->
    <target name="dist-jar" depends="jar">
        <mkdir dir="${dist.dir}"/>
        <copy todir="${dist.dir}">
            <fileset dir="${build.lib}">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- Creates a minimal distribution -->
    <target name="dist.lite"
        depends="dist-jar, test, javadocs"
        description="Generates a minimal distribution (jar + javadocs)">

        <copy file="../LICENSE.txt" todir="${dist.dir}"/>

    </target>

    <!-- Setup the filters -->
    <target name="setup-filters">
      <filter token="Name" value="Avalon ${Name}"/>
      <filter token="name" value="${dir-name}"/>
      <filter token="version" value="${version}"/>
      <filter token="year" value="${year}"/>
      <filter token="status" value="${status}"/>
      <filter token="release" value="${release}"/>
      <filter token="short-version" value="${short.version}"/>

      <property name="avalon.base" value="http://jakarta.apache.org/avalon"/>
      <property name="framework.base" value="http://jakarta.apache.org/avalon/framework"/>
      <property name="phoenix.base" value="http://jakarta.apache.org/avalon/phoenix"/>
      <property name="cornerstone.base" value="http://jakarta.apache.org/avalon/cornerstone"/>
      <property name="logkit.base" value="http://jakarta.apache.org/avalon/logkit"/>
      <property name="testlet.base" value="http://jakarta.apache.org/avalon/testlet"/>

      <filter token="year" value="${year}"/>
      <filter token="AVALON_BASE" value="${avalon.base}"/>
      <filter token="FRAMEWORK_BASE" value="${framework.base}"/>
      <filter token="PHOENIX_BASE" value="${phoenix.base}"/>
      <filter token="CORNERSTONE_BASE" value="${cornerstone.base}"/>
      <filter token="LOGKIT_BASE" value="${logkit.base}"/>
      <filter token="TESTLET_BASE" value="${testlet.base}"/>
    </target>


    <!-- Prepares the documentation directory -->
    <target name="docs" depends="setup-filters" description="Generates the Docs">
    <ant antfile="${basedir}/../forrestbuild.xml"/>

      <copy todir="${docs.dir}">
        <fileset dir="${build.docs}">
          <include name="**"/>
        </fileset>
      </copy>

    </target>

    <target name="site" depends="docs" description=" Places Docs ready for hosting on website">

      <mkdir dir="../site/dist/docs/${dir-name}"/>
      <copy todir="../site/dist/docs/${dir-name}">
        <fileset dir="${docs.dir}">
          <include name="**"/>
        </fileset>
      </copy>

    </target>

    <!-- Cleans up build and distribution directories -->
    <target name="clean" description="Cleans up the project">
        <delete file="checkstyle.cache"/>
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
        <delete dir="${docs.dir}" />
        <delete dir="test" /> <!-- unit testing output directory -->
        <delete>
            <fileset dir="." includes="**/*~" defaultexcludes="no"/>
        </delete>
    </target>

    <target name="real-clean" depends="clean" description="Cleans up the project, including distributions">
        <delete dir="${dist.base}" />
    </target>

</project>
