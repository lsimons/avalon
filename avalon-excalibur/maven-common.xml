<?xml version="1.0"?>

<!--
    Issue the command 'maven excalibur:info' for more information
    about this file.
-->

<project default="excalibur:warn"
    xmlns:j="jelly:core"
    xmlns:ant="jelly:ant">

    <goal name="excalibur:header">
        <ant:echo>
===================================================================
 Avalon Excalibur Build System, the Maven Edition
===================================================================
        </ant:echo>
    </goal>

    <!-- ==========================================================
          Warning
         ========================================================== -->

    <preGoal name="java:compile">
        <attainGoal name="excalibur:warn"/>
    </preGoal>
    <postGoal name="jar:jar">
        <attainGoal name="excalibur:warn"/>
    </postGoal>

    <goal name="excalibur:warn"
            description="Alerts the user that the maven build is in development">
        <attainGoal name="excalibur:header"/>
        <ant:echo>
                !!! WARNING !!!

 excalibur is built using ant; the maven build system
 is still in development. *DO NOT USE IT* unless you're helping
 out with setting that up or testing it.
================================================================
        </ant:echo>
    </goal>

    <!-- ==========================================================
          Doc Generation
         ==========================================================

         This uses a very rudimentary forrest plugin.

         ========================================================== -->

    <!-- use forrest for doc generation if requested -->
    <postGoal name="xdoc">
        <j:if test="${pom.getProperty('use-forrest') == 'true'}">
            <attainGoal name="forrest:generate"/>
        </j:if>
    </postGoal>

    <goal name="excalibur:generate-readme"
            description="Generates a README.txt from the maven POM">

        <ant:echo file="${maven.build.dir}/README.txt">
=======================================================================
            ${pom.name}
=======================================================================
summary:   ${pom.shortDescription}
publisher: ${pom.organization.name}
website:   ${pom.url}
version:   ${pom.currentVersion}
license:   Please see the LICENSE.txt file
=======================================================================

${pom.description}

More documentation?
===================
We do not distribute all our documentation through releases. Rather,
you are encouraged to visit our website at
    ${pom.url}
for more information.

Building from source?
=====================
The excalibur buildfiles reference a ../maven-common.xml and a
../project-common.xml. In addition, you also need ../forrest.properties
for documentation generation to work properly. Download these files
from the following URLS:

http://cvs.apache.org/viewcvs.cgi/*checkout*/avalon-excalibur/project-common.xml?rev=HEAD&amp;content-type=text/xml
http://cvs.apache.org/viewcvs.cgi/*checkout*/avalon-excalibur/maven-common.xml?rev=HEAD&amp;content-type=text/xml
http://cvs.apache.org/viewcvs.cgi/*checkout*/avalon-excalibur/forrest.properties?rev=HEAD&amp;content-type=text/xml

        </ant:echo>
    </goal>

    <goal name="excalibur:generate-license"
            description="Generates a LICENSE.txt from the maven POM">

        <ant:tstamp><ant:format property="current.year" pattern="yyyy"/></ant:tstamp>
        <j:if test="${current.year==pom.inceptionYear}">
            <j:set var="year.string" value="${current.year}"/>
        </j:if>
        <j:if test="${empty(year.string)}">
            <j:set var="year.string" value="${pom.inceptionYear}-${current.year}"/>
        </j:if>
        <ant:echo file="${maven.build.dir}/LICENSE.txt">
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) ${year.string} The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Apache", "Avalon", "Excalibur" and "Apache Software Foundation"
    must not be used to endorse or promote products derived from this  software
    without  prior written permission. For written permission, please contact
    apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
        </ant:echo>
    </goal>

    <!-- ==========================================================
          Cleanup of ant artifacts
         ========================================================== -->

    <postGoal name="clean">
        <ant:delete dir="${build.dir}"/>
        <ant:delete dir="${dist.dir}"/>
    </postGoal>

    <!-- ==========================================================
          Build customization
         ========================================================== -->

    <!-- copy additional test resources -->
    <postGoal name="test:prepare-filesystem">
        <echo>
            copy additional unit test resources
            from ${pom.build.unitTestSourceDirectory}
            to ${maven.test.dest}
        </echo>
        <copy todir="${maven.build.dir}/test-classes">
            <fileset dir="${pom.build.unitTestSourceDirectory}">
                <exclude name="**/*.java"/>
                <exclude name="**/package.html"/>
            </fileset>
        </copy>
    </postGoal>

    <!-- ==========================================================
          Distribution customization
         ========================================================== -->

    <!-- check for override.version -->
    <preGoal name="dist:build-setup">
        <attainGoal name="excalibur:version-override"/>
    </preGoal>

    <!-- check for override.version -->
    <goal name="excalibur:version-override">
        <j:set var="override" value="${override.version}"/>
        <j:if test="${not empty(override)}">
            <j:setProperties object="${pom}" currentVersion="${override}"/>
        </j:if>
        <ant:echo>
            overriding version; setting to: ${pom.currentVersion}
        </ant:echo>
    </goal>

    <!-- auto-gen readme and license when building distributions -->
    <postGoal name="dist:build-setup">
        <attainGoal name="excalibur:generate-readme"/>
        <attainGoal name="excalibur:generate-license"/>
    </postGoal>

    <!-- include genned readme and license and src.zip in distro -->
    <postGoal name="dist:prepare-bin-filesystem">
        <attainGoal name="excalibur:generate-readme"/>
        <attainGoal name="excalibur:generate-license"/>
        <attainGoal name="excalibur:generate-src-zip"/>
        <attainGoal name="excalibur:generate-test-src-zip"/>

        <ant:copy todir="${maven.dist.bin.assembly.dir}">
          <ant:fileset dir="${maven.build.dir}">
            <ant:include name="README.txt"/>
            <ant:include name="LICENSE.txt"/>
            <ant:include name="src.zip"/>
          </ant:fileset>
        </ant:copy>
    </postGoal>

    <!-- include genned readme and license and src.zip in distro -->
    <postGoal name="dist:prepare-src-filesystem">
        <attainGoal name="excalibur:generate-readme"/>
        <attainGoal name="excalibur:generate-license"/>

        <ant:copy todir="${maven.dist.src.assembly.dir}">
          <ant:fileset dir="${maven.build.dir}">
            <ant:include name="README.txt"/>
            <ant:include name="LICENSE.txt"/>
          </ant:fileset>
        </ant:copy>
    </postGoal>

    <!-- build a source zip containing all project sources -->
    <goal name="excalibur:generate-src-zip">
        <ant:zip destfile="${maven.build.dir}/src.zip"
            basedir="${pom.build.sourceDirectory}"/>
    </goal>

    <!-- build a source zip containing all project test sources -->
    <goal name="excalibur:generate-test-src-zip">
        <ant:zip destfile="${maven.build.dir}/test-src.zip"
            basedir="${pom.build.unitTestSourceDirectory}"/>
    </goal>

    <!-- ==========================================================
          Deployment customization
         ========================================================== -->

    <goal name="excalibur:deploy"
            description="Deploys a release to www.apache.org/dist">

        <!-- get version -->
        <attainGoal name="excalibur:version-override"/>

        <!-- generate checksums -->
        <ant:checksum fileext="md5">
            <fileset dir="target/distributions">
                <include name="*.zip"/>
                <include name="*.gz"/>
            </fileset>
        </ant:checksum>

        <!-- set variables -->
        <j:set var="hostname" value="${remote.host.name}"/>
        <j:if test="${empty(hostname)}">
            <j:set var="hostname" value="lsd.student.utwente.nl"/>
        </j:if>
        <j:set var="repodir" value="${remote.repository.dir}"/>
        <j:if test="${empty(repodir)}">
            <j:set var="repodir" value="~/repo"/>
        </j:if>
        <j:set var="mailannounce" value="${send.announce}"/>

        <j:set var="repo" value="${hostname}:${repodir}"/>
        <j:set var="mkdir" value="mkdir -p"/>
        <j:set var="sshopts" value="-T -o BatchMode=yes"/>
        <j:set var="scpopts" value="-B"/>

        <!-- check for .asc -->
        <j:set var="fail.on.pgp.missing" value="false"/>
        <ant:available file="target/distributions/${maven.final.name}-bin.zip.asc"
                property="asc.files.present"/>
        <j:set var="pgpdone" value="${asc.files.present}"/>
        <j:if test="${not pgpdone}">
            <echo>
WARNING: No PGP .asc files available! Please execute
'maven excalibur:info' in the parent directory to read
about PGP and deploying distributions!
            </echo>
            <j:if test="fail.on.pgp.missing">
                <ant:fail/>
            </j:if>
        </j:if>

        <!-- create directories -->
        <ant:exec dir="." executable="${maven.ssh.executable}">
            <arg line="${sshopts} ${hostname} ${mkdir} ${repodir}/${pom.artifactId}/source/"/>
        </ant:exec>
        <ant:exec dir="." executable="${maven.ssh.executable}">
            <arg line="${sshopts} ${hostname} ${mkdir} ${repodir}/${pom.artifactId}/binaries/"/>
        </ant:exec>
        <ant:exec dir="." executable="${maven.ssh.executable}">
            <arg line="${sshopts} ${hostname} ${mkdir} ${repodir}/${pom.artifactId}/jars/"/>
        </ant:exec>

        <!-- upload files -->
        <ant:exec dir="." executable="${maven.scp.executable}">
            <arg line="${scpopts} target/distributions/*${pom.currentVersion}-src* ${repo}/${pom.artifactId}/source/"/>
        </ant:exec>
        <ant:exec dir="." executable="${maven.scp.executable}">
            <arg line="${scpopts} target/distributions/*${pom.currentVersion}-src* ${repo}/${pom.artifactId}/binaries/"/>
        </ant:exec>
        <ant:exec dir="." executable="${maven.scp.executable}">
            <arg line="${scpopts} target/${maven.final.name}.jar ${repo}/${pom.artifactId}/jars/"/>
        </ant:exec>

        <!-- create symlinks -->

        <!-- -src.tar.gz to basedir -->
        <ant:exec dir="." executable="${maven.ssh.executable}">
            <arg line="${sshopts} ${hostname} ln -f -s ${repodir}/${pom.artifactId}/source/${maven.final.name}-src.tar.gz ${repodir}/${pom.artifactId}/${maven.final.name}-src.tar.gz"/>
        </ant:exec>
        <!-- basedir/$v-src.tar.gz to basedir/latest-src.tar.gz -->
        <ant:exec dir="." executable="${maven.ssh.executable}">
            <arg line="${sshopts} ${hostname} ln -f -s ${repodir}/${pom.artifactId}/${maven.final.name}-src.tar.gz ${repodir}/${pom.artifactId}/${pom.artifactId}-latest-src.tar.gz"/>
        </ant:exec>
        <!-- -src.tar.gz.asc to basedir -->
        <ant:exec dir="." executable="${maven.ssh.executable}">
            <arg line="${sshopts} ${hostname} ln -f -s ${repodir}/${pom.artifactId}/source/${maven.final.name}-src.tar.gz.asc ${repodir}/${pom.artifactId}/${maven.final.name}-src.tar.gz.asc"/>
        </ant:exec>
        <!-- basedir/$v-src.tar.gz.asc to basedir/latest-src.tar.gz.asc -->
        <ant:exec dir="." executable="${maven.ssh.executable}">
            <arg line="${sshopts} ${hostname} ln -f -s ${repodir}/${pom.artifactId}/${maven.final.name}-src.tar.gz.asc ${repodir}/${pom.artifactId}/${pom.artifactId}-latest-src.tar.gz.asc"/>
        </ant:exec>
        <!-- -src.tar.gz.md5 to basedir -->
        <ant:exec dir="." executable="${maven.ssh.executable}">
            <arg line="${sshopts} ${hostname} ln -f -s ${repodir}/${pom.artifactId}/source/${maven.final.name}-src.tar.gz.md5 ${repodir}/${pom.artifactId}/${maven.final.name}-src.tar.gz.md5"/>
        </ant:exec>
        <!-- basedir/$v-src.tar.gz.md5 to basedir/latest-src.tar.gz.md5 -->
        <ant:exec dir="." executable="${maven.ssh.executable}">
            <arg line="${sshopts} ${hostname} ln -f -s ${repodir}/${pom.artifactId}/${maven.final.name}-src.tar.gz.md5 ${repodir}/${pom.artifactId}/${pom.artifactId}-latest-src.tar.gz.md5"/>
        </ant:exec>

        <!-- -src.zip to basedir -->
        <ant:exec dir="." executable="${maven.ssh.executable}">
            <arg line="${sshopts} ${hostname} ln -f -s ${repodir}/${pom.artifactId}/source/${maven.final.name}-src.zip ${repodir}/${pom.artifactId}/${maven.final.name}-src.zip"/>
        </ant:exec>
        <!-- basedir/$v-src.zip to basedir/latest-src.zip -->
        <ant:exec dir="." executable="${maven.ssh.executable}">
            <arg line="${sshopts} ${hostname} ln -f -s ${repodir}/${pom.artifactId}/${maven.final.name}-src.zip ${repodir}/${pom.artifactId}/${pom.artifactId}-latest-src.zip"/>
        </ant:exec>
        <!-- -src.zip.md5 to basedir -->
        <ant:exec dir="." executable="${maven.ssh.executable}">
            <arg line="${sshopts} ${hostname} ln -f -s ${repodir}/${pom.artifactId}/source/${maven.final.name}-src.zip.md5 ${repodir}/${pom.artifactId}/${maven.final.name}-src.zip.md5"/>
        </ant:exec>
        <!-- basedir/$v-src.zip.md5 to basedir/latest-src.zip.md5 -->
        <ant:exec dir="." executable="${maven.ssh.executable}">
            <arg line="${sshopts} ${hostname} ln -f -s ${repodir}/${pom.artifactId}/${maven.final.name}-src.zip.md5 ${repodir}/${pom.artifactId}/${pom.artifactId}-latest-src.zip.md5"/>
        </ant:exec>
        <!-- -src.zip.asc to basedir -->
        <ant:exec dir="." executable="${maven.ssh.executable}">
            <arg line="${sshopts} ${hostname} ln -f -s ${repodir}/${pom.artifactId}/source/${maven.final.name}-src.zip.asc ${repodir}/${pom.artifactId}/${maven.final.name}-src.zip.asc"/>
        </ant:exec>
        <!-- basedir/$v-src.zip.asc to basedir/latest-src.zip.asc -->
        <ant:exec dir="." executable="${maven.ssh.executable}">
            <arg line="${sshopts} ${hostname} ln -f -s ${repodir}/${pom.artifactId}/${maven.final.name}-src.zip.asc ${repodir}/${pom.artifactId}/${pom.artifactId}-latest-src.zip.asc"/>
        </ant:exec>

        <!-- create announcment -->
        <ant:echo file="${maven.build.dir}/announcement-${pom.currentVersion}.txt">
The Avalon team is proud to announce the release of version ${pom.currentVersion}
of the ${pom.artifactId} project.

About ${pom.artifactId}
=======================
${pom.description}

About Avalon-Excalibur
======================
The Avalon project is an effort to create, design, develop and maintain
a common framework and set of components for applications written using
the Java language. The Avalon-Excalibur subproject contains reusable
avalon components, avalon containers, and utility code.

Avalon is proud to be a part of the Apache Software Foundation.

For more information about avalon, see

            http://avalon.apache.org/

For more information about the Apache Software Foundation, see

            http://www.apache.org/

Downloading the distribution
============================
You may get the official release from the following URL:

http://avalon.apache.org/download.cgi
        </ant:echo>

        <!-- e-mail announcement -->

        <j:if test="${mailannounce}">
<ant:echo>
    Attempting to send
</ant:echo>
            <ant:mail
                from="Avalon Development Team &gt;dev@avalon.apache.org&lt;"
                toList="Avalon Development List &gt;dev@avalon.apache.org&lt;, Avalon User List &gt;users@avalon.apache.org&lt;"
                messageFile="${maven.build.dir}/announcement-${pom.currentVersion}.txt"
                subject="[Announce] ${pom.artifactId} ${pom.currentVersion} released"/>
        </j:if>
    </goal>


    <!-- ==========================================================
          Gump Integration
         ========================================================== -->

    <goal name="excalibur:seed-gump">
        <mkdir dir="${basedir}/../gump-integration"/>
        <mkdir dir="${basedir}/../gump-integration/project"/>
        <!-- create gump-project.xml -->
        <ant:available file="${basedir}/../gump-integration/project/${pom.artifactId}.xml"
                property="gump.exists"/>
        <j:set var="gexists" value="${gump.exists}"/>
        <j:if test="${gexists}"><ant:echo>Warning: ${basedir}/../gump-integration/project/${pom.artifactId}.xml already exists!</ant:echo></j:if>
        <j:if test="${not gexists}">

            <!-- copied from the maven gump plugin -->
            <j:new var="dependentProjects" className="java.util.TreeSet" />
            <j:forEach var="dependency" items="${pom.dependencies}">
              <j:set var="gumpDepName">${dependency.groupId}</j:set>
              <j:set var="dummy">${dependentProjects.add(gumpDepName)}</j:set>
            </j:forEach>

            <j:file name="${basedir}/../gump-integration/project/${pom.artifactId}.xml">
            <j:whitespace xmlns="dummy">
<project name="${pom.artifactId}">
    <package>${pom.package}</package>
    <ant basedir="${pom.artifactId}" target="dist">
        <property name="project.version" value="@@DATE@@"/>
    </ant>

    <!-- common dependencies -->
    <depend project="ant" inherit="runtime"/>
    <depend project="xml-xalan2"/>
    <depend project="xml-xerces"/>

    <!-- dump out the set of dependencies -->
    <j:forEach var="dependency" items="${dependentProjects}">
      <depend project="${dependency}" runtime="true"/>
    </j:forEach>

    <work nested="${component.dir}/target/classes"/>
    <work nested="${component.dir}/target/test-classes"/>

    <home nested="${component.dir}"/>
    <jar name="target/${component.id}-@@DATE@@.jar"/>
    <javadoc nested="${component.dir}/target/docs/apidocs"/>

    <nag from="Gump Integration Build &lt;dev@avalon.apache.org&gt;"
            to="dev@avalon.apache.org"/>
</project>
            </j:whitespace>
            </j:file>
        </j:if>
    </goal>


</project>
