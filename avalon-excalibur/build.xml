<?xml version="1.0"?>

<!--
==============================================================================

 Avalon/Excalibur build file

Type './build.sh' (Unix) or 'build' (Windows) to build. The flag '-projecthelp'
will list normal targets. If combined with '-verbose', all targets are printed.

Authors:
 Federico Barbieri <scoobie@apache.org>
 Berin Loritsch <bloritsch@apache.org>
 Peter Donald <peter@apache.org>

Legal:
  Copyright (c) 1999-2000 The Apache Software Foundation. All Rights Reserved.

==============================================================================
-->

<project default="main" basedir=".">

  <!--
    Give user a chance to override without editing this file
    (and without typing -D each time he compiles it)
  -->
  <property file=".ant.properties"/>
  <property file="${user.home}/.ant.properties"/>

  <property name="name" value="excalibur"/>
  <property name="Name" value="Excalibur"/>
  <property name="version" value="4.0"/>
  <property name="release" value="1st"/>
  <property name="status" value="final"/>
  <property name="short.version" value="4.1"/>
  <property name="year" value="1999-2001"/>

  <property name="excalibur.name" value="avalon-${name}"/>
  <property name="scratchpad.name" value="avalon-scratchpad"/>

  <property name="build.debug" value="on"/>
  <property name="build.optimize" value="off"/>
  <property name="build.deprecation" value="off"/>

  <!-- Set the properties for intermediate directory -->
  <property name="build.dir" value="build"/>
  <property name="build.src" value="${build.dir}/src"/>
  <property name="build.lib" value="${build.dir}/lib"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.scratchpad" value="${build.dir}/scratchpad"/>
  <property name="build.javadocs" value="${build.dir}/javadocs"/>
  <property name="build.docs" value="${build.dir}/docs"/>
  <property name="build.testdocs" value="${build.docs}/test"/>
  <property name="build.reports" value="${build.dir}/reports"/>
  <property name="build.context" value="${build.dir}/documentation"/>
  <property name="build.xdocs" value="${build.context}/xdocs"/>

  <!-- Set the properties for source directories -->
  <property name="src.dir" value="src"/>
  <property name="java.dir" value="${src.dir}/java"/>
  <property name="test.dir" value="${src.dir}/test"/>
  <property name="scratchpad.dir" value="${src.dir}/scratchpad"/>
  <property name="lib.dir" value="lib"/>
  <property name="tools.dir" value="../jakarta-avalon/tools"/>
  <property name="docs.dir" value="docs"/>
  <property name="www.dir" value="../jakarta-avalon-site/docs/${name}"/>
  <property name="javadocs.dir" value="${docs.dir}/api"/>
  <property name="xdocs.dir" value="${src.dir}/xdocs"/>
  <property name="context.dir" value="../jakarta-avalon/src/documentation"/>

  <property name="dist.name" value="${Name}-${version}"/>
  <property name="dist.base" value="distributions"/>

  <property name="j2ee.jar" value="${cjan.lib}/j2ee.jar"/>
  <property name="framework.jar" value="${tools.dir}/ext/avalon-framework.jar"/>
  <property name="logkit.jar" value="${tools.dir}/ext/logkit.jar"/>
  <property name="xerces.jar" value="${tools.dir}/lib/xerces-1.4.4.jar"/>
  <property name="xalan.jar" value="${tools.dir}/lib/xalan-2.2.0-D13.jar"/>
  <property name="bsf.jar" value="${tools.dir}/lib/bsf.jar"/>
  <property name="junit.jar" value="${tools.dir}/lib/junit-3.7.jar"/>
  <property name="tools.jar" value="${java.home}/../lib/tools.jar"/>
  <property name="jaxen.jar" value="${lib.dir}/jaxen-full.jar"/>
  <property name="saxpath.jar" value="${lib.dir}/saxpath.jar"/>

  <property name="announce2txt" value="${tools.dir}/announcement2txt.xsl"/>
  <property name="announce2header" value="${tools.dir}/announcement2header.xsl"/>
  <property name="announce2readme" value="${tools.dir}/announcement2readme.xsl"/>
  <property name="announce2site" value="${tools.dir}/announcement2site.xsl"/>

  <path id="project.class.path">
    <pathelement location="${framework.jar}"/>
    <pathelement location="${j2ee.jar}"/>
    <pathelement location="${logkit.jar}"/>
    <pathelement location="${xalan.jar}"/>
    <pathelement location="${bsf.jar}"/>
    <pathelement location="${xerces.jar}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${jaxen.jar}"/>
    <pathelement location="${saxpath.jar}"/>
    <pathelement path="${java.class.path}" />
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
      <exclude name="logkit*.jar"/>
      <exclude name="avalon-framework*.jar"/>
    </fileset>
    <pathelement path="${build.classes}" />
  </path>

  <path id="tools.class.path">
    <pathelement location="${xerces.jar}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${tools.jar}"/>
    <fileset dir="${tools.dir}/lib">
      <include name="*.jar" />
      <exclude name="xerces.jar"/>
    </fileset>
  </path>

  <path id="test.class.path">
    <path refid="tools.class.path"/>
    <path refid="project.class.path"/>
  </path>

  <!-- Main target -->
  <target name="main" depends="all" description="generates the Avalon distribution without the javadocs"/>

  <!-- Help on usage -->
  <target name="usage">
    <echo message="Use the -projecthelp option instead"/>
  </target>

  <target name="help" depends="usage"/>

  <!-- Set up dist properties -->
  <target name="setup-properties" >

    <property name="dist.dir" value="dist"/>
    <property name="dist.bin" value="${dist.dir}/bin"/>
    <property name="dist.apps" value="${dist.dir}/apps"/>
    <property name="dist.lib" value="${dist.dir}/lib"/>
    <property name="dist.docs" value="${dist.dir}/docs"/>
    <property name="dist.javadocs" value="${dist.dir}/docs/api"/>

    <property name="src.dist.dir" value="dist-src"/>
    <property name="src.dist.src" value="${src.dist.dir}/src"/>
    <property name="src.dist.docs" value="${src.dist.dir}/docs"/>
    <property name="src.dist.javadocs" value="${src.dist.dir}/docs/api"/>
    <property name="src.dist.lib" value="${src.dist.dir}/lib"/>
    <property name="src.dist.tools" value="${src.dist.dir}/tools"/>
  </target>

  <!-- Checks the environment for existing resources -->
  <target name="check-environment">
    <available property="log4j.present" classname="org.apache.log4j.Category">
      <classpath refid="project.class.path"/>
    </available>
    <available property="xpath.present" classname="org.apache.xpath.XPathAPI">
      <classpath refid="project.class.path"/>
    </available>
    <available property="jndi.present" classname="javax.naming.Context">
      <classpath refid="project.class.path"/>
    </available>
    <available property="datasource.present" classname="javax.sql.DataSource">
      <classpath refid="project.class.path"/>
    </available>
    <available property="jdbc3.present" classname="java.sql.Savepoint">
      <classpath refid="project.class.path"/>
    </available>
    <available property="informix.present" classname="com.informix.jdbc.IfxDriver">
      <classpath refid="project.class.path"/>
    </available>
    <available property="servlet.present" classname="javax.servlet.Servlet">
      <classpath refid="project.class.path"/>
    </available>
    <available property="jaxen.present" classname="org.jaxen.dom.XPath">
      <classpath refid="project.class.path"/>
    </available>
    <available property="jms.present" classname="javax.jms.Queue">
      <classpath refid="project.class.path"/>
    </available>
    <available property="jaxen.present" classname="org.jaxen.dom.XPath">
      <classpath refid="project.class.path"/>
    </available>
  </target>

  <target name="check-datasource" depends="check-environment" if="datasource.present">
    <property name="j2ee.present" value="true"/>
  </target>

  <target name="prepare-jdbc" depends="filter-jdbc,nofilter-jdbc"/>

  <target name="filter-jdbc" unless="jdbc3.present">
    <filter token="JDBC3_START" value="/*"/>
    <filter token="JDBC3_END" value="*/"/>
  </target>

  <target name="nofilter-jdbc" if="jdbc3.present">
    <filter token="JDBC3_START" value=""/>
    <filter token="JDBC3_END" value=""/>
  </target>

  <!-- Prepares the build directory -->
  <target name="prepare" depends="check-datasource,setup-properties,prepare-jdbc">
    <tstamp/>
    <mkdir dir="${build.dir}"/>
  </target>

  <!-- Compiles the source code -->
  <target name="compile" depends="prepare" description="compiles the source code">

    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.scratchpad}"/>

    <!-- Copy patched versions of JdbcConnection classes -->
    <copy file="${java.dir}/org/apache/avalon/excalibur/datasource/AbstractJdbcConnection.java"
          tofile="${build.src}/org/apache/avalon/excalibur/datasource/AbstractJdbcConnection.java"
          filtering="yes"/>
    <copy file="${java.dir}/org/apache/avalon/excalibur/datasource/JdbcConnection.java"
          tofile="${build.src}/org/apache/avalon/excalibur/datasource/JdbcConnection.java"
          filtering="yes"/>

    <copy todir="${build.scratchpad}">
      <fileset dir="${scratchpad.dir}">
        <include name="**/test/**"/>
        <exclude name="**/test/*.java"/>
      </fileset>
    </copy>

    <copy todir="${build.classes}">
      <fileset dir="${test.dir}">
        <include name="**/test/**"/>
        <exclude name="**/test/*.java"/>
      </fileset>
    </copy>

<!--
    <depend closure="yes"
            cache="${dep}"
            srcdir="${java.dir}"
            destdir="${build.classes}" />
-->

    <javac srcdir="${java.dir}"
           destdir="${build.classes}"
           debug="${build.debug}"
           optimize="${build.optimize}"
           deprecation="${build.deprecation}"
           target="1.2">
      <classpath refid="project.class.path" />
      <src path="${test.dir}"/>
      <src path="${build.src}"/>
      <exclude name="**/Log4J*"
               unless="log4j.present"/>
      <exclude name="org/apache/avalon/excalibur/datasource/J2eeDataSource.java"
               unless="j2ee.present"/>
      <exclude name="org/apache/avalon/excalibur/datasource/InformixDataSource.java"
               unless="informix.present"/>
      <exclude name="org/apache/avalon/excalibur/datasource/Jdbc2Connection.java"/>
      <exclude name="**/Jaxen*"
               unless="jaxen.present"/>
      <exclude name="org/apache/avalon/excalibur/xml/xpath/XPathProcessorImpl.java"
               unless="xpath.present"/>
      <exclude name="org/apache/avalon/excalibur/datasource/Jdbc3Connection.java"
               unless="jdbc3.present"/>
      <exclude name="org/apache/avalon/excalibur/logger/factory/ServletTargetFactory.java"
               unless="servlet.present"/>
      <exclude name="org/apache/avalon/excalibur/logger/factory/JMSTargetFactory.java"
               unless="jms.present"/>
      <exclude name="org/apache/avalon/excalibur/logger/factory/JDBCTargetFactory.java"
               unless="datasource.present"/>
      <exclude name="org/apache/avalon/excalibur/xml/xpath/JaxenProcessorImpl.java"
               unless="jaxen.present"/>
      <exclude name="org/apache/avalon/excalibur/datasource/AbstractJdbcConnection.java"/>
      <exclude name="org/apache/avalon/excalibur/datasource/JdbcConnection.java"/>
    </javac>

    <javac srcdir="${scratchpad.dir}"
           destdir="${build.scratchpad}"
           debug="${build.debug}"
           optimize="${build.optimize}"
           deprecation="${build.deprecation}"
           target="1.2">
      <classpath refid="project.class.path" />
    </javac>

    <rmic base="${build.classes}"
          classname="org.apache.avalon.excalibur.naming.rmi.server.RMINamingProviderImpl"
          stubVersion="1.2">
      <classpath refid="project.class.path" />
    </rmic>

  </target>

  <target name="test" depends="check"/>

  <target name="check" depends="compile" description="perform unit tests">
    <mkdir dir="${build.reports}"/>

    <echo message="Performing Unit Tests" />
    <junit fork="true" printsummary="yes" dir="${build.reports}">
      <formatter type="plain"/>
      <classpath>
        <path refid="test.class.path"/>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.scratchpad}"/>
      </classpath>
      <batchtest todir="${build.reports}">
        <fileset dir="${build.classes}">
          <exclude name="**/test/Abstract*TestCase.class"/>
          <exclude name="org/apache/avalon/excalibur/datasource/test/DataSourceTestCase.class"/>
          <exclude name="org/apache/avalon/excalibur/naming/rmi/test/RMIContextTestCase.class"/>
          <exclude name="org/apache/avalon/excalibur/logger/test/LogKitManagementTestCase.class"/>
          <exclude name="org/apache/avalon/excalibur/concurrent/test/ReadWriteLockTestCase.class"/>
          <exclude name="org/apache/avalon/excalibur/monitor/test/MonitorTestCase.class"/>
          <include name="**/test/*Profile.class" if="test.profile"/>
          <include name="**/test/*TestCase.class"/>
        </fileset>
        <fileset dir="${build.scratchpad}">
          <exclude name="**/test/Abstract*TestCase.class"/>
          <include name="**/test/*TestCase.class"/>
          <include name="**/test/*Profile.class" if="test.profile"/>
          <exclude name="**/test/*PerformanceTestCase.class" unless="test.profile"/>
        </fileset>
      </batchtest>
    </junit>

  </target>


  <target name="test-report" depends="compile" >
    <mkdir dir="${build.testdocs}"/>
    <mkdir dir="${build.reports}"/>

    <echo message="Performing Unit Tests" />
    <junit fork="true" printsummary="yes" dir="${build.reports}">
      <formatter type="xml"/>
      <classpath>
        <path refid="test.class.path"/>
        <pathelement location="${build.classes}"/>
        <pathelement location="${build.scratchpad}"/>
      </classpath>
      <batchtest todir="${build.reports}">
        <fileset dir="${build.classes}">
          <exclude name="**/test/Abstract*TestCase.class"/>
          <exclude name="org/apache/avalon/excalibur/datasource/test/DataSourceTestCase.class" unless="test.jdbc"/>
          <include name="**/test/*Profile.class" if="test.profile"/>
          <include name="**/test/*TestCase.class"/>
        </fileset>
        <fileset dir="${build.scratchpad}">
          <include name="org/apache/avalon/excalibur/i18n/test/AbstractBundleTestCase.class"/>
        </fileset>
        <fileset dir="${build.scratchpad}">
          <exclude name="**/test/Abstract*TestCase.class"/>
          <include name="**/test/*Profile.class" if="test.profile"/>
          <include name="**/test/*TestCase.class"/>
          <exclude name="**/test/*PerformanceTestCase.class" unless="test.profile"/>
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${build.reports}">
      <fileset dir="${build.reports}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${build.testdocs}"/>
    </junitreport>
  </target>

  <!-- Creates the clutil.jar file -->
  <target name="compile-clutil" depends="prepare">

    <mkdir dir="${build.classes}"/>

    <javac srcdir="${java.dir}"
           destdir="${build.classes}"
           debug="${build.debug}"
           optimize="${build.optimize}"
           deprecation="${build.deprecation}"
           target="1.2">
      <include name="org/apache/avalon/excalibur/cli/*" />
    </javac>
  </target>

  <target name="jar-clutil" depends="compile-clutil">
    <mkdir dir="${build.lib}"/>
    <jar file="${build.lib}/clutil.jar" basedir="${build.classes}">
      <include name="org/apache/avalon/excalibur/cli/*" />
      <exclude name="org/apache/avalon/excalibur/cli/test/*" />
    </jar>
  </target>

  <!-- Create the API documentation -->
  <target name="javadocs" depends="prepare-jdbc" description="generates the API documentation">

    <delete dir="${build.javadocs}"/>
    <mkdir dir="${build.javadocs}"/>

    <mkdir dir="${build.src}"/>
            
    <!-- Copy patched versions of JdbcConnection classes -->
    <copy file="${java.dir}/org/apache/avalon/excalibur/datasource/AbstractJdbcConnection.java"
        tofile="${build.src}/org/apache/avalon/excalibur/datasource/AbstractJdbcConnection.java"
        filtering="yes"/>
    <copy file="${java.dir}/org/apache/avalon/excalibur/datasource/JdbcConnection.java"
        tofile="${build.src}/org/apache/avalon/excalibur/datasource/JdbcConnection.java"
        filtering="yes"/>
            
    <!-- Ugly hack work around to remove duplicates
    of JdbcConnection so javadoc won't be confused -->
    <copy todir="${build.src}">
      <fileset dir="${java.dir}">
        <!-- copied above with filters -->
        <exclude name="org/apache/avalon/excalibur/datasource/AbstractJdbcConnection.java"/>
        <exclude name="org/apache/avalon/excalibur/datasource/JdbcConnection.java"/>
        
        <!-- not wanted for javadocs -->
        <exclude name="org/apache/avalon/excalibur/datasource/Jdbc3Connection.java"/>
        <exclude name="org/apache/avalon/excalibur/datasource/Jdbc2Connection.java"/>
        <exclude name="org/apache/avalon/excalibur/datasource/J2eeDataSource.java"
                 unless="j2ee.present"/>
        <exclude name="org/apache/avalon/excalibur/datasource/InformixDataSource.java"
                 unless="informix.present"/>
      </fileset>
    </copy>

    <javadoc packagenames="org.apache.*"
             sourcepath="${build.src}"
             destdir="${build.javadocs}">
      <classpath refid="project.class.path" />
      <doclet name="com.sun.tools.doclets.standard.Standard">
       <param name="-author"/>
       <param name="-version"/>
       <param name="-doctitle" value="${Name}"/>
       <param name="-windowtitle" value="${Name} API"/>
       <param name="-bottom"
              value="&quot;Copyright &#169; 2001 Apache Jakarta Project. All Rights Reserved.&quot;"/>
      </doclet>
    </javadoc>

    <delete dir="${build.src}"/>

  </target>

  <!-- Create the Local API documentation -->
  <target name="local-javadocs" depends="javadocs">

    <delete dir="${javadocs.dir}"/>
    <mkdir dir="${javadocs.dir}"/>

    <copy todir="${javadocs.dir}">
      <fileset dir="${build.javadocs}" />
    </copy>

  </target>

  <target name="local-docs" depends="local-javadocs,docs">
    <copy todir="${docs.dir}">
      <fileset dir="${build.docs}"/>
    </copy>
  </target>

  <!-- Update the www directory -->
  <target name="site-docs" depends="local-docs">

    <!-- delete all old documents but keep CVS directories -->
    <!-- note that by doing an include the defaultexcludes (CVS dirs) will be kept -->
    <!-- may not exist, so don't fail -->
    <delete quiet="yes">
      <fileset dir="${www.dir}">
        <include name="**"/>
      </fileset>
    </delete>

    <mkdir dir="${www.dir}"/>
    <copy todir="${www.dir}">
      <fileset dir="${docs.dir}" />
    </copy>

  </target>

  <!-- Create the announcements -->
  <target name="announcement" depends="setup-properties">

    <filter token="Name" value="Avalon Excalibur"/>
    <filter token="name" value="excalibur"/>
    <filter token="version" value="${version}"/>
    <filter token="year" value="${year}"/>
    <filter token="status" value="${status}"/>
    <filter token="release" value="${release}"/>
    <filter token="short-version" value="${short.version}"/>

    <mkdir dir="${build.dir}" />
    <mkdir dir="${dist.base}" />
    <mkdir dir="${build.xdocs}" />

    <!-- Copy files from jakarta-avalon src/documentation -->
    <copy todir="${build.context}" filtering="on">
      <fileset dir="${context.dir}">
        <exclude name="**/*.gif"/>
        <exclude name="**/*.jpg"/>
        <exclude name="**/*.png"/>
        <exclude name="xdocs/**"/> <!-- use xdocs from excalibur -->
      </fileset>
    </copy>
    <copy todir="${build.context}" filtering="off">
      <fileset dir="${context.dir}">
        <include name="**/*.gif"/>
        <include name="**/*.jpg"/>
        <include name="**/*.png"/>
        <exclude name="xdocs/**"/> <!-- use xdocs from excalibur -->
      </fileset>
    </copy>
        
    <!-- Copy files from jakarta-avalon-excalibur src/xdocs -->
    <copy todir="${build.xdocs}" filtering="on">
      <fileset dir="${xdocs.dir}">
        <include name="announcement.xml" />
        <include name="changes.xml" />
        <include name="dtd/*" />
      </fileset>
    </copy>

    <style style="${announce2txt}" in="${build.context}/xdocs/announcement.xml"
           out="Announcement.txt"/>
    <style style="${announce2header}" in="${build.context}/xdocs/announcement.xml"
           out="${dist.base}/HEADER.html"/>
    <style style="${announce2readme}" in="${build.context}/xdocs/announcement.xml"
           out="${dist.base}/README.html"/>
    <style style="${announce2site}" in="${build.context}/xdocs/announcement.xml"
           out="jakarta-news.xml"/>

  </target>

  <!-- Creates all the .jar files -->
  <target name="all" depends="compile" description="generates the Excalibur jar files">

    <mkdir dir="${build.lib}"/>

    <jar jarfile="${build.lib}/avalon-${name}.jar" basedir="${build.classes}">
      <include name="org/apache/avalon/excalibur/**"/>
      <exclude name="**/test/*"/>
      <exclude name="ListTest*"/>
    </jar>

    <jar jarfile="${build.lib}/${scratchpad.name}.jar" basedir="${build.scratchpad}">
      <include name="org/apache/avalon/excalibur/**"/>
      <exclude name="**/test/*"/>
      <exclude name="ListTest*"/>
    </jar>

  </target>

  <target name="install" depends="all,install-check-cjan">

    <mkdir dir="${cjan.lib}" />
    <copy file="${build.lib}/avalon-excalibur.jar" todir="${cjan.lib}"/>
    <copy file="${build.lib}/${scratchpad.name}.jar" todir="${cjan.lib}"/>

  </target>

  <target name="install-check-cjan" unless="cjan.lib">
    <fail message="cjan.lib not specified." />
  </target>

  <target name="uninstall" depends="install-check-cjan">
    <delete file="${build.lib}/avalon-excalibur.jar" dir="${cjan.lib}"/>
    <delete file="${build.lib}/${scratchpad.name}.jar" dir="${cjan.lib}"/>
  </target>

  <!-- Create the distribution -->
  <target name="dist-base" depends="all,javadocs,test-report">

    <mkdir dir="${dist.dir}"/>
    <copy file="${build.lib}/avalon-excalibur.jar" tofile="${dist.dir}/avalon-excalibur-${version}.jar"/>

    <copy file="${build.lib}/${scratchpad.name}.jar" tofile="${dist.dir}/${scratchpad.name}-${version}.jar"/>
    <copy file="${logkit.jar}" todir="${dist.dir}"/>
    <copy file="${framework.jar}" todir="${dist.dir}"/>

    <mkdir dir="${dist.docs}"/>
    <mkdir dir="${dist.javadocs}"/>
    <mkdir dir="${dist.docs}/test"/>

    <copy todir="${dist.docs}/test">
       <fileset dir="${build.testdocs}"/>
    </copy>

<!--
    <copy todir="${dist.docs}">
      <fileset dir="${build.docs}"/>
    </copy>
-->

    <copy todir="${dist.javadocs}">
      <fileset dir="${build.javadocs}"/>
    </copy>

    <copy todir="${dist.dir}">
      <fileset dir=".">
        <include name="README.txt"/>
        <include name="LICENSE.txt"/>
        <include name="KEYS"/>
      </fileset>
    </copy>

    <chmod dir="${dist.dir}" perm="go-rwx" />

  </target>

  <target name="printerdocs" depends="javadocs"
        description="generates the Excalibur printer documentation">
    <echo message="Printer friendly docs are not yet implemented"/>
  </target>

  <!-- Prepares the documentation directory -->
  <target name="docs" depends="javadocs" description="generates the Excalibur documentation">

    <mkdir dir="${build.context}"/>
    <mkdir dir="${build.xdocs}"/>
    <mkdir dir="${build.docs}"/>
    <mkdir dir="${build.dir}/work"/>

    <!-- Base pointers for non-xdocs documentation. Override these in .ant.properties to link to local docs -->
    <property name="avalon.base" value="http://jakarta.apache.org/avalon"/>
    <property name="framework.base" value="http://jakarta.apache.org/avalon/framework"/>
    <property name="phoenix.base" value="http://jakarta.apache.org/avalon/phoenix"/>
    <property name="cornerstone.base" value="http://jakarta.apache.org/avalon/cornerstone"/>
    <property name="logkit.base" value="http://jakarta.apache.org/avalon/logkit"/>
    <property name="testlet.base" value="http://jakarta.apache.org/avalon/testlet"/>

    <filter token="year" value="${year}"/>
    <filter token="AVALON_BASE" value="${avalon.base}"/>
    <filter token="FRAMEWORK_BASE" value="${framework.base}"/>
    <filter token="PHOENIX_BASE" value="${phoenix.base}"/>
    <filter token="CORNERSTONE_BASE" value="${cornerstone.base}"/>
    <filter token="LOGKIT_BASE" value="${logkit.base}"/>
    <filter token="TESTLET_BASE" value="${testlet.base}"/>

    <!-- Copy files from jakarta-avalon src/documentation -->
    <copy todir="${build.context}" filtering="on">
      <fileset dir="${context.dir}">
        <exclude name="**/*.gif"/>
        <exclude name="**/*.jpg"/>
        <exclude name="**/*.png"/>
        <exclude name="xdocs/**"/> <!-- use xdocs from excalibur -->
      </fileset>
    </copy>
    <copy todir="${build.context}" filtering="off">
      <fileset dir="${context.dir}">
        <include name="**/*.gif"/>
        <include name="**/*.jpg"/>
        <include name="**/*.png"/>
        <exclude name="xdocs/**"/> <!-- use xdocs from excalibur -->
      </fileset>
    </copy>
        
    <!-- Copy files from jakarta-avalon-excalibur src/xdocs -->
    <copy todir="${build.xdocs}" filtering="on" overwrite="yes">
      <fileset dir="${xdocs.dir}">
        <exclude name="**/*.dia" />
        <exclude name="**/*.png" />
      </fileset>
    </copy>
    <copy todir="${build.xdocs}" filtering="off">
      <fileset dir="${xdocs.dir}">
        <include name="**/*.dia" />
        <include name="**/*.png" />
      </fileset>
    </copy>

    <java classname="org.apache.cocoon.Main" fork="true">
      <arg value="-c${build.context}/"/>
      <arg value="-d${build.docs}"/>
      <arg value="-w${build.dir}/work"/>
      <arg value="-l${build.dir}/work/cocoon.log"/>
      <arg value="-uINFO"/>
      <arg value="-f${xdocs.dir}/excalibur.uris"/>
      <classpath>
        <path refid="tools.class.path"/>
        <fileset dir="${tools.dir}/ext"/>
      </classpath>
    </java>
  </target>

  <!-- Create the source distribution -->
  <target name="src-dist" depends="setup-properties">

    <mkdir dir="${src.dist.dir}" />

    <copy todir="${src.dist.tools}">
      <fileset dir="${tools.dir}"/>
    </copy>

    <copy todir="${src.dist.lib}">
      <fileset dir="${lib.dir}">
        <include name="bytecode.jar" />
        <include name="jdom.jar" />
      </fileset>
    </copy>

    <copy file="${logkit.jar}" todir="${src.dist.lib}"/>
    <copy file="${framework.jar}" todir="${src.dist.lib}"/>

    <copy todir="${src.dist.src}">
      <fileset dir="${src.dir}"/>
    </copy>

<!--
    <copy todir="${src.dist.docs}">
      <fileset dir="${build.docs}"/>
    </copy>
-->

    <copy todir="${src.dist.javadocs}">
      <fileset dir="${build.javadocs}"/>
    </copy>

    <copy todir="${src.dist.dir}">
      <fileset dir=".">
        <include name="README.txt"/>
        <include name="LICENSE.txt"/>
        <include name="build.bat"/>
        <include name="build.sh"/>
        <include name="build.xml"/>
      </fileset>
    </copy>

    <fixcrlf srcdir="${src.dist.dir}" includes="build.sh" eol="lf"/>
    <fixcrlf srcdir="${src.dist.dir}" includes="build.bat" eol="crlf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="*.sh" eol="lf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="ant" eol="lf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="antRun" eol="lf"/>
    <fixcrlf srcdir="${src.dist.tools}/bin" includes="*.bat" eol="crlf"/>

    <chmod perm="+x">
      <fileset dir="${src.dist.dir}">
        <include name="build.sh" />
      </fileset>
    </chmod>

    <fixcrlf srcdir="${src.dist.src}/java" includes="**/*.java" eol="lf"/>

    <chmod dir="${src.dist.dir}" perm="go-rwx" />

  </target>

  <!-- Completely build all dists -->
  <target name="dist" depends="announcement,site-docs"
        description="generates the Excalibur distribution">
    <mkdir dir="${dist.base}"/>

    <antcall target="dist-base">
      <param name="dist.dir" value="${dist.name}" />
    </antcall>

    <copy file="${build.lib}/avalon-excalibur.jar" tofile="${tools.dir}/ext/avalon-excalibur.jar"/>

    <copy todir="${dist.name}/docs">
      <fileset dir="${docs.dir}"/>
    </copy>

    <zip file="${dist.base}/${dist.name}-bin.zip"
         basedir="${dist.name}/.."
         includes="${dist.name}/**"/>

    <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-bin.tar">
      <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
        <include name="${dist.name}/**"/>
      </tarfileset>
    </tar>

    <gzip zipfile="${dist.base}/${dist.name}-bin.tar.gz"
          src="${dist.base}/${dist.name}-bin.tar"/>

    <delete file="${dist.base}/${dist.name}-bin.tar"/>
    <delete dir="${dist.name}" />

    <antcall target="src-dist">
      <param name="src.dist.dir" value="${dist.name}" />
    </antcall>

    <copy todir="${dist.name}">
      <fileset dir="${src.dist.dir}"/>
    </copy>

    <delete dir="${src.dist.dir}"/>

    <zip file="${dist.base}/${dist.name}-src.zip"
         basedir="${dist.name}/.."
         includes="${dist.name}/**"/>

    <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-src.tar" >
      <tarfileset dir="${dist.name}/.." mode="755" username="avalon" group="avalon">
        <include name="${dist.name}/build.sh"/>
      </tarfileset>
      <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
        <include name="${dist.name}/**"/>
        <exclude name="${dist.name}/build.sh"/>
      </tarfileset>
    </tar>

    <gzip zipfile="${dist.base}/${dist.name}-src.tar.gz"
          src="${dist.base}/${dist.name}-src.tar"/>

    <delete file="${dist.base}/${dist.name}-src.tar"/>
    <delete dir="${dist.name}" />

  </target>

  <!-- Cleans up build and distribution directories -->
  <target name="clean" depends="setup-properties" description="cleans up the created directories">
    <delete dir="${build.dir}" />
    <delete dir="${dist.dir}" />
    <delete dir="test" /> <!-- unit testing output directory -->
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
  </target>

  <!-- Cleans absolutely everything up -->
  <target name="distclean" depends="clean" description="cleans up all generated files and directories">
    <delete dir="${docs.dir}" />
    <delete dir="${dist.base}" />
    <delete dir="${src.dist.dir}" />
    <delete>
      <fileset dir=".">
        <include name="Announcement.txt" />
        <include name="jakarta-news.xml" />
        <include name="junit*.properties" />
        <include name="test.log" />
      </fileset>
    </delete>
  </target>

</project>
