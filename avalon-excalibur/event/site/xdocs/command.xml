<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->

<document>
  <header>
    <title>Excalibur Event - Command</title>
    <authors>
      <person name="Berin Loritsch" email="bloritsch@apache.org"/>
    </authors>
  </header>
  <body>
    <section><title>Why Command Was Created</title>
      <p>
        Command was created as a way to offload management functions
        to a CommandManager which would execute the functions in the
        background.  The benefits of this approach are tremendous
        when you are handling several requests at the same time.  As
        load increases, you don't increase the frequency in which
        certain functions are performed (as in the normal synchronous
        management), and you reduce the time for the critical path
        to execute.  The critical path is the part of your code that
        actually solves your problems as opposed to managing resources.
      </p>
    </section>
    <section><title>When To Use Command</title>
      <p>
        A better question might be "when should I not to use Command?".
        The complexity of the thread management and command timing is
        completely hidden from you.  That makes Command as easy to
        use as any event based system like Swing.  That said, if you
        have a really trivial system, or you do not work with heavy
        request loads it is definitely easier to design your system
        the old fashioned way.  If you do expect your application to
        work under heavy load, you will find Command to be indespensible.
      </p>
    </section>
    <section><title>Core Concepts</title>
      <p>
        Command is built on top of <link href="event.html">Event</link>.
        That means we use a Command Sink to enqueue Commands for the
        CommandManager to process.  The CommandManager then executes the
        commands as they are pulled off of the queue.  A Command can be
        a repeating command, so CommandManager will automatically requeue
        that command for you.
      </p>
      <section><title>Command</title>
        <p>
          A Command is an object that performs any function you desire.
          You create it by simply implementing the Command interface.
          There are three types of commands: a generic command that is
          executed immediately in a background thread, a delayed command
          that is executed after a specified period of time, and a
          repeated command that is executed again and again until the
          Command Manager is shut down.
        </p>
      </section>
      <section><title>Command Manager</title>
        <p>
          The Command Manager takes care of processing both Commands
          and Signals.  With Signals, it will notify the registered
          Signal listener.  With commands it schedules their execution
          in a background thread.
        </p>
      </section>
      <section><title>Thread Manager</title>
        <p>
          A Thread Manager takes care of the threading policy for the
          Command Manager.  It manages the thread pool size, and how
          often the Event Pipeline (the path from a Source to an
          EventHandler) is checked.
        </p>
      </section>
    </section>
  </body>
  <footer>
    <legal>
      Copyright (c) @year@ The Jakarta Apache Project All rights reserved.
      $Revision: 1.4 $ $Date: 2003/10/26 12:38:41 $
    </legal>
  </footer>
</document>
