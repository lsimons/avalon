<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->

<document>
  <header>
    <title>Excalibur Event - How To Use MPool</title>
    <authors>
      <person name="Berin Loritsch" email="bloritsch@apache.org"/>
    </authors>
  </header>
  <body>
    <section><title>Setting Up the PoolManager</title>
      <p>
        In order to set up a CommandManager.  For those instructions,
        follow <link href="command-howto.html">the Command "How To"</link>.
        From there, you want to set up the PoolManager using the following
        code:
      </p>
      <source>
        <![CDATA[
// Using the CommandManager in the variable "commandManager"

PoolManager poolManager = new DefaultPoolManager( commandManager );
        ]]>
      </source>
    </section>
    <section><title>Creating Your Pool</title>
      <p>
        The PoolManager is responsible for manufacturing managed pools,
        and for managing their sizes.  All PoolManager managed pools are
        "soft" limiting.  They will continue to grow while they are being
        accessed heavily, but it will shrink during times of inactivity.
        To create your pool, use the following code:
      </p>
      <source>
        <![CDATA[
int initialEntries = 20;
ObjectFactory objectFactory = new MySpecialObjectFactory();

Pool managedPool = poolManager.getManagedPool( objectFactory, initialEntries );
        ]]>
      </source>
      <section><title>Writing an ObjectFactory</title>
        <p>
          Writing an Object Factory is not that difficult.  You just need to
          implement the ObjectFactory interface.  Below is an example
          implementation:
        </p>
          <source>
            <![CDATA[
public class MySpecialObjectFactory implements ObjectFactory
{
    private final Class m_mySpecialClass;

    /** Create default object type */
    public MySpecialObjectFactory()
    {
        this( MySpecialObject.class );
    }

    /** Create generic object type */
    public MySpecialObjectFactory( Class specialClass )
    {
        if ( null == specialClass )
        {
            throw new IllegalArgumentException ("Class cannot be null");
        }

        m_mySpecialClass = specialClass;
    }

    /** Implement the getCreatedClass() method */
    public Class getCreatedClass()
    {
        return m_mySpecialClass;
    }

    /** Create an instance */
    public Object newInstance()
        throws Exception
    {
        return getCreatedClass().newInstance();
    }

    /** Dispose of an instance */
    public void dispose( Object obj )
    {
        // perform permanent cleanup code
    }
}
            ]]>
          </source>
      </section>
      <section><title>Unmanaged Pools</title>
        <p>
          There are two unmanaged pool types in MPool:
          FixedSizePool and BlockingFixedSizePool.  They are
          similar to one another, but differ in how they respond
          to insufficient resources.  The FixedSizePool fails fast,
          and throws an exception.  The BlockingFixedSizePool tries
          to wait for a specified number of milliseconds.
        </p>
        <p>
          The Fixed Size Pools are not managed because they will only
          have a certain number of pooled objects at any time.  They
          will never grow or shrink.  They are useful for instances
          where the number of elements are known in advanced.  One
          example is a JDBC connection pool because some vendors require
          you to pay per connection licensing fees.
        </p>
      </section>
    </section>
    <section><title>Using the Pool</title>
      <p>
        Using the pools is quite simple:
      </p>
      <source>
        <![CDATA[
Object pooledResource = managedPool.acquire();

// do whatever I want with the pooled resource

managedPool.release( pooledResource );
        ]]>
      </source>
      <p>
        What if we have an object that needs to perform some simple
        cleanup?  Have your Object implement the <code>Resettable</code>
        interface.  What if we are migrating from the old Pool package?
        You don't have to do anything.  MPool knows about the old Pool
        package, and will check for its recyclable method.  It will only
        call the Resettable.reset() method if your object implements both
        interfaces.  Both of these will work:
      </p>
      <source>
        <![CDATA[
import org.apache.excalibur.mpool.Resettable;

public class ResettableObject implements Resettable
{
    // All the methods and stuff for the real object...

    public void reset()
    {
        // perform small cleanup code...
    }
}
        ]]>
      </source>
      <source>
        <![CDATA[
import org.apache.avalon.excalibur.pool.Recyclable;

public class ResettableObject implements Recyclable
{
    // All the methods and stuff for the real object...

    public void recycle()
    {
        // perform small cleanup code...
    }
}
        ]]>
      </source>
    </section>
  </body>
  <footer>
    <legal>
      Copyright (c) @year@ The Jakarta Apache Project All rights reserved.
      $Revision: 1.5 $ $Date: 2003/10/26 12:38:41 $
    </legal>
  </footer>
</document>
