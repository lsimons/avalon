/*
 * Copyright (C) The Apache Software Foundation. All rights reserved.
 *
 * This software is published under the terms of the Apache Software License
 * version 1.1, a copy of which has been included with this distribution in
 * the LICENSE.txt file.
 */

package org.apache.excalibur.event.socket.http;

import java.io.IOException;

import org.apache.excalibur.event.SinkException;
import org.apache.excalibur.event.socket.AbstractAsyncSocketErrorEvent;
import org.apache.excalibur.event.socket.ConnectionCloggedEvent;
import org.apache.excalibur.event.socket.ConnectionClosedEvent;
import org.apache.excalibur.event.socket.ConnectionDrainedEvent;
import org.apache.excalibur.event.socket.ConnectionFlushedEvent;
import org.apache.excalibur.event.socket.tcp.AsyncTcpConnection;
import org.apache.excalibur.event.socket.tcp.IncomingPacket;
import org.apache.excalibur.event.socket.tcp.ListenSuccessEvent;

/**
 * An HttpConnectorHandler is a handler interface for HttpConnectors.
 * They accept all events generated by asynchronous and staged
 * tcp/ip sockets.
 *
 * @version $Revision: 1.1 $
 * @author  <a href="mailto:schierma@users.sourceforge.net">schierma</a>
 */
public interface HttpConnectorHandler
{
    String ROLE = HttpConnectorHandler.class.getName();
    
    /**
     * Handles the request to close the connector specified
     * in the request object
     * @since Sep 25, 2002
     * 
     * @param request
     *  The request to close the specified connector 
     */
    void close(CloseRequest request);
    
    /**
     * Handles the request to open the connector specified
     * in the request object
     * @since Sep 25, 2002
     * 
     * @param request
     *  The request to open the specified connector 
     * @throws IOException
     *  In case of an error opening the connector
     */
    void open(OpenRequest request) 
        throws SinkException, IOException;

    /**
     * The server receives incoming data packets through this
     * listener if he starts the reading process on the
     * accepted connection with the server's sink.
     * @since Sep 25, 2002
     * 
     * @param incomingPacket
     *  The data received from reading the connection
     * @throws IOException
     *  In case of an error reading the packet
     * @throws SinkException
     *  In the case an error occurs enqueueing forwarding 
     *  events
     */
    void receive(IncomingPacket incomingPacket) 
        throws SinkException, IOException;
    
    /**
     * Accepts connections coming in from clients.
     * @since Sep 25, 2002
     * 
     * @param connection
     *  A tcp/ip connection accpted by the server
     * @throws IOException
     *  In case of an error reading the packet
     * @throws SinkException
     *  In the case an error occurs enqueueing forwarding 
     *  events
     */
    void accept(AsyncTcpConnection connection)
        throws SinkException, IOException;

    /**
     * Reports socket error events to the server to be 
     * handled (for example reported back to the user).
     * @since Sep 25, 2002
     * 
     * @param event
     *  A socket error event of some sort to be handled.
     */
    void socketError(AbstractAsyncSocketErrorEvent event);

    /**
     * Reports that the connection was drained (flushed).
     * @since Sep 25, 2002
     * 
     * @param event
     *  A connection drained event reporting the flushing
     *  of the attached connection.
     */
    void connectionDrained(ConnectionDrainedEvent event);

    /**
     * Reports that the connection is clogged and the element
     * that clogged the connection.
     * @since Sep 25, 2002
     * 
     * @param event
     *  A connection clogged event reporting the clogged state
     *  of the associated connection.
     */
    void connectionClogged(ConnectionCloggedEvent event);
    
    /**
     * Reports that the connection was successfully flushed.
     * @since Sep 25, 2002
     * 
     * @param event
     *  A connection clogged event reporting that the connection 
     *  was successfully flushed.
     */
    void connectionFlushed(ConnectionFlushedEvent event);

    /**
     * Reports that the connection was successfully closed.
     * @since Sep 25, 2002
     * 
     * @param event
     *  A connection closed event reporting that the connection 
     *  was successfully closed.
     */
    void connectionClosed(ConnectionClosedEvent event);

    /**
     * Reports that the server started listening on the 
     * specified port for incoming connections.
     * @since Sep 25, 2002
     * 
     * @param event
     *  A listen success event reporting that the server 
     *  started listening on the specified port for incoming 
     *  connections.
     */
    void listenSuccess(ListenSuccessEvent event);

}
