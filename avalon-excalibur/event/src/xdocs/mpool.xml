<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->

<document>
  <header>
    <title>Excalibur Event - MPool (Managed Pool)</title>
    <authors>
      <person name="Berin Loritsch" email="bloritsch@apache.org"/>
    </authors>
  </header>
  <body>
    <section><title>Why MPool Was Created</title>
      <p>
        MPool (Managed Pool) was created as an experiment in dynamic
        pool management.  The theory is that by determining whether to
        shrink or grow a pool can be a costly endeavor.  That is
        especially true when you want to play with "intelligent" pools.
      </p>
      <p>
        What we observed after we used MPool in practice is that under
        load, pool sizing algorithms begin to choke the efficiency of
        the pool.  In fact, it can get so bad that it would be better
        not to have a pool at all.  An unbounded pool (one that does
        not shrink) is a resource hog, especially during inactive times.
        By moving the pool sizing logic into an asyncronous Command,
        we were able to achieve the efficiency of an unbounded pool
        while keeping an eye on pool size.  During times of inactivity
        we destroy pooled objects that we don't need.  During times of
        stress, we create a new object immediately and in a background
        process we add new objects.
      </p>
    </section>
    <section><title>When To Use MPool</title>
      <p>
        Use MPool any time you need a pool without hard limits, and you
        expect heavy loads.  The pool size is checked periodically, so
        we don't incur extra overhead of having to check that while the
        pool size grows and shrinks.
      </p>
    </section>
    <section><title>Core Concepts</title>
      <p>
        MPool has two pool types: fixed size and variable size.  A fixed
        size pool is not managed externally.  There is a fixed limit to
        the number of resources it can manage so we don't have to manage
        it.  A variable sized pool is a managed pool.  A managed pool will
        be created by the PoolManager, and that manager will manage all
        of its pool sizes in the background.
      </p>
      <section><title>Object Factory</title>
        <p>
          An Object Factory is what the pools use to create new objects
          or destroy old ones.  They are particularly helpful when there
          is a complex creation/destruction policy.  They are also essential
          for ManageablePools.
        </p>
      </section>
      <section><title>Pool</title>
        <p>
          The base Pool interface is how the client code interacts with
          the pool.  You acquire and release pooled objects from the
          pool.
        </p>
      </section>
      <section><title>Managable Pool</title>
        <p>
          A Managable Pool is a special interface that allows a PoolManager
          to register itself with a "magic key" so that the managed pool
          only responds to the PoolManager responsible for it.
        </p>
      </section>
      <section><title>Pool Manager</title>
        <p>
          The Pool Manager is how you obtain a Managable Pool.  It also
          takes care of the management functions for that pool.
        </p>
      </section>
    </section>
  </body>
  <footer>
    <legal>
      Copyright (c) @year@ The Jakarta Apache Project All rights reserved.
      $Revision: 1.5 $ $Date: 2003/10/26 12:38:41 $
    </legal>
  </footer>
</document>
