<?xml version="1.0"?>

<!--
    Issue the command 'maven excalibur:info' for more information
    about this file.
-->

<project default="excalibur:info"
    xmlns:j="jelly:core"
    xmlns:ant="jelly:ant"
    xmlns:maven="jelly:maven">

    <!-- ==========================================================
          Documentation
         ========================================================== -->

    <goal name="excalibur:header">
        <ant:echo>
===================================================================
 Avalon Excalibur Build System, the Maven Edition
===================================================================
        </ant:echo>
    </goal>

    <goal name="excalibur:info"
            description="Build documentation kept right in the buildfile">

        <attainGoal name="excalibur:header"/>
<ant:echo>
                              !!! WARNING !!!

    excalibur is built using ant; the maven build system is still in
    development. *DO NOT USE IT* unless you're helping out with
    setting it up or testing it.

    Also note that not all the functionality described here is actually
    in place. This is the "Write Docs First" paradigm, lacking a way to
    write buildfile unit tests ;)
    ===================================================================

    Building a single component
    ===========================

    Change into the component's subdirectory, and use maven as normal.
    Common usage includes:

        maven java:jar      # builds the jar
        maven site          # builds the website, including javadocs
        maven dist          # builds source and binary distributions

    Building all components
    =======================

    Change into the main excalibur directory and use one of the goals
    listed below. A maven reactor will be started
    to build all components. Available goals:

        maven excalibur:jars      # builds all jars
        maven excalibur:site      # builds the website, including javadocs
        maven excalibur:dist      # builds source and binary distributions


    Special goals
    =============

    These are nonstandard goals available from the main excalibur
    directory:

        maven excalibur:info
            # echo the documentation you're reading now

        maven excalibur:seed
            # create a new component; see below for more info

        maven excalibur:write-gump-module.xml
            # create a module descriptor for gump; see below for more info

    Creating a distribution
    =======================

    All project.xml files normally specify a <version/> ending in
    '-dev'. When building files to upload to www.apache.org/dist,
    you should override this. To do so, pass in an override.version
    property:

        maven -Doverride.version=1.3 dist

    Now, manually inspect the generated distributions to make sure
    they are correct. Drop them into a few environments (a cocoon
    installation, a phoenix installation, etc) and make sure everything
    still works as normal.

    Next, you should sign releases using PGP. See

        http://nagoya.apache.org/wiki/apachewiki.cgi?SigningReleases

    for documentation on how to do so. This is not an optional step:
    the build will assure further on that there are .asc files for
    every release.

    Once you are satisfied that the release is correct, you need to
    upload the file to the official avalon distribution location.
    This requires an SSH account on the daedalus.apache.org
    installation, a working 'scp' command on your path, and a running
    ssh-agent (like the ssh-agent program that comes with OpenSSH or
    the Pageant utility that comes with Putty) so you do not have to
    enter your SSH key password.
    To upload the files, run the 'excalibur:deploy' target inside
    the component subdirectory, again making sure to override the
    version:

        maven -Doverride.version=1.3 excalibur:deploy

    If your username on the daedalus.apache.org machine is not the same
    as your local username, you can override it using the
    'maven.username' variable:

        maven -Doverride.version=1.3 -Dmaven.username=johndoe excalibur:deploy

    In addition to uploading the distributions, this will also result
    in a file named target/announcement-1.3.txt, containing an auto-
    generated announcement for sending to mailing lists. If you want
    to have the announcement sent to dev@avalon.apache.org and
    users@avalon.apache.org automatically, use
    '-Dsend.announce=true':

        maven -Doverride.version=1.3 -Dsend.announce=true excalibur:deploy

    If this is not an official distribution yet, but a release
    candidate, you will want to override the directory on the server
    where the files are sent to (normally
    /www/www.apache.org/dist/avalon/). To do so, specify the
    'remote.dist.dir' property:

        maven -Doverride.version=1.3 -Dremote.dist.dir=~/public_html/release-candidates excalibur:deploy

    Summary:

        maven dist -Doverride.version=1.3
            ### now check and test distributions ###
        cd target/distributions
        for i in *.zip; \
            do gpg --output $i.asc --detach-sig --armor $i; \
        done
        cd ../..
        maven -Doverride.version=1.3 \
            -Dsend.announce=true excalibur:deploy

    Adding a new component
    ======================

    The easiest way to get a new component set up is the
    'excalibur:seed' goal. This will generate a skeleton project for
    you. You need to specify a few properties:

        component.name      the human-readable name for your component
        component.id        the artifact id used for your component's
                            build artifacts (jar files, zip files, etc)
        component.dir       the name of the directory to put the
                            component in
        use.forrest         'false' if you want to use the regular
                            maven xdoc plugin rather than the forrest
                            plugin for handling your xdocs

    Example:

        maven -Dcomponent.name=My-Component \
            -Dcomponent.id=my-component \
            -Dcomponent.dir=mycomponent \
            excalibur:seed

    Note that existing files in the specified directory will *not*
    be replaced. So if you are converting an existing component to
    build using maven, you will need to remove any existing ant
    build.xml file, for example.

    Gump integration
    ================

    Since gump cannot directly call maven, this script contains
    functionality for generating basic ant buildfiles as well as gump
    descriptors.

    When you call the 'excalibur:seed' goal, a build.xml file is
    generated for you which can be called from gump. Since Gump handles
    classpath management, there is no need to do so in the buildfile,
    keeping it nice and simple.

    Once you have added dependency information to your project.xml
    file, change into the component subdirectory and run the
    'excalibur:seed-gump' target. You have to specify the
    component.dir property once again. This will generate a file
    gump-integration/project/${component.id}.xml that contains a gump
    descriptor for your component.

    Example:

        cd mycomponent
        maven excalibur:seed-gump
            -Dcomponent.dir=mycomponent

    After creating this descriptor, you still need to reference it from
    the gump module descriptor at

        gump-integration/project/avalon-excalibur.xml

    One way to do this is to autogenerate the file based on the
    contents of the 'gump-integration/project' directory:

        cd ~/cvs/avalon-excalibur/
        maven excalibur:write-gump-module.xml

    Note this won't work if the file mentioned above already exists.

    As an alternative, you can call

        maven excalibur:setup-gump

    inside the repo base directory, but this will result in
    corrupt gump definitions because the component.dir is then
    not properly set.
</ant:echo>
    </goal>

    <!-- ==========================================================
          Reactor builds
         ========================================================== -->

    <goal name="excalibur:jars"
            description="builds all jars">

        <attainGoal name="excalibur:header"/>
        <maven:reactor
          basedir="${basedir}"
          includes="*/project.xml"
          goals="java:jar"
          banner="Excalibur is building jar:"
          ignoreFailures="false"/>
    </goal>

    <goal name="excalibur:dist"
            description="builds all distributions">

        <attainGoal name="excalibur:header"/>
        <maven:reactor
          basedir="${basedir}"
          includes="*/project.xml"
          goals="dist"
          banner="Excalibur is building distribution:"
          ignoreFailures="false"/>
    </goal>

    <goal name="excalibur:site"
            description="builds all websites">

        <attainGoal name="excalibur:header"/>
        <maven:reactor
          basedir="${basedir}"
          includes="*/project.xml"
          goals="site"
          banner="Excalibur is building site:"
          ignoreFailures="false"/>
    </goal>

    <!-- ==========================================================
          Repository management
         ========================================================== -->

    <goal name="excalibur:seed"
            description="Creates a new component. Try excalibur:info for more information">

        <attainGoal name="excalibur:header"/>
        <!-- argument verification -->
        <j:set var="cname" value="${component.name}"/>
        <j:if test="${empty(cname)}">
            <ant:fail message="Please specify component.name!"/>
        </j:if>
        <j:set var="cid" value="${component.id}"/>
        <j:if test="${empty(cid)}">
            <ant:fail message="Please specify component.id!"/>
        </j:if>
        <j:set var="cdir" value="${component.dir}"/>
        <j:if test="${empty(cdir)}">
            <ant:fail message="Please specify component.dir!"/>
        </j:if>

        <!-- argument defaults -->
        <j:if test="${empty(use.forrest)}">
            <j:set var="use.forrest" value="true"/>
        </j:if>

        <!-- variables -->
        <ant:tstamp><ant:format property="current.year" pattern="yyyy"/></ant:tstamp>
        <j:set var="inception.year" value="${current.year}"/>

        <!-- debug info -->
        <ant:echo>
    Seeding new project with settings:
            component.name = ${component.name}
            component.id   = ${component.id}
            component.dir  = ${component.dir}
            inception.year = ${inception.year}

            use.forrest    = ${use.forrest}
        </ant:echo>

        <!-- create directory structure -->
        <ant:mkdir dir="${component.dir}"/>
        <ant:mkdir dir="${component.dir}/src"/>
        <ant:mkdir dir="${component.dir}/src/java"/>
        <ant:mkdir dir="${component.dir}/src/test"/>
        <ant:mkdir dir="${component.dir}/src/xdocs"/>

        <!-- write files -->
        <attainGoal name="excalibur:seed-project.xml"/>
        <attainGoal name="excalibur:seed-maven.xml"/>
        <attainGoal name="excalibur:seed-project.properties"/>
        <attainGoal name="excalibur:seed-build.xml"/>
<!-- doesn't work!        <attainGoal name="excalibur:seed-gump-project.xml"/> -->
        <attainGoal name="excalibur:seed-.cvsignore"/>

        <j:if test="${use.forrest}">
            <attainGoal name="excalibur:seed-forrest"/>
        </j:if>

        <!-- info to stdout -->
        <attainGoal name="excalibur:seed-info"/>
    </goal>

    <goal name="excalibur:seed-project.xml">
        <!-- create project.xml -->
        <ant:available file="${component.dir}/project.xml"
                property="project.exists"/>
        <j:set var="pexists" value="${project.exists}"/>
        <j:if test="${pexists}"><ant:echo>Warning: ${component.dir}/project.xml already exists!</ant:echo></j:if>
        <j:if test="${not pexists}">
        <j:file name="${component.dir}/project.xml">
        <j:whitespace xmlns="dummy">
<project>
    <extend>$${basedir}/../project-common.xml</extend>

    <name>${component.name}</name>
    <id>${component.id}</id>
    <currentVersion>1.0-dev</currentVersion>
    <inceptionYear>${inception.year}</inceptionYear>
    <shortDescription>Excalibur's ${component.name} component</shortDescription>
    <description>
This project doesn't have a description yet. Edit the file

        ${component.dir}/project.xml

to add one.
    </description>

    <dependencies>
        <!-- add dependencies here! -->
    </dependencies>

</project>
        </j:whitespace>
        </j:file>
        </j:if>
    </goal>

    <goal name="excalibur:seed-maven.xml">
        <!-- create maven.xml -->
        <ant:available file="${component.dir}/maven.xml"
                property="maven.exists"/>
        <j:set var="mexists" value="${maven.exists}"/>
        <j:if test="${mexists}"><ant:echo>Warning: ${component.dir}/maven.xml already exists!</ant:echo></j:if>
        <j:if test="${not mexists}">
        <ant:copy file="maven-template.xml" tofile="${component.dir}/maven.xml"/>
        </j:if>
    </goal>

    <goal name="excalibur:seed-project.properties">
        <!-- create project.properties -->
        <ant:available file="${component.dir}/project.properties"
                property="props.exists"/>
        <j:set var="prexists" value="${props.exists}"/>
        <j:if test="${prexists}"><ant:echo>Warning: ${component.dir}/project.properties already exists!</ant:echo></j:if>
        <j:if test="${not prexists}">
        <ant:echo file="${component.dir}/project.properties">
# -------------------------------------------------------------------
# P R O J E C T  P R O P E R T I E S
# -------------------------------------------------------------------
maven.repo.remote = http://lsd.student.utwente.nl/repository,http://www.apache.org/dist/avalon,http://www.ibiblio.org/maven

# gump integration
project.name=${component.id}
        </ant:echo>
        </j:if>
    </goal>

    <goal name="excalibur:seed-build.xml">
        <!-- create build.xml for gump integration-->
        <ant:available file="${component.dir}/build.xml"
                property="build.exists"/>
        <j:set var="bexists" value="${build.exists}"/>
        <j:if test="${bexists}"><ant:echo>Warning: ${component.dir}/build.xml already exists!</ant:echo></j:if>
        <j:if test="${not bexists}">
            <j:file name="${component.dir}/build.xml">
            <j:whitespace xmlns="dummy">
<!-- support for building this project using Gump. You normally
     do not need to hand-edit this file. -->
<project name="Gump Build Support - DO NOT HAND-EDIT!!!" default="warning" basedir=".">

    <property file="$${basedir}/project.properties"/>

    <!-- include the default project settings -->
    <property file="$${basedir}/../project.properties"/>
    <property file="$${basedir}/../../project.properties"/>
    <property file="$${basedir}/../../../project.properties"/>
    <property file="$${basedir}/../../../../project.properties"/>

    <!-- defers to common buildfile -->
    <target name="delegate">
        <ant antfile="../maven-common-gump-build.xml"
            target="excalibur:$${target}" inheritAll="true"
            inheritRefs="true"/>
    </target>

    <target name="warning">
        <antcall target="delegate">
            <param name="target" value="warning"/>
        </antcall>
    </target>

    <target name="jar">
        <antcall target="delegate">
            <param name="target" value="jar"/>
        </antcall>
    </target>

    <target name="javadocs">
        <antcall target="delegate">
            <param name="target" value="javadocs"/>
        </antcall>
    </target>
</project>
            </j:whitespace>
            </j:file>
        </j:if>
    </goal>

    <goal name="excalibur:seed-.cvsignore">
        <!-- create .cvsignore -->
        <ant:echo file="${component.dir}/.cvsignore">
target
*.log
*.ipr
*.iws
*.classpath
*.project
        </ant:echo>
    </goal>

    <goal name="excalibur:seed-forrest"
            description="Sets up forrest docs">

        <!-- create src/xdocs/tabs.xml -->
        <!-- always overwrite this bugger as it should be
             common to all projects! -->
        <j:file name="${component.dir}/src/xdocs/tabs.xml">
        <j:whitespace xmlns="dummy">
<tabs software="${component.name}"
title="${component.name}">

<tab label="Avalon Home" href="http://avalon.apache.org/"/>
<tab label="Framework" href="http://avalon.apache.org/framework/"/>
<tab label="Components" href="http://avalon.apache.org/components/"/>
<tab label="Phoenix" href="http://avalon.apache.org/phoenix/"/>
<tab label="SECA" href="http://avalon.apache.org/seca/"/>

</tabs>
        </j:whitespace>
        </j:file>

        <!-- create src/xdocs/book.xml -->
        <ant:available file="${component.dir}/src/xdocs/book.xml"
                property="book.exists"/>
        <j:set var="exists" value="${book.exists}"/>
        <j:if test="${mexists}"><ant:echo>Warning: ${component.dir}/src/xdocs/book.xml already exists!</ant:echo></j:if>
        <j:if test="${not exists}">
        <j:file name="${component.dir}/src/xdocs/book.xml">
        <j:whitespace xmlns="dummy">
<book software="${component.name}" title="${component.name}" copyright="${inception.year} The Apache Software Foundation">

<menu label="Essentials">
    <menu-item label="Overview" href="index.html"/>
    <menu-item label="Download" href="http://avalon.apache.org/download.cgi"/>
    <menu-item label="API Docs" href="http://avalon.apache.org/excalibur/${component.dir}/apidocs/"/>
    <menu-item label="CVS Access" href="cvs-usage.html"/>
</menu>

<menu label="Reports">
    <menu-item href="maven-reports.html" label="Maven-generated reports"/>
    <menu-item href="project-info.html" label="Maven-generated project info"/>
</menu>
</book>
        </j:whitespace>
        </j:file>
        </j:if>
    </goal>

    <goal name="excalibur:seed-info"
            description="Outlines the steps to take after seeding a new component">
        <ant:echo>
===================================================================
 Avalon Excalibur Build System, the Maven Edition
===================================================================

A blank component project has been generated for you in

            ${component.dir}/

Things you should do now:

1) edit project.xml and write a more sensible description that
describes your project.

<j:if test="${use.forrest}">
2) create ${component.dir}/src/xdocs/index.xml in the forrest
   document format to get your website started
</j:if>
<j:if test="${not use.forrest}">
2) create ${component.dir}/src/xdocs/index.xml in the anakia
   document format to get your website started
</j:if>

3) write unit tests and place them in ${component.dir}/src/test

4) write the component and place it in ${component.dir}/src/java

5) run the common maven goals ('site', 'java:jar', 'dist') on
   your project and make sure you like the results

6) add the new component to cvs, or zip it up and send it to
   dev@avalon.apache.org if you do not have write access to the
   excalibur cvs
===================================================================
        </ant:echo>
    </goal>

    <goal name="excalibur:write-gump-module.xml"
            description="creates a gump-module.xml referencing all gump-project.xml files">

        <attainGoal name="excalibur:header"/>
        <mkdir dir="gump-integration"/>
        <mkdir dir="gump-integration/project"/>

        <!-- create avalon-excalibur.xml -->
        <ant:available file="gump-integration/project/avalon-excalibur.xml"
                property="gumpmodule.exists"/>
        <j:set var="gmexists" value="${gumpmodule.exists}"/>
        <j:if test="${gmexists}"><ant:echo>Warning: gump-integration/project/avalon-excalibur.xml already exists!</ant:echo></j:if>
        <j:if test="${not gmexists}">

            <ant:fileScanner var="projectfiles">
                <ant:fileset dir="gump-integration/project/">
                    <ant:patternset>
                        <ant:include name="*.xml"/>
                        <ant:exclude name="avalon-excalibur.xml"/>
                    </ant:patternset>
                </ant:fileset>
            </ant:fileScanner>

            <j:file name="gump-integration/project/avalon-excalibur.xml">
            <j:whitespace xmlns="dummy">
<module name="avalon-excalibur">
    <url href="http://avalon.apache.org/excalibur/"/>
    <description>
      Avalon's repository of reusable components.
    </description>
    <cvs repository="avalon"/>

<j:forEach var="file" items="${projectfiles.iterator()}">
    <project href="./${file.name}"/>
</j:forEach>

</module>
            </j:whitespace>
            </j:file>
        </j:if>
    </goal>

    <goal name="excalibur:write-gump-projects"
            description="reactor that call excalibur:seed-gump on all components">

        <attainGoal name="excalibur:header"/>
<ant:echo>
    Warning: this will result in unusable descriptors;
    you will need to modify the various paths by hand!
</ant:echo>
        <maven:reactor
          basedir="${basedir}"
          includes="*/project.xml"
          goals="excalibur:seed-gump"
          banner="Excalibur is creating a gump descriptor:"
          ignoreFailures="false"/>
    </goal>

    <goal name="excalibur:setup-gump"
            description="calls the gump targets">

        <attainGoal name="excalibur:header"/>
        <attainGoal name="excalibur:write-gump-projects"/>
        <attainGoal name="excalibur:write-gump-module.xml"/>
    </goal>

</project>