
import java.io.File;

import java.util.ArrayList;
import java.util.Iterator;

import org.apache.merlin.magic.AbstractPlugin;
import org.apache.merlin.magic.Plugin;
import org.apache.merlin.magic.PluginContext;

import org.apache.avalon.framework.context.Context;
import org.apache.avalon.framework.context.Contextualizable;

import org.apache.avalon.framework.logger.AbstractLogEnabled;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.taskdefs.Copy;
import org.apache.tools.ant.taskdefs.Javac;

public class JavacPlugin extends AbstractPlugin
    implements Plugin, Contextualizable
{
    private Project m_Project;
    
    private boolean m_Compiled = false;
        
    public void compile()
    {   
        if( m_Compiled )
            return;
        notifyPreMethod( "compile" );
        copySources();
        notifyStep( "compile", "sources-copied" );
        executeCompile();    
        notifyPostMethod( "compile" );
        m_Compiled = true;
    }
    
    private void copySources()
    {
        String destdirname = m_Context.getProperty( "java.build.src.dir" );
        File toDir = new File( destdirname ); 
        String srcdirname = m_Context.getProperty( "java.src.dir" );
        File fromDir = new File( srcdirname ); 
        
        FileSet from = new FileSet();
        from.setDir( fromDir );
        from.setIncludes( "**/*" );
        toDir.mkdirs();  /* ensure that the directory exists. */

        Copy copy = (Copy) m_Project.createTask( "copy" );
        copy.setTodir( toDir );
        copy.addFileset( from );
        copy.init();
        copy.execute();
    }
    
    private void executeCompile()
    {
        String destdirname = m_Context.getProperty( "java.build.dest.dir" );
        File toDir = new File( destdirname ); 
        toDir.mkdirs();
                
        String srcdirname = m_Context.getProperty( "java.build.src.dir" );
        File fromDir = new File( srcdirname ); 
        
        String classpath = m_Context.getProperty( "java.class.path" );
        
        Javac javac = (Javac) m_Project.createTask( "javac" );
        /* Set the destination */
        javac.setDestdir( toDir );
        javac.setDeprecation( true );
        javac.setDebug( true );
        
        /* Add Class path defined in the build.properties  */
        Path cp = javac.createClasspath();
        Path.PathElement pe = cp.createPathElement();
        pe.setPath( classpath );
        /* Later; also add dependency Jars */
        
        /* Add the source path */
        Path src = javac.createSrc();
        Path.PathElement srcPE = src.createPathElement();
        srcPE.setLocation( fromDir );
        
        javac.init();
        javac.execute(); 
    }
}   
