
import java.io.File;
import java.io.IOException;

import java.util.ArrayList;
import java.util.Iterator;

import org.apache.merlin.magic.AbstractPlugin;
import org.apache.merlin.magic.Artifact;
import org.apache.merlin.magic.Plugin;
import org.apache.merlin.magic.PluginContext;

import org.apache.avalon.framework.logger.Logger;

import org.apache.avalon.framework.service.Serviceable;
import org.apache.avalon.framework.service.ServiceException;
import org.apache.avalon.framework.service.ServiceManager;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.taskdefs.Copy;
import org.apache.tools.ant.taskdefs.Javac;

public class JavacPlugin extends AbstractPlugin
    implements Serviceable
{
    private Object m_PreparePlugin;
    private Object m_ArtifactPlugin;
    private boolean m_Compiled = false;
        
    public void service( ServiceManager man )
        throws ServiceException
    {
        m_PreparePlugin = man.lookup( "prepare" );
        m_ArtifactPlugin = man.lookup( "artifact" );
    }
    
    public void compile()
        throws IOException
    {   
        if( m_Compiled )
            return;
        PreparePlugin prepare = (PreparePlugin) m_PreparePlugin;
        prepare.init();
        
        notifyPreMethod( "compile" );
        executeCompile();    
        notifyPostMethod( "compile" );
        m_Compiled = true;
    }
    
    private void executeCompile()
        throws IOException
    {
        Logger logger = getLogger();
        if( logger.isDebugEnabled() )
            logger.debug( "Starting Compile." );
            
        String destdirname = m_Context.getProperty( "java.build.dest.dir" );
        File toDir = new File( destdirname ); 
        toDir.mkdirs();
                
        String srcdirname = m_Context.getProperty( "java.build.src.dir" );
        File fromDir = new File( srcdirname ); 
        
        String classpath = m_Context.getProperty( "java.class.path" );
        
        Javac javac = (Javac) m_Project.createTask( "javac" );
        /* Set the destination */
        javac.setDestdir( toDir );
        javac.setDeprecation( true );
        javac.setDebug( true );
        
        /* Add Class path defined in the build.properties  */
        Path cp = javac.createClasspath();
        Path.PathElement pe = cp.createPathElement();
        pe.setPath( classpath );

        ArtifactPlugin ap = (ArtifactPlugin) m_ArtifactPlugin;
        String projectname = m_Context.getProjectName();
        Artifact thisArtifact = ap.resolve( projectname );
        Artifact[] deps = ap.getDependencies( thisArtifact );
        Path depPath = ap.getClassPath( deps );
        cp.add( depPath );
        
        if( getLogger().isDebugEnabled() )
            getLogger().debug( "Resolved Dependencies: " + cp.toString() );        
        
        /* Add the source path */
        Path src = javac.createSrc();
        Path.PathElement srcPE = src.createPathElement();
        srcPE.setLocation( fromDir );
        
        javac.init();
        javac.execute(); 
    }
}   
