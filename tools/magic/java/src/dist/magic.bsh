/*
Copyright 2004 The Apache Software Foundation
Licensed  under the  Apache License,  Version 2.0  (the "License");
you may not use  this file  except in  compliance with the License.
You may obtain a copy of the License at 

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed  under the  License is distributed on an "AS IS" BASIS,
WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
implied.

See the License for the specific language governing permissions and
limitations under the License.
*/

import java.io.File;
import java.io.IOException;

import java.util.ArrayList;
import java.util.Iterator;

import org.apache.avalon.magic.AbstractPlugin;
import org.apache.avalon.magic.Artifact;
import org.apache.avalon.magic.Plugin;
import org.apache.avalon.magic.PluginContext;

import org.apache.avalon.framework.logger.Logger;

import org.apache.avalon.framework.service.Serviceable;
import org.apache.avalon.framework.service.ServiceException;
import org.apache.avalon.framework.service.ServiceManager;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.taskdefs.Copy;
import org.apache.tools.ant.taskdefs.Javac;

public class JavacPlugin extends AbstractPlugin
    implements Serviceable
{
    private Object m_PreparePlugin;
    private Object m_ArtifactPlugin;
    private boolean m_Compiled = false;
        
    public void service( ServiceManager man )
        throws ServiceException
    {
        m_PreparePlugin = man.lookup( "prepare" );
        m_ArtifactPlugin = man.lookup( "artifact" );
    }
    
    public void compile()
        throws IOException
    {   
        if( m_Compiled )
            return;
        PreparePlugin prepare = (PreparePlugin) m_PreparePlugin;
        prepare.init();
        
        notifyPreMethod( "compile" );
        executeCompile();    
        notifyPostMethod( "compile" );
        m_Compiled = true;
    }
    
    private void executeCompile()
        throws IOException
    {
        Logger logger = getLogger();
        if( logger.isDebugEnabled() )
            logger.debug( "Starting Compile." );
            
        String destdirname = m_Context.getProperty( "java.build.dest.dir" );
        File toDir = new File( destdirname ); 
        toDir.mkdirs();
                
        String srcdirname = m_Context.getProperty( "java.build.src.dir" );
        File fromDir = new File( srcdirname ); 
        
        String classpath = m_Context.getProperty( "java.class.path" );
        compile( classpath, toDir, fromDir );
    }
    
    public void compile( String classpath, File destDir, File srcDir )
        throws IOException
    {
        Javac javac = (Javac) m_Project.createTask( "javac" );
        /* Set the destination */
        javac.setDestdir( destDir );
        javac.setDeprecation( true );
        javac.setDebug( true );
        
        /* Add Class path defined in the build.properties  */
        Path cp = javac.createClasspath();
        Path.PathElement pe = cp.createPathElement();
        pe.setPath( classpath );

        ArtifactPlugin ap = (ArtifactPlugin) m_ArtifactPlugin;
        String projectname = m_Context.getProjectName();
        Artifact thisArtifact = ap.resolve( projectname );
        Artifact[] deps = ap.getDependencies( thisArtifact );
        Path depPath = ap.getClassPath( deps );
        cp.add( depPath );
        
        if( getLogger().isDebugEnabled() )
            getLogger().debug( "Resolved Dependencies: " + cp.toString() );        
        
        /* Add the source path */
        Path src = javac.createSrc();
        Path.PathElement srcPE = src.createPathElement();
        srcPE.setLocation( srcDir );
        
        javac.init();
        javac.execute(); 
    }
}   
