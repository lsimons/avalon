/*
Copyright 2004 The Apache Software Foundation
Licensed  under the  Apache License,  Version 2.0  (the "License");
you may not use  this file  except in  compliance with the License.
You may obtain a copy of the License at 

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed  under the  License is distributed on an "AS IS" BASIS,
WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
implied.

See the License for the specific language governing permissions and
limitations under the License.
*/

import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.Session;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.util.LinkedList;
import java.util.List;

import org.apache.avalon.magic.AbstractPlugin;
import org.apache.avalon.magic.Artifact;

import org.apache.avalon.framework.service.Serviceable;
import org.apache.avalon.framework.service.ServiceException;
import org.apache.avalon.framework.service.ServiceManager;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.taskdefs.optional.ssh.Scp;
import org.apache.tools.ant.taskdefs.optional.ssh.SSHUserInfo;

public class ArtifactPlugin extends AbstractPlugin
    implements Serviceable
{
    private Object m_PreparePlugin;
    
    public void service( ServiceManager man )
        throws ServiceException
    {
        m_PreparePlugin = man.lookup( "prepare" );
    }
    
    public Path getClassPath( Artifact[] artifacts )
        throws IOException
    {
        Path result = new Path( m_Project );
        for( int i=0 ; i < artifacts.length ; i++ )
        {
            File localFile = artifacts[i].toLocalFile();
            Path.PathElement pe = result.createPathElement();
            pe.setLocation( localFile );
        }
        if( getLogger().isDebugEnabled() )
            getLogger().debug( "Dep Classpath: " + result );
        return result;
    }
    
    public void install( Artifact artifact, File content )
        throws IOException
    {
        try
        {
            File dest = artifact.toLocalFile();
            PreparePlugin prepare = (PreparePlugin) m_PreparePlugin;
            prepare.copyFile( content, dest );
        } catch( Exception e )
        {
            e.printStackTrace();
            throw new IOException( "Unable to install " + artifact );
        }
    }
    
    public void upload( Artifact artifact )
        throws IOException
    {
        int port = -1;
        try
        {
            port = Integer.parseInt( m_Context.getProperty( "artifact.remote.port" ) );
        } catch( NumberFormatException e )
        {} // ignore

        boolean trust = "true".equals( m_Context.getProperty( "artifact.remote.trust" ) );
        boolean failOnError = "true".equals( m_Context.getProperty( "artifact.remote.fail.on.error" ) );
        String host =       m_Context.getProperty( "artifact.remote.host" );
        String destDir =    m_Context.getProperty( "artifact.remote.dir" );
        String keyfile =    m_Context.getProperty( "artifact.remote.keys.file" );
        String knownhosts = m_Context.getProperty( "artifact.remote.knownhosts.file" );
        String passphrase = m_Context.getProperty( "artifact.remote.passphrase" );
        String password =   m_Context.getProperty( "artifact.remote.password" );
        String username =   m_Context.getProperty( "artifact.remote.username" );

        System.out.println( "    Host:" + host );
        System.out.println( "    User:" + username );
        System.out.println( "     Dir:" + destDir );
        System.out.println( " KeyFile:" + keyfile );
        System.out.println( "   Known:" + knownhosts );
        System.out.println( "  Phrase:" + passphrase );
        System.out.println( "Password:" + password );

        String fullDest = username + "@" + host + ":" + destDir + "/" + 
            artifact.getGroupId() + "/" + artifact.getType() + "s/";
            
        String source = artifact.toLocalFile().getAbsolutePath();
        upload( source, host, fullDest, keyfile, passphrase, password );
        
        // TODO:  Optimize so both files are uploaded in the same SSH session,
        //        which probably happens with Ant filesets.
        source = source + ".md5";
        upload( source, host, fullDest, keyfile, passphrase, password );
    }
    
    private void upload( String source, String host, String dest, 
        String keyfile, String passphrase, String password )
        throws IOException
    {
        try
        {
            m_Project.addTaskDefinition( "scp", Scp.class );
            Scp scp = (Scp) m_Project.createTask( "scp" );
            scp.init();
            scp.setFile( source );
            scp.setHost( host );

            if( ! "".equals( keyfile ) )
                scp.setKeyfile( keyfile );

            if( ! "".equals( knownhosts ) )
                scp.setKnownhosts( knownhosts );

            if( ! "".equals( password ) )
                scp.setPassword( password );
            else
                scp.setPassphrase( passphrase );


            if( port != -1 )
                scp.setPort( port );

            scp.setTrust( trust );

            if( ! "".equals( username ) )
                scp.setUsername( username );
            scp.setTodir( fullDest );
            
            scp.execute();
        } catch( Exception e )
        {
            e.printStackTrace();
            throw new IOException( "Can't upload " + source + " to " + dest );
        }
    }
}
   
