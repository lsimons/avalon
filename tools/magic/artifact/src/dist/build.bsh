
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.IOException;

import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.net.URLConnection;

import java.util.ArrayList;
import java.util.Iterator;

import org.apache.merlin.magic.AbstractPlugin;
import org.apache.merlin.magic.Artifact;
import org.apache.merlin.magic.Plugin;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.Path;

public class ArtifactPlugin extends AbstractPlugin
{
    public ClassLoader getClassloader( Artifact[] artifacts )
        throws IOException
    {
        URL[] jars = new URL[ artifacts.length ];
        for( int i=0 ; i < artifacts.length ; i++ )
        {
            File localFile = toLocalFile( artifacts[i] );
            if( ! localFile.exists() )
            {
                localFile.getParentFile().mkdirs();
                download( artifacts[i], localFile );
            }
            jars[i] = localFile.toURL();
        }
        URLClassLoader classloader = new URLClassLoader( jars );
        return classloader;        
    }
    
    public Path getClassPath( Artifact[] artifacts )
        throws IOException
    {
        Path result = new Path( m_Project );
        for( int i=0 ; i < artifacts.length ; i++ )
        {
            File localFile = toLocalFile( artifacts[i] );
            if( ! localFile.exists() )
            {
                localFile.getParentFile().mkdirs();
                download( artifacts[i], localFile );
            }
            Path.PathElement pe = result.createPathElement();
            pe.setLocation( localFile );
        }
        return result;
    }
    
    public void upload( Artifact artifact )
    {
    }
    
    private void download( Artifact artifact, File dest )
        throws IOException, MalformedURLException
    {
        FileOutputStream out = null;
        BufferedOutputStream bos = null;
        InputStream in = null;
        BufferedInputStream bis = null;
        try
        {
            out = new FileOutputStream( dest );
            bos = new BufferedOutputStream( out );
            URL url = toRemoteURL( artifact );
            URLConnection conn = url.openConnection();
            conn.connect();
            in = conn.getInputStream();
            bis = new BufferedInputStream( in );
            int b;
            while( ( b = bis.read() ) != -1 )
            {
                bos.write( b );
            }
        } finally
        {
            if( out != null )
                out.close();
            if( bos != null )
                bos.close();
            if( in != null )
                in.close();
            if( bis != null )
                bis.close();
        }
    }
    
    private URL toRemoteURL( Artifact artifact )
        throws MalformedURLException
    {
        String href = artifact.getRepository() + "/" + 
                      artifact.getGroupId() + "/" +
                      artifact.getType() + "s/" +
                      artifact.getArtifactId() + "-" +
                      artifact.getVersion()  + ".jar" ;
        return new URL( href );
    }
    
    private File toLocalFile( Artifact artifact )
    {
        String href = m_Context.getProperty( "artifact.local.repository.dir" ) + "/" + 
                      artifact.getGroupId() + "/" +
                      artifact.getType() + "s/" +
                      artifact.getArtifactId() + "-" +
                      artifact.getVersion()  + ".jar" ;
        return new File( href );
    }
}
   
