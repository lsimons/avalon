/*
Copyright 2004 The Apache Software Foundation
Licensed  under the  Apache License,  Version 2.0  (the "License");
you may not use  this file  except in  compliance with the License.
You may obtain a copy of the License at 

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed  under the  License is distributed on an "AS IS" BASIS,
WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
implied.

See the License for the specific language governing permissions and
limitations under the License.
*/
 
import java.io.File;
import java.io.IOException;

import org.apache.avalon.magic.AbstractPlugin;
import org.apache.avalon.magic.Artifact;
import org.apache.avalon.magic.ArtifactException;
import org.apache.avalon.magic.BuildException;
import org.apache.avalon.magic.Plugin;
import org.apache.avalon.magic.PluginContext;
import org.apache.avalon.magic.PluginFacade;
import org.apache.avalon.magic.PluginServiceManager;

import org.apache.avalon.framework.context.Context;
import org.apache.avalon.framework.context.Contextualizable;

import org.apache.avalon.framework.service.Serviceable;
import org.apache.avalon.framework.service.ServiceException;
import org.apache.avalon.framework.service.ServiceManager;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.taskdefs.Copy;
import org.apache.tools.ant.taskdefs.Delete;
import org.apache.tools.ant.taskdefs.Javac;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.Path;

public class PluginPlugin extends AbstractPlugin
    implements Serviceable
{
    private PluginServiceManager m_ServiceManager;
    
    public void service( ServiceManager man )
        throws ServiceException
    {
        m_ServiceManager = (PluginServiceManager) man;
    }
    
    public void loadAll()
        throws ServiceException
    {
        File systemDir = m_Context.getSystemDir();
        File localpluginrepo = new File( systemDir, "plugins/"  );
        String[] plugins = localpluginrepo.list();
        for( int i=0 ; i < plugins.length ; i++ )
        {
            m_ServiceManager.lookup( plugins[i] );
        }
    }
    
    /* Copies the plugin to a Java file and tries to compile it */
    public void validate()
        throws ServiceException, IOException, BuildException
    {
        try
        {
            notifyPreMethod( "validate" );
            getLogger().info( "Validating plugin: " + m_Context.getProjectName() );

            File srcDir = new File( m_Context.getProjectDir(), "src/dist/" );
            File srcFile = new File( srcDir, "magic.bsh" );
            File destDir = m_Context.getTempDir();

            /* Remove any existing content in the Temp dir. */
            Delete delete = (Delete) m_Project.createTask( "delete" );
            delete.setDir( destDir );
            delete.init();
            delete.execute();
            destDir.mkdirs();

            PluginServiceManager sm = m_ServiceManager;

            PluginFacade pf = sm.getFacade( srcDir );
            String classname = pf.getPluginClassname();

            File classfile = new File( destDir, classname + ".java" );

            Copy copy = (Copy) m_Project.createTask( "copy" );
            copy.setVerbose( true );
            copy.setTofile( classfile  );
            copy.setFile( srcFile );
            copy.execute();

            File cache = new File( m_Context.getSystemDir(), "cache" );
            cache.mkdirs();

            String classpath = m_Context.getProperty( "java.class.path" );

            Javac javac = (Javac) m_Project.createTask( "javac" );
            /* Set the destination */
            javac.setDestdir( cache );
            javac.setDeprecation( true );
            javac.setDebug( true );
            javac.setVerbose( false );

            /* Add Class path defined in the magic.properties  */
            Path cp = javac.createClasspath();
            Path.PathElement pe = cp.createPathElement();
            pe.setPath( cache.getAbsolutePath() + "/" );
            pe = cp.createPathElement();
            pe.setPath( classpath );

            Artifact artifact = Artifact.resolve( m_Context, m_Context.getProjectName() );       
            Artifact[] deps = artifact.getDependencies();
            Path depsPath = new Path( m_Project );
            for( int i=0 ; i < deps.length ; i++ )
            {
                File localFile = deps[i].getContentFile();
                Path.PathElement fpe = depsPath.createPathElement();
                fpe.setLocation( localFile );
            }
            cp.add( depsPath );
            System.out.println( cp );
            /* Add the source path */
            Path src = javac.createSrc();
            Path.PathElement srcPE = src.createPathElement();
            srcPE.setLocation( destDir );
            javac.init();
            javac.execute(); 

            notifyPostMethod( "validate" );
        } catch( Exception e )
        {
            e.printStackTrace();
            throw e;
        }
    }
    
    public void install()
        throws ServiceException, IOException, BuildException
    {
        validate();
        notifyPreMethod( "install" );   
        
        getLogger().info( "Installing plugin: " + m_Context.getProjectName() );

        String projectName = m_Context.getProperty( "project.name" );
        File systemDir = m_Context.getSystemDir();
        File localpluginrepo = new File( systemDir, "plugins/" + projectName );
        File srcDir = new File( m_Context.getProjectDir(), "src/dist" );
        FileSet src = new FileSet();
        src.setDir( srcDir );
        Copy copy = (Copy) m_Project.createTask( "copy" );
        copy.setVerbose( true );
        copy.setTodir( localpluginrepo );
        copy.addFileset( src );
        copy.execute();        
        notifyPostMethod( "install" );
    }
}
