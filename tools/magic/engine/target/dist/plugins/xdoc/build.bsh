import java.io.File;

import org.apache.avalon.framework.context.Context;
import org.apache.avalon.framework.context.Contextualizable;

import org.apache.avalon.framework.logger.AbstractLogEnabled;

import org.apache.merlin.magic.Plugin;
import org.apache.merlin.magic.PluginContext;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.taskdefs.Copy;
import org.apache.tools.ant.taskdefs.XSLTProcess;

public class XDocPlugin extends AbstractLogEnabled
    implements Contextualizable, Plugin
{
    private PluginContext m_PluginContext;
    
    private Project m_Project;
        
    public void contextualize( Context ctx )
    {
        m_PluginContext = (PluginContext) ctx;
        m_Project = m_PluginContext.getAntProject();
    }
    
    public void generate()
    {
        getLogger().info( "Start XDoc generation." );
        
        File srcDir = new File( m_PluginContext.getProperty( "xdoc.src.dir" ) );
        if( ! srcDir.exists() )
        {
            getLogger().warn( "Xdocs source directory does not exist:" + srcDir );
            return;
        }
        File destDir = new File( m_PluginContext.getProperty( "xdoc.build.src.dir" ) );

        String theme = m_PluginContext.getProperty( "xdoc.theme.name" );
        String output = m_PluginContext.getProperty( "xdoc.output.format" );
        File themeDir = new File( m_PluginContext.getPluginDir(), "themes/" + theme + "/" + output );
        
        getLogger().info( "   Source: " + srcDir.getAbsolutePath() );
        getLogger().info( "     Dest: " + destDir.getAbsolutePath() );
        getLogger().info( "Theme Dir: " + themeDir );
        
        try
        {
            transformNavigation( themeDir );
            copySources();
            transformXdocs( themeDir );
            copyResources( themeDir );
        } 
        catch( RuntimeException e )
        {
            getLogger().error( "XSLT execution failed.", e );
            throw e;
        }
    }
    
    private void transformNavigation( File themeDir )
    {
        File xslFile = new File( themeDir,  "nav-aggregate.xsl" );
        String srcDir = m_PluginContext.getProperty( "xdoc.src.dir" );
        File fromDir = new File( srcDir );
        File toDir = new File( m_PluginContext.getProperty( "xdoc.build.src.dir" ) );
        transform( fromDir, toDir, xslFile, "**/navigation.xml", "", ".xml", "xml" );
    }
    
    private void copySources()
    {
        File toDir = new File( m_PluginContext.getProperty( "xdoc.build.src.dir" ) );
        String srcDir = m_PluginContext.getProperty( "xdoc.src.dir" );
        File fromDir = new File( srcDir );
        copy( fromDir, toDir, "**/*", "**/navigation.xml" );
    }
    
    private void transformXdocs( File themeDir )
    {
        File xslFile = new File( themeDir,  "transform.xsl" );
        String srcDir = m_PluginContext.getProperty( "xdoc.build.src.dir" );
        File fromDir = new File( srcDir );
        File toDir = new File( m_PluginContext.getProperty( "xdoc.dest.dir" ) );
        String output = m_PluginContext.getProperty( "xdoc.output.format" );
        transform( fromDir, toDir, xslFile, "**/*.xml", "**/navigation.xml", "." + output, "html" );
    }
    
    private void copyResources( File themeDir )
    {
        File destDir = new File( m_PluginContext.getProperty( "xdoc.dest.dir" ) );
        File toDir = new File( destDir, "resources" );
        File fromDir = new File( themeDir, "resources" );
        copy( fromDir, toDir, "**/*", "" );
    }
    
    private void copy( File fromDir, File toDir, String includes, String excludes )
    {
        FileSet from = new FileSet();
        from.setDir( fromDir );
        from.setIncludes( includes );
        from.setExcludes( excludes );
        toDir.mkdirs();  /* ensure that the directory exists. */
        
        Copy copy = (Copy) m_Project.createTask( "copy" );
        copy.setTodir( toDir );
        copy.addFileset( from );
        copy.execute();
    }
    
    private void transform( File srcDir, File toDir, File xslFile, 
                            String includes, String excludes, String extension,
                            String method )
    {
        XSLTProcess xslt = (XSLTProcess) m_Project.createTask( "xslt" );
        xslt.setDestdir( toDir );
        xslt.setStyle( xslFile.getAbsolutePath() );
        xslt.setBasedir( srcDir );
        xslt.setIncludes( includes );
        xslt.setForce( true );
        xslt.setExtension( extension );
        xslt.setExcludes( excludes );
        
        XSLTProcess.OutputProperty prop1 = xslt.createOutputProperty();
        prop1.setName( "method" );
        prop1.setValue( method );
        
        XSLTProcess.OutputProperty prop2 = xslt.createOutputProperty();
        prop2.setName( "standalone" );
        prop2.setValue( "yes" );
        
        XSLTProcess.OutputProperty prop3 = xslt.createOutputProperty();
        prop3.setName( "encoding" );
        prop3.setValue( "iso8859_1" );
        
        XSLTProcess.OutputProperty prop4 = xslt.createOutputProperty();
        prop4.setName( "indent" );
        prop4.setValue( "yes" );
          
        xslt.init();
        xslt.execute();
    }

} 
