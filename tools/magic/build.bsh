
import java.io.File;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;

import java.util.ArrayList;
import java.util.Iterator;

import org.apache.merlin.magic.Plugin;
import org.apache.merlin.magic.Builder;
import org.apache.merlin.magic.PluginContext;

import org.apache.avalon.framework.context.Context;
import org.apache.avalon.framework.context.Contextualizable;

import org.apache.avalon.framework.logger.AbstractLogEnabled;

public class MagicPlugin extends AbstractLogEnabled
    implements Contextualizable, Plugin
{
    private PluginContext m_Context;
        
    public void contextualize( Context context )
    {
        m_Context = (PluginContext) context;
    }

    private Iterator readBuildSequence()
        throws IOException
    {
        ArrayList result = new ArrayList();
        FileReader reader = null;
        BufferedReader br = null;
        try
        {
            File projectDir = m_Context.getProjectDir();
            File file = new File( projectDir, "build.sequence" );
            reader = new FileReader( file );
            br = new BufferedReader( reader );
            String line;
            while( (line = br.readLine() ) != null )
            {
                result.add( line );
            }
            System.out.println( "RETURNING!!!!" );
        } finally
        {
            if( reader != null )
                reader.close();
            if( br != null )
                br.close();
        }
        Iterator value = result.iterator();
        return value;
    }

    public void build()
        throws IOException
    {
        String[] methods = new String[] { "plugin.install" };
        
        File projectDir = m_Context.getProjectDir();
        Iterator projects = readBuildSequence();
        while( projects.hasNext() )
        {
            String project = (String) projects.next();
            File dir = new File( projectDir, project );
            Builder builder = new Builder( methods, dir.getAbsoluteFile() );
            try
            {
                builder.execute();
            } catch( Exception e )
            {
                e.printStackTrace();
            }
        }
    }
    
}
