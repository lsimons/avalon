
/*
Copyright 2004 The Apache Software Foundation
Licensed  under the  Apache License,  Version 2.0  (the "License");
you may not use  this file  except in  compliance with the License.
You may obtain a copy of the License at 

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed  under the  License is distributed on an "AS IS" BASIS,
WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
implied.

See the License for the specific language governing permissions and
limitations under the License.
*/

import java.io.File;
import java.io.FileFilter;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.ParserConfigurationException;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;

import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.apache.avalon.framework.service.Serviceable;
import org.apache.avalon.framework.service.ServiceException;
import org.apache.avalon.framework.service.ServiceManager;

import org.apache.avalon.magic.AbstractPlugin;
import org.apache.avalon.magic.BuildException;
import org.apache.avalon.magic.Plugin;
import org.apache.avalon.magic.PluginContext;
import org.apache.avalon.magic.RegexpFilter;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.taskdefs.Copy;
import org.apache.tools.ant.taskdefs.XSLTProcess;

import org.xml.sax.SAXException;

public class XDocPlugin extends AbstractPlugin
    implements Serviceable
{
    private File m_BaseToDir;    
    private File m_BaseSrcDir;    
    
    public void service( ServiceManager man )
        throws ServiceException
    {
        Object preparePlugin = man.lookup( "prepare" );
    }
    
    public void generate()
        throws BuildException
    {
        getLogger().info( "Start XDoc generation." );
        
        File srcDir = new File( m_Context.getProperty( "xdoc.src.dir" ) );
        if( ! srcDir.exists() )
        {
            getLogger().warn( "Xdocs source directory does not exist:" + srcDir );
            return;
        }
        File destDir = new File( m_Context.getProperty( "xdoc.build.src.dir" ) );

        String theme = m_Context.getProperty( "xdoc.theme.name" );
        String output = m_Context.getProperty( "xdoc.output.format" );
        File themeDir = new File( m_Context.getProjectSystemDir(), "themes/" + theme + "/" + output );
        
        if( getLogger().isDebugEnabled() )
        {
            getLogger().debug( "   Source: " + srcDir.getAbsolutePath() );
            getLogger().debug( "     Dest: " + destDir.getAbsolutePath() );
            getLogger().debug( "Theme Dir: " + themeDir );
        }
        
        try
        {
            copySources();
            transformNavigation( themeDir );
            transformXdocs( themeDir );
            copyResources( themeDir );
        } 
        catch( RuntimeException e )
        {
            getLogger().error( "XSLT execution failed.", e );
            throw e;
        }
    }
    
    private void transformNavigation( File themeDir )
        throws BuildException
    {
        getLogger().debug( "Converting Navigation." );
        File xslFile = new File( themeDir,  "nav-aggregate.xsl" );
        String srcDir = m_Context.getProperty( "xdoc.src.dir" );
        File fromDir = new File( srcDir );
        File toDir = new File( m_Context.getProperty( "xdoc.build.src.dir" ) );
        String sep = File.separatorChar == '\\' ? "\\\\" : File.separator;
        transformTrax( fromDir, toDir, xslFile, "^.*" + sep + "navigation.xml$", "", ".xml", "xml" );
    }
    
    private void copySources()
    {
        File toDir = new File( m_Context.getProperty( "xdoc.build.src.dir" ) );
        toDir.mkdirs();
        String srcDir = m_Context.getProperty( "xdoc.src.dir" );
        File fromDir = new File( srcDir );
        copy( fromDir, toDir, "**/*", "**/navigation.xml" );
    }
    
    private void transformXdocs( File themeDir )
        throws BuildException
    {
        getLogger().debug( "Converting XML documents." );
        File xslFile = new File( themeDir,  "transform.xsl" );
        String srcDir = m_Context.getProperty( "xdoc.build.src.dir" );
        File fromDir = new File( srcDir );
        File toDir = new File( m_Context.getProperty( "xdoc.dest.dir" ) );
        String output = m_Context.getProperty( "xdoc.output.format" );
        String sep = File.separatorChar == '\\' ? "\\\\" : File.separator;
        transformTrax( fromDir, toDir, xslFile, "^.*\\.xml$", "^.*" + sep + "navigation.xml$", "." + output, "html" );
    }
    
    private void copyResources( File themeDir )
    {
        File destDir = new File( m_Context.getProperty( "xdoc.dest.dir" ) );
        File toDir = new File( destDir, "resources" );
        File fromDir = new File( themeDir, "resources" );
        copy( fromDir, toDir, "**/*", "" );
    }
    
    private void copy( File fromDir, File toDir, String includes, String excludes )
    {
        FileSet from = new FileSet();
        from.setDir( fromDir );
        from.setIncludes( includes );
        from.setExcludes( excludes );
        toDir.mkdirs();  /* ensure that the directory exists. */
        
        Copy copy = (Copy) m_Project.createTask( "copy" );
        copy.setTodir( toDir );
        copy.addFileset( from );
        copy.execute();
    }
    
    private void transformTrax( File srcDir, File toDir, File xslFile, 
                            String includes, String excludes, String extension,
                            String method )
        throws BuildException
    {
        /* Alternate 'direct' implementation to solve that I can feed
           the XSL stylesheet with the parameter of the currently 
           processed document
        */

        try
        {
            TransformerFactory factory = TransformerFactory.newInstance();
            StreamSource xsl = new StreamSource( xslFile );
            Transformer transformer = factory.newTransformer( xsl );

            RegexpFilter filter = new RegexpFilter( includes, excludes );

            m_BaseToDir = toDir;
            m_BaseSrcDir = srcDir.getAbsoluteFile();
            transform( transformer, m_BaseSrcDir, toDir, filter, extension );
        } catch( TransformerException e )
        {
            throw new BuildException( e.getMessage(), e );
        }
    }
    
    private void transform( Transformer transformer, File srcDir, File toDir,
        FileFilter filter, String extension )
        throws BuildException
    {
        File[] content = srcDir.listFiles( filter );
        for( int i = 0 ; i < content.length ; i++ )
        {
            String base = content[i].getName();
            if( content[i].isDirectory() )
            {
                File newDest = new File( toDir, base );
                newDest.mkdirs();
                transform( transformer, content[i], newDest, filter, extension );
            }
            if( content[i].isFile() )
            {
                String svnRoot = m_Context.getProperty( "xdoc.svn.root.xdocs" );
                String svnSource = svnRoot + getRelSrcPath( srcDir ) + "/" + base;
                
                int pos = base.lastIndexOf( '.' );
                if( pos > 0 )
                    base = base.substring( 0, pos );
                base = base + extension;
                
                File newDest = new File( toDir, base );
                StreamSource xml = new StreamSource( content[i] );
                StreamResult out = new StreamResult( newDest );
                transformer.clearParameters();
                
                
                transformer.setParameter( "directory", getRelToPath( toDir ) );
                transformer.setParameter( "fullpath", getRelToPath( newDest ) );
                transformer.setParameter( "file", base );
                transformer.setParameter( "svn-location", svnSource );
                transformer.setParameter( "copyright", m_Context.getProperty( "xdoc.footer.copyright" ).trim() );
                transformer.setParameter( "logoright_file", m_Context.getProperty( "xdoc.logo.right.file" ).trim() );
                transformer.setParameter( "logoright_url", m_Context.getProperty( "xdoc.logo.right.url" ).trim() );
                transformer.setParameter( "logoleft_file", m_Context.getProperty( "xdoc.logo.left.file" ).trim() );
                transformer.setParameter( "logoleft_url", m_Context.getProperty( "xdoc.logo.left.url" ).trim() );
                transformer.setParameter( "logomiddle_file", m_Context.getProperty( "xdoc.logo.middle.file" ).trim() );
                transformer.setParameter( "logomiddle_url", m_Context.getProperty( "xdoc.logo.middle.url" ).trim() );
                transformer.setParameter( "brand_name", m_Context.getProperty( "xdoc.brand.name" ).trim() );
  
                
                try
                {
                    transformer.transform( xml, out );
                } catch( Exception e )
                {
                    getLogger().error( getRelToPath( newDest ) + " : " + e.getMessage() );
                    if( "true".equals( m_Context.getProperty( "xdoc.print.stack.trace" ) ) )
                        e.printStackTrace();
                    if( "true".equals( m_Context.getProperty( "xdoc.fail.on.error" ) ) )
                        throw new BuildException( "Unable to transform document. Message above should give more details." );
                }
            }
        }
    }
    
    private String getRelToPath( File dir )
    {
        String basedir = m_BaseToDir.getAbsolutePath();
        String curdir = dir.getAbsolutePath();
        return curdir.substring( basedir.length() );
    }

    private String getRelSrcPath( File dir )
    {
        String basedir = m_BaseSrcDir.getAbsolutePath();
        String curdir = dir.getAbsolutePath();
        return curdir.substring( basedir.length() );
    }
} 
