

/*
Copyright 2004 The Apache Software Foundation
Licensed  under the  Apache License,  Version 2.0  (the "License");
you may not use  this file  except in  compliance with the License.
You may obtain a copy of the License at 

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed  under the  License is distributed on an "AS IS" BASIS,
WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
implied.

See the License for the specific language governing permissions and
limitations under the License.
*/

import java.io.File;
import java.io.FileFilter;

import org.apache.avalon.magic.AbstractPlugin;
import org.apache.avalon.magic.RegexpFilter;
import org.apache.avalon.magic.Plugin;
import org.apache.avalon.magic.PluginContext;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.taskdefs.Copy;
import org.apache.tools.ant.taskdefs.XSLTProcess;

import org.xml.sax.SAXException;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.ParserConfigurationException;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;

import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

public class XDocPlugin extends AbstractPlugin
{
    private File m_BaseDir;    
    
    public void generate()
        throws TransformerException
    {
        getLogger().info( "Start XDoc generation." );
        
        File srcDir = new File( m_Context.getProperty( "xdoc.src.dir" ) );
        if( ! srcDir.exists() )
        {
            getLogger().warn( "Xdocs source directory does not exist:" + srcDir );
            return;
        }
        File destDir = new File( m_Context.getProperty( "xdoc.build.src.dir" ) );

        String theme = m_Context.getProperty( "xdoc.theme.name" );
        String output = m_Context.getProperty( "xdoc.output.format" );
        File themeDir = new File( m_Context.getProjectSystemDir(), "themes/" + theme + "/" + output );
        
        getLogger().info( "   Source: " + srcDir.getAbsolutePath() );
        getLogger().info( "     Dest: " + destDir.getAbsolutePath() );
        getLogger().info( "Theme Dir: " + themeDir );
        
        try
        {
            transformNavigation( themeDir );
            copySources();
            transformXdocs( themeDir );
            copyResources( themeDir );
        } 
        catch( RuntimeException e )
        {
            getLogger().error( "XSLT execution failed.", e );
            throw e;
        }
    }
    
    private void transformNavigation( File themeDir )
        throws TransformerException
    {
        File xslFile = new File( themeDir,  "nav-aggregate.xsl" );
        String srcDir = m_Context.getProperty( "xdoc.src.dir" );
        File fromDir = new File( srcDir );
        File toDir = new File( m_Context.getProperty( "xdoc.build.src.dir" ) );
        transformTrax( fromDir, toDir, xslFile, "^.*/navigation.xml$", "", ".xml", "xml" );
    }
    
    private void copySources()
    {
        File toDir = new File( m_Context.getProperty( "xdoc.build.src.dir" ) );
        String srcDir = m_Context.getProperty( "xdoc.src.dir" );
        File fromDir = new File( srcDir );
        copy( fromDir, toDir, "**/*", "**/navigation.xml" );
    }
    
    private void transformXdocs( File themeDir )
        throws TransformerException
    {
        File xslFile = new File( themeDir,  "transform.xsl" );
        String srcDir = m_Context.getProperty( "xdoc.build.src.dir" );
        File fromDir = new File( srcDir );
        File toDir = new File( m_Context.getProperty( "xdoc.dest.dir" ) );
        String output = m_Context.getProperty( "xdoc.output.format" );
        transformTrax( fromDir, toDir, xslFile, "^.*\\.xml$", "^.*/navigation.xml$", "." + output, "html" );
    }
    
    private void copyResources( File themeDir )
    {
        File destDir = new File( m_Context.getProperty( "xdoc.dest.dir" ) );
        File toDir = new File( destDir, "resources" );
        File fromDir = new File( themeDir, "resources" );
        copy( fromDir, toDir, "**/*", "" );
    }
    
    private void copy( File fromDir, File toDir, String includes, String excludes )
    {
        FileSet from = new FileSet();
        from.setDir( fromDir );
        from.setIncludes( includes );
        from.setExcludes( excludes );
        toDir.mkdirs();  /* ensure that the directory exists. */
        
        Copy copy = (Copy) m_Project.createTask( "copy" );
        copy.setTodir( toDir );
        copy.addFileset( from );
        copy.execute();
    }
    
    private void transformTrax( File srcDir, File toDir, File xslFile, 
                            String includes, String excludes, String extension,
                            String method )
        throws TransformerException
    {
        /* Alternate 'direct' implementation to solve that I can feed
           the XSL stylesheet with the parameter of the currently 
           processed document
        */

        System.out.println( "Transforming source dir:" + srcDir );
        System.out.println( "Transforming dest dir:" + toDir );
        System.out.println( "Transforming xsl:" + xslFile );
        System.out.println( "Transforming includes/excludes: '" + includes + "' / '" + excludes + "'."  );
        
        TransformerFactory factory = TransformerFactory.newInstance();
        StreamSource xsl = new StreamSource( xslFile );
        Transformer transformer = factory.newTransformer( xsl );

        RegexpFilter filter = new RegexpFilter( includes, excludes );
        
        m_BaseDir = toDir;
        
        transform( transformer, srcDir, toDir, filter, extension );
    }
    
    private void transform( Transformer transformer, File srcDir, File toDir,
        FileFilter filter, String extension )
        throws TransformerException
    {
        File[] content = srcDir.listFiles( filter );
        for( int i = 0 ; i < content.length ; i++ )
        {
            String base = content[i].getName();
            if( content[i].isDirectory() )
            {
                File newDest = new File( toDir, base );
                transform( transformer, content[i], newDest, filter, extension );
            }
            if( content[i].isFile() )
            {
                
                int pos = base.indexOf( '.' );
                if( pos > 0 )
                    base = base.substring( 0, pos );
                base = base + extension;
                File newDest = new File( toDir, base );

                StreamSource xml = new StreamSource( content[i] );
                StreamResult out = new StreamResult( newDest );
                transformer.clearParameters();
                
                
                transformer.setParameter( "directory", getRelPath( toDir ) );
                transformer.setParameter( "fullpath", getRelPath( newDest ) );
                transformer.setParameter( "file", base );
                
                transformer.transform( xml, out );
            }
        }
    }
    
    private String getRelPath( File dir )
    {
        String basedir = m_BaseDir.getAbsolutePath();
        String curdir = dir.getAbsolutePath();
        return curdir.substring( basedir.length() );
    }
} 
