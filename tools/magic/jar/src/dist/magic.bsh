/*
Copyright 2004 The Apache Software Foundation
Licensed  under the  Apache License,  Version 2.0  (the "License");
you may not use  this file  except in  compliance with the License.
You may obtain a copy of the License at 

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed  under the  License is distributed on an "AS IS" BASIS,
WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
implied.

See the License for the specific language governing permissions and
limitations under the License.
*/

import java.io.File;
import java.io.IOException;

import java.lang.reflect.InvocationTargetException;

import org.apache.avalon.magic.AbstractPlugin;
import org.apache.avalon.magic.Artifact;
import org.apache.avalon.magic.ArtifactException;
import org.apache.avalon.magic.PluginContext;
import org.apache.avalon.magic.Util;

import org.apache.avalon.framework.activity.Initializable;

import org.apache.avalon.framework.service.Serviceable;
import org.apache.avalon.framework.service.ServiceManager;
import org.apache.avalon.framework.service.ServiceException;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.taskdefs.Copy;
import org.apache.tools.ant.taskdefs.Jar;

public class JarPlugin extends AbstractPlugin
    implements Serviceable, Initializable
{
    private Object      m_JavaPlugin;
    private Object      m_PreparePlugin;
    private Object      m_ArtifactPlugin;
    private boolean     m_Jarred = false;
    
    private Artifact    m_CurrentArtifact;
    private File        m_JarFile;
    
    public void service( ServiceManager man )
        throws ServiceException
    {
        m_JavaPlugin = man.lookup( "java" );
        m_PreparePlugin = man.lookup( "prepare" );
        m_ArtifactPlugin = man.lookup( "artifact" );
    }
    
    public void initialize()
        throws IOException, ArtifactException
    {
        String projectname = m_Context.getProjectName();
        ArtifactPlugin ap = (ArtifactPlugin) m_ArtifactPlugin;
        m_CurrentArtifact = Artifact.resolve( m_Context, projectname );
    }
    
    public void jar()
        throws IOException, ArtifactException
    {   
        try
        {
            if( m_Jarred )
                return;

            JavacPlugin java = (JavacPlugin) m_JavaPlugin;
            java.compile();

            notifyPreMethod( "jar" );
            File manifest = prepareManifest();
            notifyStep( "jar", "manifest-created" );
            createJar( manifest );
            notifyPostMethod( "jar" );
            m_Jarred = true;
        } catch( Exception e )
        {
            e.printStackTrace();
            throw new ArtifactException( "Unable to JAR.", e );
        }
    }
    
    public void install()
        throws IOException, ArtifactException
    {
        jar();
        notifyPreMethod( "install" );
        ArtifactPlugin artplugin = (ArtifactPlugin) m_ArtifactPlugin;
        artplugin.install( m_CurrentArtifact, m_JarFile );
        notifyStep( "install", "plugin-installed" );
        Util.checksum( m_CurrentArtifact.toLocalFile() );
        notifyStep( "install", "checksum-created" );
        notifyPostMethod( "install" );
    }

    public void upload()
        throws IOException, ArtifactException
    {
        install();
        notifyPreMethod( "upload" );
        ArtifactPlugin artplugin = (ArtifactPlugin) m_ArtifactPlugin;
        artplugin.upload( m_CurrentArtifact );
        notifyPostMethod( "upload" );
    }
    
    private File prepareManifest()
    {
        String manifestName = m_Context.getProperty( "jar.manifest" );
        File srcManifest = new File( manifestName ); 
        if( srcManifest.exists() )
        {
            String destDirName = m_Context.getProperty( "jar.manifest.build.dir" );
            File toDir = new File( destDirName ); 
            toDir.mkdirs();

            getLogger().info( "Copying " + srcManifest + " to " + toDir );

            Copy copy = (Copy) m_Project.createTask( "copy" );
            copy.setTodir( toDir );
            copy.setFile( srcManifest );
            copy.init();
            copy.execute();

            File manifest = new File( toDir, srcManifest.getName() );
            return manifest;
        }
        else
            return null;
    }
        
    private void createJar( File manifest )
        throws IOException
    {
        String dest = m_Context.getProperty( "jar.build.dest.dir" );
        File destDir = new File( dest );
        m_JarFile = new File( dest, m_CurrentArtifact.getFilename() );
        destDir.mkdirs();
        
        File fromDir = new File( m_Context.getProperty( "jar.build.src.dir" ) );

        Jar jar = (Jar) m_Project.createTask( "jar" );
        /* Set the destination */
        jar.setDestFile( m_JarFile );
        jar.setBasedir( fromDir );

        jar.init();
        jar.execute(); 
    }
}   
