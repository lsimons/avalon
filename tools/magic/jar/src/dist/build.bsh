
import java.io.File;

import java.util.ArrayList;
import java.util.Iterator;

import org.apache.merlin.magic.Plugin;
import org.apache.merlin.magic.PluginContext;

import org.apache.avalon.framework.context.Context;
import org.apache.avalon.framework.context.Contextualizable;

import org.apache.avalon.framework.logger.AbstractLogEnabled;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.taskdefs.Copy;
import org.apache.tools.ant.taskdefs.Javac;

public class JarPlugin extends AbstractLogEnabled
    implements Plugin, Contextualizable
{
    private PluginContext m_PluginContext;
    
    private Project m_Project;
    
    private ArrayList m_JarListeners;
    
    private boolean m_Jarred = false;
        
    public void contextualize( Context ctx )
    {
        m_PluginContext = (PluginContext) ctx;
        m_Project = m_PluginContext.getAntProject();
    }
    
    public void jar()
    {   
        if( m_Jarred )
            return;
        notifyPreJar();
        executeJar();    
        notifyPostJar();
        m_Jarred = true;
    }
    
    public void addJarListener( JarListener listener )
    {
        if( m_JarListeners == null )
        {
            m_JarListeners = new ArrayList();
        }
        m_JarListeners.add( listener );
    }
    
    public void removeJarListener( JarListener listener )
    {
        if( m_JarListeners == null )
            return;
        m_JarListeners.remove( listener );
    }

    private File prepareManifest()
    {
        String manifestName = m_PluginContext.getProperty( "jar.manifest" );
        File srcManifest = new File( manifestName ); 

        String destDirName = m_PluginContext.getProperty( "jar.manifest.build.dir" );
        File toDir = new File( destDirName ); 
        
        Copy copy = (Copy) m_Project.createTask( "copy" );
        copy.setTodir( toDir );
        copy.setFile( srcManifest );
        copy.init();
        copy.execute();
        
        fireManifestPrepared();
        File manifest = new File( toDir, srcManifest.getName() );
        return manifest;
    }
        
    private void executeJar( File manifest )
    {
        String jarFilename = m_PluginContext.getProperty( "jar.filename" );
        File jarFile = new File( jarFilename ); 
        File destDir = jarFile.getParentFile(); 
        destDir.mkdirs();
                
        
        String classpath = m_PluginContext.getProperty( "java.class.path" );
        
        Jar jar = (Jar) m_Project.createTask( "jar" );
        /* Set the destination */
        jar.setJarfile( jarFile );
        jar.setDeprecation( true );
        javac.setDebug( true );
        
        /* Add Class path defined in the build.properties  */
        Path cp = javac.createClasspath();
        Path.PathElement pe = cp.createPathElement();
        pe.setPath( classpath );
        /* Later; also add dependency Jars */
        
        /* Add the source path */
        Path src = javac.createSrc();
        Path.PathElement srcPE = src.createPathElement();
        srcPE.setLocation( fromDir );
        
        javac.init();
        javac.execute(); 
    }
    
    private void notifyPreJar()
    {
        if( m_JarListeners == null )
            return;
        Iterator list = m_JarListeners.iterator();
        while( list.hasNext() )
        {
            JarListener listener = (JarListener) list.next();
            listener.preCompile();
        }
    }
    
    private void notifyPostJar()
    {
        if( m_JarListeners == null )
            return;
        Iterator list = m_JarListeners.iterator();
        while( list.hasNext() )
        {
            JarListener listener = (JarListener) list.next();
            listener.postCompile();
        }
    }
    
    public interface JarListener
    {
        void preJar();
        
        void manifestPrepared();
        
        void postJar();
    }
}   
