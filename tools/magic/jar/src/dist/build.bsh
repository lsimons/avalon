
import java.io.File;
import java.io.IOException;

import java.util.ArrayList;
import java.util.Iterator;

import org.apache.merlin.magic.AbstractPlugin;
import org.apache.merlin.magic.Artifact;
import org.apache.merlin.magic.Plugin;
import org.apache.merlin.magic.PluginContext;

import org.apache.avalon.framework.service.Serviceable;
import org.apache.avalon.framework.service.ServiceManager;
import org.apache.avalon.framework.service.ServiceException;

import org.apache.tools.ant.Project;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.Path;
import org.apache.tools.ant.taskdefs.Copy;
import org.apache.tools.ant.taskdefs.Jar;

public class JarPlugin extends AbstractPlugin
    implements Serviceable
{
    private Object m_JavaPlugin;
    private Object m_PreparePlugin;
    private Object m_ArtifactPlugin;
    private boolean m_Jarred = false;
        
    public void service( ServiceManager man )
        throws ServiceException
    {
        m_JavaPlugin = man.lookup( "java" );
        m_PreparePlugin = man.lookup( "prepare" );
        m_ArtifactPlugin = man.lookup( "artifact" );
    }
    
    public void jar()
        throws IOException
    {   
        if( m_Jarred )
            return;
        
        JavacPlugin java = (JavacPlugin) m_JavaPlugin;
        java.compile();
        
        notifyPreMethod( "jar" );
        File manifest = prepareManifest();
        notifyStep( "jar", "manifest-created" );
        createJar( manifest );    
        notifyPostMethod( "jar" );
        m_Jarred = true;
    }
    
    private File prepareManifest()
    {
        String manifestName = m_Context.getProperty( "jar.manifest" );
        File srcManifest = new File( manifestName ); 
        if( srcManifest.exists() )
        {
            String destDirName = m_Context.getProperty( "jar.manifest.build.dir" );
            File toDir = new File( destDirName ); 
            toDir.mkdirs();

            getLogger().info( "Copying " + srcManifest + " to " + toDir );

            Copy copy = (Copy) m_Project.createTask( "copy" );
            copy.setTodir( toDir );
            copy.setFile( srcManifest );
            copy.init();
            copy.execute();

            File manifest = new File( toDir, srcManifest.getName() );
            return manifest;
        }
        else
            return null;
    }
        
    private void createJar( File manifest )
        throws IOException
    {
        String projectname = m_Context.getProjectName();
        ArtifactPlugin ap = (ArtifactPlugin) m_ArtifactPlugin;
        Artifact thisArtifact = ap.locate( projectname );
        
        String dest = m_Context.getProperty( "jar.build.dest.dir" );
        File destDir = new File( dest );
        File jarFile = new File( dest, thisArtifact.getFilename() );
        destDir.mkdirs();
        
        File fromDir = new File( m_Context.getProperty( "jar.build.src.dir" ) );

        Jar jar = (Jar) m_Project.createTask( "jar" );
        /* Set the destination */
        jar.setDestFile( jarFile );
        jar.setBasedir( fromDir );

        jar.init();
        jar.execute(); 
    }
}   
