<?xml version="1.0"?>
<cocoon version="2.0">

<!-- ===================== General Components =========================== -->

  <!-- The default parser used in the Apache Cocoon 2 system is
       org.apache.cocoon.components.parser.JaxpParser.
       Apache Cocoon 2 system requires a JAXP 1.1 parser.
       If you have problems because your servlet environment uses its own
       parser not conforming to JAXP 1.1 try using the alternative
       XercesParser instead of the JaxpParser. To activate the XercesParser
       move the line below starting with <parser ...> out of this comment block.
       You also than have to add a system property to your JVM
       (probably on the startup of your servlet engine like this:

       -Dorg.apache.cocoon.components.parser.Parser=org.apache.cocoon.components.parser.XercesParser

  <parser class="org.apache.cocoon.components.parser.XercesParser"/>
  -->

  <!-- Storing:
       freememory: Indicates how much memory should be left free in the
                   JVM for normal operation.
       heapsize: Indicates how big the heap size can grow to before the
                 cleanup thread kicks in.
       objectlifetime: Indicates how long (seconds) a cache object will
                       be hold in memory. The object will be thrown out,
                       when the time is over.
       interval: Indicates the interval of the cleanup thread in seconds.
       maxobjects: Indicates how many objects will be hold in the cache.
                   When the number of maxobjects has been reached. The
                   last object in the cache will be thrown out.
       usethread: Indicates whether we use a cleanup thread or not.
       threadpriority: Indicates the priority of the cleanup thread.
                       (1 is the lowest priority and 10 is the highest).
  -->
  <store class="org.apache.cocoon.components.store.MRUMemoryStore">
     <parameter name="freememory" value="1000000"/>
     <parameter name="heapsize" value="60000000"/>
     <parameter name="objectlifetime" value="300"/>
     <parameter name="interval" value="10"/>
     <parameter name="maxobjects" value="100"/>
     <parameter name="usethread" value="false"/>
     <parameter name="threadpriority" value="5"/>
  </store>

  <!-- The url factory adds special url protocols to the system, they
       are then available inside Cocoon, e.g. as a source argument
       for one of the sitemap components -->
  <url-factory>
    <protocol name="resource" class="org.apache.cocoon.components.url.ResourceURLFactory"/>
    <protocol name="context"  class="org.apache.cocoon.components.url.ContextURLFactory"/>
  </url-factory>

  <!-- The source handler adds special url protocols to the system, they
       are then available inside Cocoon, e.g. as a source argument
       for one of the sitemap components. -->
  <source-handler>
  </source-handler>

  <program-generator>
    <parameter name="auto-reload" value="true"/>
    <parameter name="root-package" value="org.apache.cocoon.www"/>
    <parameter name="preload" value="true"/>
  </program-generator>

  <programming-languages>
    <java-language name="java">
      <!-- compiler parameter specifies which class to use to compile Java.
           Possible variants are Javac and Jikes compilers.
           Javac requires javac.jar (included with Cocoon distribution).
           Jikes requires IBM jikes compiler installed and rt.jar from
           JRE in the classpath environment variable. -->
      <parameter name="compiler" value="org.apache.cocoon.components.language.programming.java.Javac"/>
      <!-- Specifies which formatter to use to format source code.
           This parameter is optional. -->
<!--      <parameter name="code-formatter" value="org.apache.cocoon.components.language.programming.java.JstyleFormatter"/> -->
      <parameter name="class-loader" value="org.apache.cocoon.components.classloader.ClassLoaderManagerImpl"/>
    </java-language>
  </programming-languages>

  <classloader class="org.apache.cocoon.components.classloader.ClassLoaderManagerImpl"/>

  <markup-languages>
    <xsp-language name="xsp">
      <parameter name="prefix" value="xsp"/>
      <parameter name="uri" value="http://apache.org/xsp"/>

      <target-language name="java">
        <parameter name="core-logicsheet" value="resource://org/apache/cocoon/components/language/markup/xsp/java/xsp.xsl"/>

        <builtin-logicsheet>
          <parameter name="prefix" value="xsp-request"/>
          <parameter name="uri" value="http://apache.org/xsp/request/2.0"/>
          <parameter name="href" value="resource://org/apache/cocoon/components/language/markup/xsp/java/request.xsl"/>
        </builtin-logicsheet>

        <builtin-logicsheet>
          <parameter name="prefix" value="xsp-response"/>
          <parameter name="uri" value="http://apache.org/xsp/response/2.0"/>
          <parameter name="href" value="resource://org/apache/cocoon/components/language/markup/xsp/java/response.xsl"/>
        </builtin-logicsheet>

        <builtin-logicsheet>
          <parameter name="prefix" value="session"/>
          <parameter name="uri" value="http://apache.org/xsp/session/2.0"/>
          <parameter name="href" value="resource://org/apache/cocoon/components/language/markup/xsp/java/session.xsl"/>
        </builtin-logicsheet>

        <builtin-logicsheet>
          <parameter name="prefix" value="xsp-cookie"/>
          <parameter name="uri" value="http://apache.org/xsp/cookie/2.0"/>
          <parameter name="href" value="resource://org/apache/cocoon/components/language/markup/xsp/java/cookie.xsl"/>
        </builtin-logicsheet>

        <builtin-logicsheet>
          <parameter name="prefix" value="esql"/>
          <parameter name="uri" value="http://apache.org/cocoon/SQL/v2"/>
          <parameter name="href" value="resource://org/apache/cocoon/components/language/markup/xsp/java/esql.xsl"/>
        </builtin-logicsheet>

        <builtin-logicsheet>
          <parameter name="prefix" value="log"/>
          <parameter name="uri" value="http://apache.org/xsp/log/2.0"/>
          <parameter name="href" value="resource://org/apache/cocoon/components/language/markup/xsp/java/log.xsl"/>
        </builtin-logicsheet>

        <builtin-logicsheet>
          <parameter name="prefix" value="util"/>
          <parameter name="uri" value="http://apache.org/xsp/util/2.0"/>
          <parameter name="href" value="resource://org/apache/cocoon/components/language/markup/xsp/java/util.xsl"/>
        </builtin-logicsheet>

        <builtin-logicsheet>
          <parameter name="prefix" value="xsp-formval"/>
          <parameter name="uri" value="http://apache.org/xsp/form-validator/2.0"/>
          <parameter name="href" value="resource://org/apache/cocoon/components/language/markup/xsp/java/form-validator.xsl"/>
        </builtin-logicsheet>

        <builtin-logicsheet>
          <parameter name="prefix" value="soap"/>
          <parameter name="uri" value="http://apache.org/xsp/soap/2.0"/>
          <parameter name="href" value="context://docs/samples/soap/soap-lib.xsl"/>
        </builtin-logicsheet>

      </target-language>
    </xsp-language>

    <sitemap-language name="sitemap">
      <parameter name="prefix" value="map"/>
      <parameter name="uri" value="http://apache.org/cocoon/sitemap/1.0"/>

      <target-language name="java">
        <parameter name="core-logicsheet" value="resource://org/apache/cocoon/components/language/markup/sitemap/java/sitemap.xsl"/>
      </target-language>
    </sitemap-language>
  </markup-languages>

  <datasources>
    <jdbc name="personnel">
      <!--
          If you have an Oracle database, and are using the the
      pool-controller below, you should add the attribute
      "oradb" and set it to true.

      <pool-controller min="5" max="10" oradb="true"/>

      That way the test to see if the server has disconnected
      the JdbcConnection will function properly.
      -->
      <pool-controller min="5" max="10"/>
      <!--
          If you need to ensure an autocommit is set to true or
      false, then create the "auto-commit" element below.

      <auto-commit>false</auto-commit>

      The default is true.
      -->
      <dburl>@database-url@</dburl>
      <user>@database-user@</user>
      <password>@database-password@</password>
    </jdbc>
  </datasources>

  <!-- A StreamPipeline either
       collects a Reader and let it produce a character stream
       or connects a EventPipeline with a
       Serializer and let them produce the character stream.
  -->
  <stream-pipeline class="org.apache.cocoon.components.pipeline.CachingStreamPipeline"/>

  <!-- Caching of stream pipeline:
       freememory: Indicates how much memory should be left free in the
                   JVM for normal operation.
       heapsize: Indicates how big the heap size can grow to before the
                 cleanup thread kicks in.
       objectlifetime: Indicates how long (seconds) a cache object will
                       be hold in memory. The object will be thrown out,
                       when the time is over.
       interval: Indicates the interval of the cleanup thread in seconds.
       maxobjects: Indicates how many objects will be hold in the cache.
                   When the number of maxobjects has been reached. The
                   last object in the cache will be thrown out.
       usethread: Indicates whether we use a cleanup thread or not.
       threadpriority: Indicates the priority of the cleanup thread.
                       (1 is the lowest priority and 10 is the highest).
  -->
  <stream-cache class="org.apache.cocoon.components.store.MRUMemoryStore">
     <parameter name="freememory" value="1000000"/>
     <parameter name="heapsize" value="60000000"/>
     <parameter name="objectlifetime" value="300"/>
     <parameter name="interval" value="10"/>
     <parameter name="maxobjects" value="100"/>
     <parameter name="usethread" value="false"/>
     <parameter name="threadpriority" value="5"/>
  </stream-cache>

  <!-- An EventPipeline connects the generator and the various transformers
       and produces a character stream. Alternatives to CachingEventPipeline
       are: NonCachingEventPipeline.
  <event-pipeline class="org.apache.cocoon.components.pipeline.NonCachingEventPipeline"/>
  -->
  <event-pipeline class="org.apache.cocoon.components.pipeline.CachingEventPipeline"/>

  <!-- Caching of event pipeline:
       freememory: Indicates how much memory should be left free in the
                   JVM for normal operation.
       heapsize: Indicates how big the heap size can grow to before the
                 cleanup thread kicks in.
       objectlifetime: Indicates how long (seconds) a cache object will
                       be hold in memory. The object will be thrown out,
                       when the time is over.
       interval: Indicates the interval of the cleanup thread in seconds.
       maxobjects: Indicates how many objects will be hold in the cache.
                   When the number of maxobjects has been reached. The
                   last object in the cache will be thrown out.
       usethread: Indicates whether we use a cleanup thread or not.
       threadpriority: Indicates the priority of the cleanup thread.
                       (1 is the lowest priority and 10 is the highest).
  -->
  <event-cache class="org.apache.cocoon.components.store.MRUMemoryStore">
     <parameter name="freememory" value="1000000"/>
     <parameter name="heapsize" value="60000000"/>
     <parameter name="objectlifetime" value="300"/>
     <parameter name="interval" value="10"/>
     <parameter name="maxobjects" value="100"/>
     <parameter name="usethread" value="false"/>
     <parameter name="threadpriority" value="5"/>
  </event-cache>

  <!-- The SAXConnector connects the various pipeline components.
       LoggingSAXConnector logs SAX events between pipeline components
       into a cocoon's log file.
       Uncomment one of the following lines for using the SAXConnector.
  <sax-connector class="org.apache.cocoon.components.saxconnector.LoggingSAXConnector"/>
  -->

<!-- ======================== The sitemap  ============================== -->

  <!-- The reloading of the sitemap:
        The check-reload attribute determines if the sitemap is reloaded on change. If
        it is set to "no", the sitemap is generated once at startup, if it is set to "yes",
        the sitemap is regenerated if it changes.
        The reload-method specifies the method for the regeneration:
        asynchron: If the sitemap changes, the sitemap is regenerated at the next request in
                         the background and the incoming request is served with the old sitemap.
                         All subsequent requests are served with the old sitemap until the
                         regeneration in the background has finished.
        synchron: If the sitemap changes, the sitemap is regenerated at the next request.
                       When the regeneration is finished the request (and all subsequent ones)
                       is served with the new sitemap.

        For development environment set the reload-method to synchron and the
        check-reload to yes, for production environment it is advisable to set
        the reload-method to asynchron and for more safety the check-reload to no.
     -->
  <sitemap file="sitemap.xmap" reload-method="asynchron" check-reload="yes"/>

</cocoon>
