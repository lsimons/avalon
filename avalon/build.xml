<?xml version="1.0"?>

<!--
==============================================================================

 Avalon build file

Type './build.sh' (Unix) or 'build' (Windows) to build. The flag '-projecthelp'
will list normal targets. If combined with '-verbose', all targets are printed.

Authors:
 Federico Barbieri <scoobie@apache.org>
 Berin Loritsch <bloritsch@apache.org>
 Peter Donald <peter at apache.org>
 Nicola Ken Barozzi <nicolaken@apache.org>

Legal:
  Copyright (c) 1999-2002 The Apache Software Foundation. All Rights Reserved.

==============================================================================
-->

<project name="Avalon Framework" default="main" basedir=".">

    <!--
      Give user a chance to override without editing this file
      (and without typing -D each time he compiles it)
    -->
    <property file="ant.properties"/>
    <property file="${user.home}/.ant.properties"/>

    <property name="name" value="avalon"/>
    <property name="Name" value="Avalon"/>
    <property name="framework.name" value="avalon-framework"/>
    <property name="version" value="4.1.3"/>
    <property name="year" value="1999-2002"/>
    <property name="status" value="final"/>
    <property name="release" value="4th"/>
    <property name="short.version" value="4.1"/>

    <property name="debug" value="on"/>
    <property name="optimize" value="off"/>
    <property name="deprecation" value="off"/>
    <property name="compress.jars" value="true"/>

    <!-- Set the properties for intermediate directory -->
    <property name="target.dir" value="target"/>
    <property name="target.lib" value="${target.dir}/lib"/>
    <property name="target.src" value="${target.dir}/src"/>
    <property name="target.conf" value="${target.dir}/conf"/>
    <property name="target.classes" value="${target.dir}/classes"/>
    <property name="target.javadocs" value="${target.dir}/javadocs"/>
    <property name="target.docs" value="${target.dir}/docs"/>
    <property name="target.testdocs" value="${target.docs}/test"/>
    <property name="target.reports" value="${target.dir}/reports"/>
    <property name="target.context" value="${target.dir}/documentation"/>
    <property name="target.xdocs" value="${target.context}/content/xdocs"/>

    <!-- Set the properties for source directories -->
    <property name="src.dir" value="src"/>
    <property name="java.dir" value="${src.dir}/java"/>
    <property name="test.dir" value="${src.dir}/test"/>
    <property name="conf.dir" value="${src.dir}/conf"/>
    <property name="lib.dir" value="lib"/>
    <property name="tools.dir" value="tools"/>
    <property name="docs.dir" value="docs"/>
    <property name="www.dir" value="../jakarta-avalon-site/docs"/>
    <property name="javadocs.dir" value="${docs.dir}/api"/>
    <property name="xdocs.dir" value="${src.dir}/xdocs"/>
    <property name="context.dir" value="${src.dir}/documentation"/>

    <property name="dist.name" value="${Name}-${version}"/>
    <property name="dist.base" value="distributions"/>

    <property name="tools.jar" value="${java.home}/../lib/tools.jar"/>

    <property name="logkit.jar" value="lib/logkit.jar"/>
    <property name="xerces.jar" value="lib/xerces-2.0.1.jar"/>
    <property name="xalan.jar" value="lib/xalan-2.3.1.jar"/>
    <property name="log4j.jar" value="lib/log4j-1.2.4.jar"/>

    <property name="announce2txt" value="${tools.dir}/announcement2txt.xsl"/>
    <property name="announce2header" value="${tools.dir}/announcement2header.xsl"/>
    <property name="announce2readme" value="${tools.dir}/announcement2readme.xsl"/>
    <property name="announce2site" value="${tools.dir}/announcement2site.xsl"/>
    <property name="document2docbook" value="${context.dir}/stylesheets/document2docbook.xsl"/>

    <path id="project.class.path">
        <pathelement location="${logkit.jar}"/>
        <pathelement location="${xalan.jar}"/>
        <pathelement location="${xerces.jar}"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${log4j.jar}"/>
        <pathelement path="${java.class.path}" />
        <fileset dir="${lib.dir}">
            <include name="*.jar" />
        </fileset>
        <pathelement path="${target.classes}" />
    </path>

    <path id="tools.class.path">
        <pathelement location="${xerces.jar}"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${checkstyle.jar}"/>
        <pathelement location="${tools.jar}"/>
        <fileset dir="${tools.dir}/lib">
            <include name="*.jar" />
        </fileset>
    </path>

    <path id="test.class.path">
        <path refid="tools.class.path"/>
        <path refid="project.class.path"/>
    </path>

    <!-- Main target -->
    <target name="main" depends="all" description="generates the Avalon distribution without the javadocs"/>

    <!-- Help on usage -->
    <target name="usage">
        <echo message="Use the -projecthelp option instead"/>
    </target>

    <target name="dist.lite" depends="main"/>
    <target name="help" depends="usage"/>

    <!-- Set up dist properties -->
    <target name="setup-properties" >
        <available property="log4j.present" classname="org.apache.log4j.Category">
            <classpath refid="project.class.path"/>
        </available>
        <available property="jdk14.present" classname="java.util.logging.Logger">
            <classpath refid="project.class.path"/>
        </available>

        <property name="dist.dir" value="${dist.name}"/>
        <property name="dist.bin" value="${dist.dir}/bin"/>
        <property name="dist.apps" value="${dist.dir}/apps"/>
        <property name="dist.lib" value="${dist.dir}/lib"/>
        <property name="dist.docs" value="${dist.dir}/docs"/>
        <property name="dist.javadocs" value="${dist.dir}/docs/api"/>

        <property name="src.dist.dir" value="${dist.name}-src"/>
        <property name="src.dist.src" value="${src.dist.dir}/src"/>
        <property name="src.dist.docs" value="${src.dist.dir}/docs"/>
        <property name="src.dist.javadocs" value="${src.dist.dir}/docs/api"/>
        <property name="src.dist.lib" value="${src.dist.dir}/lib"/>
        <property name="src.dist.tools" value="${src.dist.dir}/tools"/>
    </target>

    <!-- Prepares the build directory -->
    <target name="prepare">
        <tstamp/>
        <mkdir dir="${target.dir}"/>
    </target>

    <!-- Compiles the source code -->
    <target name="compile" depends="setup-properties,prepare" description="compiles the source code">

        <mkdir dir="${target.classes}"/>

        <javac srcdir="${java.dir}"
            destdir="${target.classes}"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}"
            target="1.2">
            <classpath refid="project.class.path" />
            <src path="${test.dir}"/>
            <exclude name="org/apache/avalon/framework/logger/Log4JLogger.java"
                unless="log4j.present"/>
            <exclude name="org/apache/avalon/framework/logger/Jdk14Logger.java"
                unless="jdk14.present"/>
        </javac>
    </target>

    <!-- Creates the exceptionutil.jar file -->
    <target name="compile-exceptionutil" depends="setup-properties,prepare">

        <mkdir dir="${target.classes}"/>

        <javac srcdir="${java.dir}"
            destdir="${target.classes}"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}"
            target="1.2">
            <include name="org/apache/avalon/framework/ExceptionUtil.java" />
            <include name="org/apache/avalon/framework/Cascading*" />
        </javac>
    </target>

    <target name="jar-exceptionutil" depends="compile-exceptionutil, prepare-conf">
        <mkdir dir="${target.lib}"/>
        <jar jarfile="${target.lib}/exceptionutil.jar"
            basedir="${target.classes}"
            compress="${compress.jars}">
            <manifest>
              <attribute name="Extension-Name" value="avalon-exceptionutil"/>
              <attribute name="Specification-Vendor" value="Apache Software Foundation"/>
              <attribute name="Specification-Version" value="1.0"/>
              <attribute name="Implementation-Vendor" value="Apache Software Foundation"/>
              <attribute name="Implementation-Version" value="${version}"/>
            </manifest>
            <include name="org/apache/avalon/framework/ExceptionUtil.class" />
            <include name="org/apache/avalon/framework/Cascading*" />
            <zipfileset dir="${target.conf}" prefix="META-INF/">
                <include name="LICENSE.txt"/>
            </zipfileset>
        </jar>
    </target>

    <target name="test" depends="check"/>

    <target name="check" depends="compile" description="perform unit tests">
        <echo message="Avalon Framework is mostly interfaces."/>
        <echo message="But some tests to be performed at this time."/>

        <mkdir dir="${target.reports}"/>

        <echo message="Performing Unit Tests" />
        <junit fork="true" printsummary="yes" dir="${target.reports}">
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="test.class.path"/>
                <pathelement location="${target.classes}"/>
            </classpath>
            <batchtest todir="${target.reports}">
                <fileset dir="${target.classes}">
                    <include name="**/test/*TestCase.class"/>
                </fileset>
            </batchtest>
        </junit>

    </target>

    <target name="test-report" depends="compile" >
        <mkdir dir="${target.testdocs}"/>
        <mkdir dir="${target.reports}"/>

        <echo message="Performing Unit Tests" />
        <junit fork="true" printsummary="yes" dir="${target.reports}">
            <formatter type="xml"/>
            <classpath>
                <path refid="test.class.path"/>
                <pathelement location="${target.classes}"/>
            </classpath>
            <batchtest todir="${target.reports}">
                <fileset dir="${target.classes}">
                    <exclude name="**/test/Abstract*TestCase.class"/>
                    <include name="**/test/*Profile.class" if="test.profile"/>
                    <include name="**/test/*TestCase.class"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${target.reports}">
            <fileset dir="${target.reports}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${target.testdocs}"/>
        </junitreport>
    </target>

    <target name="checkstyle" if="do.checkstyle" description="Checkstyle">

        <!-- this invocation of checkstyle requires that checkstyle be downloaded and setup -->
        <!-- thats why you are required to define do.checkstyle property to generate the report -->
        <taskdef name="checkstyle"
            classname="com.puppycrawl.tools.checkstyle.CheckStyleTask">
            <classpath refid="tools.class.path"/>
        </taskdef>
        <checkstyle
            lcurlyType="nl"
            lcurlyMethod="nl"
            lcurlyOther="nl"
            rcurly="ignore"
            allowProtected="false"
            allowPackage="false"
            allowNoAuthor="false"
            maxLineLen="100"
            maxMethodLen="100"
            maxConstructorLen="100"
            memberPattern="^m_[a-z][a-zA-Z0-9]*$"
            staticPattern="^c_[a-z][a-zA-Z0-9]*$"
            constPattern="(^c_[a-z][a-zA-Z0-9]*$)|([A-Z_]*$)"
            ignoreImportLen="true"
            allowTabs="false"
            javadocScope="protected"
            ignoreWhitespace="true"
            cacheFile="checkstyle.cache"
            failOnViolation="false"
            ignoreCastWhitespace="true">
            <fileset dir="${java.dir}">
                <include name="**/*.java"/>
            </fileset>
            <formatter type="plain"/>
        </checkstyle>
    </target>

    <!-- Prepares the documentation directory -->
    <target name="docs" depends="html-docs, javadocs" description="generates all the Avalon documentation"/>

    <target name="prepare-html-docs" depends="prepare" description="prepares the xdocs-based documentation">

   
        <echo message="-------------------------------------------------------------"/>
        <echo message="  Preparing docs..."/>
        
        <property name="use.skin"              value="avalon-tigris"/>

        <!-- Skin filters -->
        <filter token="Name"              value="${Name}"/>
        <filter token="skin"              value="${use.skin}"/>
        <filter token="link1"             value="apache"/>
        <filter token="link1.href"        value="http://www.apache.org"/>
        <filter token="link2"             value="jakarta"/>
        <filter token="link2.href"        value="http://jakarta.apache.org"/>
        <filter token="link3"             value=""/>
        <filter token="link3.href"        value=""/>
        <filter token="group-logo.src"    value="images/jakarta-logo.gif"/>
        <filter token="group-logo.href"   value="http://jakarta.apache.org/"/>
        <filter token="project-logo.src"  value="images/header.gif"/>
        <filter token="project-logo.href" value="http://jakarta.apache.org/avalon/"/>
        <filter token="year" value="2002"/>
        <filter token="vendor" value="Apache Software Foundation"/>

        <delete dir="${target.dir}/work"/>

        <mkdir dir="${target.context}"/>
        <mkdir dir="${target.docs}"/>
        <mkdir dir="${target.xdocs}"/>
        <mkdir dir="${target.dir}/work"/>

        <!-- Base pointers for non-xdocs documentation. Override these in .ant.properties to link to local docs -->
        <property name="avalon.base" value="http://jakarta.apache.org/avalon"/>
        <property name="framework.base" value="http://jakarta.apache.org/avalon/framework"/>
        <property name="excalibur.base" value="http://jakarta.apache.org/avalon/excalibur"/>
        <property name="phoenix.base" value="http://jakarta.apache.org/avalon/phoenix"/>
        <property name="cornerstone.base" value="http://jakarta.apache.org/avalon/cornerstone"/>
        <property name="logkit.base" value="http://jakarta.apache.org/avalon/logkit"/>
        <property name="apps.base" value="http://jakarta.apache.org/avalon/apps"/>
        <property name="testlet.base" value="http://jakarta.apache.org/avalon/testlet"/>

        <filter token="year" value="${year}"/>
        <filter token="AVALON_BASE" value="${avalon.base}"/>
        <filter token="FRAMEWORK_BASE" value="${framework.base}"/>
        <filter token="EXCALIBUR_BASE" value="${excalibur.base}"/>
        <filter token="PHOENIX_BASE" value="${phoenix.base}"/>
        <filter token="CORNERSTONE_BASE" value="${cornerstone.base}"/>
        <filter token="LOGKIT_BASE" value="${logkit.base}"/>
        <filter token="TESTLET_BASE" value="${testlet.base}"/>
        <filter token="APPS_BASE" value="${apps.base}"/>

        <copy todir="${target.context}" overwrite="true" filtering="on">
            <fileset dir="${context.dir}">
                <exclude name="**/*.ico"/>
                <exclude name="**/*.gif"/>
                <exclude name="**/*.jpg"/>
                <exclude name="**/*.png"/>
            </fileset>
        </copy>

        <copy todir="${target.context}" filtering="off">
            <fileset dir="${context.dir}">
                <include name="**/*.ico"/>
                <include name="**/*.gif"/>
                <include name="**/*.jpg"/>
                <include name="**/*.png"/>
            </fileset>
        </copy>
        <copy todir="${target.xdocs}" filtering="on" overwrite="true">
            <fileset dir="${xdocs.dir}"/>
        </copy>


        <copy file="${context.dir}/resources/schema/CatalogManager.properties"
              todir="${target.context}/resources/schema" filtering="off"/>

        <echo message="                   ok."/>
        
   </target>

   <target name="html-docs" depends="prepare-html-docs" description="generates the xdocs-based documentation">

        <echo message="              -"/>
        <echo message="  Generating docs, please stand by ..."/>
 
        <java classname="org.apache.cocoon.Main" fork="true" maxmemory="128m" failonerror="true">
        
            <arg value="-c${target.context}/"/>
            <arg value="-d${target.docs}"/>
            <arg value="-w${target.dir}/work"/>
            <arg value="-b${target.dir}/brokenlinks.txt"/>            
            <arg value="-k${target.context}/logkit.xconf"/>
            <!-- <arg value="-l${target.dir}/work/cocoon.log"/> -->
            <arg value="-uERROR"/>
            <arg value="-V"/>            
            <arg value="index.html"/>
            <classpath>
                <path refid="tools.class.path"/>
                <fileset dir="${tools.dir}/ext">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </java>

        <delete dir="${target.dir}/work"/>

        <echo message="  ...docs generated succesfully in ./build/docs dir."/>
        <echo message="-------------------------------------------------------------"/>

        <mkdir dir="${target.docs}/framework/diagrams"/>
        <copy todir="${target.docs}/framework/diagrams" filtering="off">
            <fileset dir="${src.dir}/diagrams"/>
        </copy>

    </target>
  
    <!-- Create the API documentation -->
    <target name="javadocs" description="generates the API documentation (java 1.2+ only)">

        <delete dir="${target.javadocs}"/>
        <mkdir dir="${target.javadocs}"/>

        <javadoc packagenames="org.apache.*"
            sourcepath="${java.dir}"
            destdir="${target.javadocs}">
            <classpath refid="project.class.path" />
            <doclet name="com.sun.tools.doclets.standard.Standard">
                <param name="-author"/>
                <param name="-version"/>
                <param name="-doctitle" value="${Name}"/>
                <param name="-windowtitle" value="${Name} API"/>
                <param name="-bottom"
                    value="&quot;Copyright &#169; 2001 Apache Jakarta Project. All Rights Reserved.&quot;"/>
            </doclet>
        </javadoc>

    </target>

    <!-- Create the Local site documentation -->
    <target name="local-xdocs" depends="docs">

        <delete>
            <fileset dir="${docs.dir}">
                <exclude name="api/**"/>
            </fileset>
        </delete>
        <mkdir dir="${docs.dir}"/>

        <copy todir="${docs.dir}">
            <fileset dir="${target.docs}" />
        </copy>

    </target>

    <!-- Create the Local API documentation -->
    <target name="local-javadocs" depends="javadocs">

        <delete dir="${javadocs.dir}"/>
        <mkdir dir="${javadocs.dir}"/>

        <copy todir="${javadocs.dir}">
            <fileset dir="${target.javadocs}" />
        </copy>

    </target>

    <target name="local-docs" depends="local-javadocs,local-xdocs"/>

    <!-- Update the www directory -->
    <target name="site-docs" depends="local-docs">

        <mkdir dir="${www.dir}"/>

        <!-- delete all old documents but keep CVS directories -->
        <!-- note that by doing an include the defaultexcludes (CVS dirs) will be kept -->
        <delete>
            <fileset dir="${www.dir}">
                <exclude name="apps/**"/>
                <exclude name="excalibur/**"/>
                <exclude name="logkit/**"/>
                <exclude name="cornerstone/**"/>
                <exclude name="phoenix/**"/>
                <exclude name="testlet/**"/>
            </fileset>
        </delete>


        <copy todir="${www.dir}">
            <fileset dir="${docs.dir}" />
        </copy>

    </target>

    <!-- Create the announcements and HEADER.html -->
    <target name="announcement" depends="setup-properties">

        <filter token="Name" value="Avalon Framework"/>
        <filter token="name" value="framework"/>
        <filter token="version" value="${version}"/>
        <filter token="year" value="${year}"/>
        <filter token="status" value="${status}"/>
        <filter token="release" value="${release}"/>
        <filter token="short-version" value="${short.version}"/>

        <mkdir dir="${target.dir}" />
        <mkdir dir="${dist.base}" />

        <copy todir="${target.context}" overwrite="true" filtering="on">
            <fileset dir="${context.dir}">
                <exclude name="**/*.ico"/>
                <exclude name="**/*.gif"/>
                <exclude name="**/*.jpg"/>
                <exclude name="**/*.png"/>
            </fileset>
        </copy>
        <copy todir="${target.context}" filtering="off">
            <fileset dir="${context.dir}">
                <include name="**/*.ico"/>
                <include name="**/*.gif"/>
                <include name="**/*.jpg"/>
                <include name="**/*.png"/>
            </fileset>
        </copy>
        <copy todir="${target.xdocs}" overwrite="true" filtering="on">
            <fileset dir="${xdocs.dir}"/>
        </copy>

        <style style="${announce2txt}" in="${tools.dir}/announcement.xml"
            out="Announcement.txt"/>
        <style style="${announce2header}" in="${tools.dir}/announcement.xml"
            out="${dist.base}/HEADER.html"/>
        <style style="${announce2readme}" in="${tools.dir}/announcement.xml"
            out="${dist.base}/README.html"/>
        <style style="${announce2site}" in="${tools.dir}/announcement.xml"
            out="jakarta-news.xml"/>

    </target>

    <!-- Copies and filters the license. Used by jar and dist -->
    <target name="prepare-conf">
        <mkdir dir="${target.conf}"/>
        <copy todir="${target.conf}" flatten="true">
            <fileset dir="." includes="LICENSE.txt"/>

            <filterset>
                <filter token="name" value="${framework.name}"/>
                <filter token="version" value="${version}"/>
                <filter token="year" value="${year}"/>
            </filterset>
        </copy>

    </target>

    <!-- Creates all the .jar files -->
    <target name="all" depends="compile, prepare-conf" description="generates the Avalon jar files">
        <mkdir dir="${target.lib}"/>
        <jar jarfile="${target.lib}/${framework.name}.jar"
            basedir="${target.classes}"
            compress="${compress.jars}">
            <manifest>
              <attribute name="Extension-Name" value="${framework.name}"/>
              <attribute name="Specification-Vendor" value="Apache Software Foundation"/>
              <attribute name="Specification-Version" value="1.0"/>
              <attribute name="Implementation-Vendor" value="Apache Software Foundation"/>
              <attribute name="Implementation-Version" value="${version}"/>
            </manifest>
            <exclude name="**/test/*"/>
            <include name="org/apache/avalon/framework/**"/>
            <zipfileset dir="${target.conf}" prefix="META-INF/">
                <include name="LICENSE.txt"/>
            </zipfileset>
        </jar>
    </target>

    <target name="install" depends="all,install-check-cjan">
        <mkdir dir="${cjan.lib}" />
        <copy file="${target.lib}/${framework.name}.jar" todir="${cjan.lib}"/>
    </target>

    <target name="install-check-cjan" unless="cjan.lib">
        <fail message="cjan.lib not specified." />
    </target>

    <target name="uninstall" depends="install-check-cjan">
        <delete file="${target.lib}/${framework.name}.jar" dir="${cjan.lib}"/>
    </target>

    <!-- Create the distribution -->
    <target name="bin-dist" depends="all">

        <mkdir dir="${dist.dir}"/>
        <copy file="${target.lib}/${framework.name}.jar" tofile="${dist.dir}/${framework.name}-${version}.jar"/>
        <copy file="${logkit.jar}" todir="${dist.dir}"/>

        <mkdir dir="${dist.docs}"/>
        <mkdir dir="${dist.javadocs}"/>

        <copy todir="${dist.docs}">
            <fileset dir="${docs.dir}"/>
        </copy>

        <copy todir="${dist.dir}">
            <fileset dir=".">
                <include name="README.txt"/>
                <include name="KEYS"/>
                <include name="LICENSE.txt"/>
            </fileset>
        </copy>

        <chmod dir="${dist.dir}" perm="go-rwx" />

    </target>

    <!-- Create the source distribution -->
    <target name="src-dist" depends="setup-properties">

        <mkdir dir="${src.dist.dir}" />

        <copy todir="${src.dist.lib}">
            <fileset dir="${lib.dir}">
                <include name="README.txt" />
            </fileset>
        </copy>

        <copy file="${logkit.jar}" todir="${src.dist.lib}"/>

        <copy todir="${src.dist.src}">
            <fileset dir="${src.dir}"/>
        </copy>

        <copy todir="${src.dist.docs}">
            <fileset dir="${target.docs}"/>
        </copy>

        <copy todir="${src.dist.javadocs}">
            <fileset dir="${target.javadocs}"/>
        </copy>

        <copy todir="${src.dist.dir}/tools">
            <fileset dir="${tools.dir}">
                <include name="*.xsl"/>
            </fileset>
        </copy>

        <filter token="version" value="${version}"/>
        <filter token="year" value="${year}"/>
        <copy todir="${src.dist.dir}" filtering="on">
            <fileset dir=".">
                <include name="README.txt"/>
                <include name="BUILDING.txt"/>
                <include name="LICENSE.txt"/>
                <include name="KEYS"/>
                <include name="ant.properties.sample"/>
                <include name="target.xml"/>
            </fileset>
        </copy>

        <fixcrlf srcdir="${src.dist.dir}" includes="target.sh" eol="lf"/>
        <fixcrlf srcdir="${src.dist.dir}" includes="target.bat" eol="crlf"/>

        <fixcrlf srcdir="${src.dist.src}/java" includes="**/*.java" eol="lf"/>

        <chmod dir="${src.dist.dir}" perm="go-rwx" />

    </target>

    <!-- Completely build all dists -->
    <target name="dist" depends="announcement,site-docs" description="generates the Avalon distribution">
        <mkdir dir="${dist.base}"/>

        <antcall target="bin-dist">
            <param name="dist.dir" value="${dist.name}" />
        </antcall>

        <copy file="${target.lib}/avalon-framework.jar" tofile="${tools.dir}/ext/avalon-framework.jar"/>

        <zip file="${dist.base}/${dist.name}-bin.zip"
            basedir="${dist.name}/.."
            includes="${dist.name}/**"/>

        <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-bin.tar">
            <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
                <include name="${dist.name}/**"/>
            </tarfileset>
        </tar>

        <gzip zipfile="${dist.base}/${dist.name}-bin.tar.gz"
            src="${dist.base}/${dist.name}-bin.tar"/>

        <delete file="${dist.base}/${dist.name}-bin.tar"/>
        <delete dir="${dist.name}" />

        <antcall target="src-dist">
            <param name="src.dist.dir" value="${dist.name}" />
        </antcall>

        <copy todir="${dist.name}">
            <fileset dir="${src.dist.dir}"/>
        </copy>

        <zip file="${dist.base}/${dist.name}-src.zip"
            basedir="${dist.name}/.."
            includes="${dist.name}/**"/>

        <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-src.tar" >
            <tarfileset dir="${dist.name}/.." mode="755" username="avalon" group="avalon">
                <include name="${dist.name}/target.sh"/>
            </tarfileset>
            <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
                <include name="${dist.name}/**"/>
                <exclude name="${dist.name}/target.sh"/>
            </tarfileset>
        </tar>

        <gzip zipfile="${dist.base}/${dist.name}-src.tar.gz"
            src="${dist.base}/${dist.name}-src.tar"/>

        <delete file="${dist.base}/${dist.name}-src.tar"/>
        <delete dir="${dist.name}" />
        <delete dir="${src.dist.dir}"/>

    </target>

    <target name="sitebook2docbook" description="goes through all the xdocs and transforms them to docbook">
        <style style="${document2docbook}"
            basedir="${context.dir}/xdocs"
            destdir="${target.context}/xdocs"
            extension=".xml"
            includes="*.xml,*/*.xml,*/*/*.xml"/>
    </target>

    <!-- Cleans up build and distribution directories -->
    <target name="clean" depends="setup-properties" description="cleans up the created directories">
        <delete dir="${target.dir}" />
        <delete dir="${dist.dir}" />
        <delete>
            <fileset dir="." includes="**/*~" defaultexcludes="no"/>
        </delete>
    </target>

    <!-- Cleans absolutely everything up -->
    <target name="distclean" depends="clean" description="cleans up all generated files and directories">
        <delete dir="${docs.dir}" />
        <delete dir="${dist.base}" />
        <delete dir="${src.dist.dir}" />
        <delete file="Announcement.txt" />
        <delete file="jakarta-news.xml" />
    </target>

</project>
