<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->

<document>

    <properties>
        <author email="mcconnell@apache.org">Stephen McConnell</author>
        <title>Avalon Repository - SPI</title>
    </properties>

    <body>

      <section name="Avalon Repository SPI">

        <subsection name="Service Provider Interface (SPI)">
          <p>
          The Avalon Repository SPI extends the API to provide a set 
          of services that define the contact for plugin facilities. 
          The Avalon Repository main bootstrapping system 
          provides out-of-the-box support for concurrent deployment of 
          multiple repository implementations enabling complete customization
          and future-proof evolution of artifact access and deployment needs. 
          It achives this functionality by applying the same plugin process to
          its own implementation.  
          </p>
        </subsection>

      </section>
      <section name="Plugin Facilities">
        <subsection name="Factory Pattern">
          <p>
          A plugin facility is requred to implement on of the following 
          constructor patterns.
          </p>
          <table>
            <tr><th>Constructor</th><th>Description</th></tr>
            <tr>
              <td>
<source>
public MyFactory( 
    InitialContext context, 
    ClassLoader loader )
{
}</source></td>
              <td>
                  Creation of a new factory using a supplied initial
                  repository context and a classloader established by
                  the bootstrap facility.  The classloader will be 
                  fully populated in accordance with the metadata
                  published by the factory.
              </td>
            </tr>
            <tr>
              <td>
<source>
public MyFactory( 
    InitialContext context )
{
}</source></td>
              <td>
                  Creation of a new factory using a supplied initial
                  repository context.
              </td>
            </tr>
            <tr>
              <td>
<source>
public MyFactory( 
    InitialContext context )
{
}</source></td>
              <td>
                  Creation of a new factory using a supplied classloader 
                  established by the bootstrap facility.  The classloader 
                  will be fully populated in accordance with the metadata
                  published by the factory.
              </td>
            </tr>
            <tr>
              <td>
<source>
public MyFactory()
{
}</source></td>
              <td>
                  Creation of a new factory.
              </td>
            </tr>
          </table>
        </subsection>
        <subsection name="Criteria Management">
          <p>
          The object established by the factory constructor must implement
          the Factory interface.
          </p>
<source>
public interface Factory
{
   /**
    * Return a new instance of default criteria for the factory.
    * @return a new criteria instance
    */
    Map createDefaultCriteria();

   /**
    * Create a new instance of an application.
    * @return the application instance
    */
    Object create() throws Exception;

   /**
    * Create a new instance of an application.
    * @param criteria the creation criteria
    * @return the application instance
    */
    Object create( Map criteria ) throws Exception;

}
</source>
          <p>
          A client on aquiring the factory will get the default
          criteria value and use this to parameterize the factory.
          On completion of parameterization (by setting application
          specific named values), the create operation is invoked and
          returns a new instance of the facility.
          </p>
        </subsection>
      </section>
    </body>

</document>


