<project default="avalon:build"  xmlns:maven="jelly:maven" xmlns:j="jelly:core" xmlns:util="jelly:util" xmlns:ant="jelly:ant">

  <ant:property name="meta.plugin.version" value="1.2"/>
  <ant:property name="meta.plugin.groupId" value="avalon-meta"/>   
  <ant:property name="meta.plugin.artifactId" value="avalon-meta-plugin"/>   
  <ant:property name="meta.plugin.jar" 
    value="${meta.plugin.artifactId}-${meta.plugin.version}.jar"/>   

  <ant:property name="maven.ui.banner.background" value="#fff"/>
  <ant:property name="maven.ui.banner.foreground" value="#000"/>
  <ant:property name="maven.docs.src" value="${basedir}/site/xdocs"/>
  <ant:property name="sun.j2se.link" value="http://java.sun.com/j2se/1.4/docs/api/"/>
  <ant:property name="framework.api.link" value="http://avalon.apache.org/framework/api/"/>
  <ant:property name="maven.javadoc.links" value="${sun.j2se.link},${framework.api.link}"/>

  <ant:property name="maven.dist.assembly.dir"
    value="${maven.build.dir}/temp"/>
  <ant:property name="maven.dist.bin.archive.dir"
    value="${maven.dist.assembly.dir}/bin"/>
  <ant:property name="maven.dist.src.archive.dir"
    value="${maven.dist.assembly.dir}/src"/>
  <ant:property name="maven.dist.bin.assembly.dir"
    value="${maven.dist.assembly.dir}/bin/${pom.artifactId}"/>
  <ant:property name="maven.dist.src.assembly.dir"
    value="${maven.dist.assembly.dir}/src/${pom.artifactId}"/>
  <ant:property name="maven.dist.dir"
    value="${maven.build.dir}/distributions"/>

  <goal name="avalon:clean" prereqs="clean">
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      goals="clean"
      banner="Cleaning:"
      ignoreFailures="false"/>
  </goal>

  <goal name="avalon:build">
    
    <echo>

Building the framework using the default target "avalon:build".
The complete set of target include:

  avalon:clean
  avalon:build ---------- default goal
  avalon:build-snapshot
  avalon:dist
  avalon:site
    </echo>

    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      goals=""
      banner="Building:"
      ignoreFailures="false"/>
    <ant:copy todir="${maven.build.dir}">
      <ant:fileset dir="${basedir}/api/target">
        <ant:include name="${pom.artifactId}-api-${pom.currentVersion}.jar"/>
      </ant:fileset>
      <ant:fileset dir="${basedir}/spi/target">
        <ant:include name="${pom.artifactId}-spi-${pom.currentVersion}.jar"/>
      </ant:fileset>
      <ant:fileset dir="${basedir}/impl/target">
        <ant:include name="${pom.artifactId}-impl-${pom.currentVersion}.jar"/>
      </ant:fileset>
      <ant:fileset dir="${basedir}/tools/target">
        <ant:include name="${pom.artifactId}-tools-${pom.currentVersion}.jar"/>
      </ant:fileset>
      <ant:fileset dir="${basedir}/plugin/target">
        <ant:include name="${pom.artifactId}-plugin-${meta.plugin.version}.jar"/>
      </ant:fileset>
    </ant:copy>

  </goal>

  <goal name="avalon:build-snapshot">
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      excludes="plugin/project.xml"
      goals="jar:install-snapshot"
      banner="Building snapshot:"
      ignoreFailures="false"/>
  </goal>

  <goal name="avalon:dist" prereqs="avalon:build,avalon:site,xdist"/>

  <goal name="avalon:site" prereqs="avalon:build,xsite"/>

  <goal name="xsite">
    <ant:mkdir dir="${maven.build.dir}"/>
    <maven:reactor
      basedir="${basedir}"
      includes="platform.xml"
      goals="license,xjavadoc,site"
      banner="Building site:"
      ignoreFailures="false"/>
  </goal>


  <goal name="xjavadoc">
    <mkdir dir="${basedir}/target/docs/api" />
    <property name="copyright"
      value="Copyright &amp;copy; ${year} ${pom.organization.name}. All Rights Reserved." />
    <property name="title" value="${pom.name} ${pom.currentVersion} API"/>
    <javadoc destdir="${basedir}/target/docs/api" 
	doctitle="&lt;h1&gt;Avalon Meta&lt;/h1&gt;" 
      noindex="false" author="true" use="true"
	windowtitle="${title}" 
      bottom="${copyright}"
      additionalparam="-breakiterator -J-Xmx128m "
      packagenames="*,org.*">
        <j:forEach var="packageGroup" items="${pom.packageGroups}">
      	  <group title="${packageGroup.title}" packages="${packageGroup.packages}"/>
        </j:forEach>
        <sourcepath path="${basedir}/api/src/java"/>
        <sourcepath path="${basedir}/spi/src/java"/>
        <sourcepath path="${basedir}/impl/src/java"/>
        <sourcepath path="${basedir}/tools/src/java"/>
        <classpath>
          <path refid="maven.dependency.classpath"/>
	  </classpath>
	  <link href="${sun.j2se.link}" />
	  <link href="${avalon.framework.link}" />
	  <link href="${ant.link}" />
	  <link href="${qdox.link}" />
    </javadoc>
  </goal>

  <goal
    name="xdist:prepare-bin-filesystem" 
    description="Builds the jar files.">

    <ant:delete dir="${maven.dist.bin.assembly.dir}"/>
    <ant:mkdir dir="${maven.dist.bin.assembly.dir}"/>
    <ant:echo>
      +-------------------------------------------------------+
      | C R E A T I N G  B I N A R Y  D I S T R I B U T I O N |
      +-------------------------------------------------------+
    </ant:echo>
    <ant:copy todir="${maven.dist.bin.assembly.dir}">
      <ant:fileset dir=".">
        <ant:include name="README.txt"/>
        <ant:include name="LICENSE*"/>
      </ant:fileset>
    </ant:copy>

    <!-- Copy Jars -->
    <ant:copy todir="${maven.dist.bin.assembly.dir}">
      <ant:fileset dir="${maven.build.dir}">
        <ant:include name="${pom.artifactId}-api-${pom.currentVersion}.jar"/>
        <ant:include name="${pom.artifactId}-spi-${pom.currentVersion}.jar"/>
        <ant:include name="${pom.artifactId}-impl-${pom.currentVersion}.jar"/>
        <ant:include name="${pom.artifactId}-tools-${pom.currentVersion}.jar"/>
        <ant:include name="${pom.artifactId}-plugin-${meta.plugin.version}.jar"/>
        <ant:include name="docs/**"/>
      </ant:fileset>
    </ant:copy>
  </goal>

  <goal
    name="xdist:prepare-src-filesystem"
    description="Builds the source distribution file system.">
    <ant:delete dir="${maven.dist.src.assembly.dir}" />
    <ant:mkdir dir="${maven.dist.src.assembly.dir}" />

    <ant:echo>
      +-------------------------------------------------------+
      | C R E A T I N G  S O U R C E  D I S T R I B U T I O N |
      +-------------------------------------------------------+
    </ant:echo>

    <ant:copy todir="${maven.dist.src.assembly.dir}">
      <ant:fileset dir=".">
        <ant:include name="README.txt"/>
        <ant:include name="LICENSE*"/>
        <ant:include name="project.properties"/>
        <ant:include name="maven.xml"/>
        <ant:include name="project.xml"/>
      </ant:fileset>
    </ant:copy>

    <!-- Copy Source -->
    <ant:copy todir="${maven.dist.src.assembly.dir}">
      <ant:fileset dir="${basedir}">
        <include name="api/**"/>
        <include name="spi/**"/>
        <include name="impl/**"/>
        <include name="tools/**"/>
        <include name="site/**"/>
        <exclude name="**/target/**"/>
        <exclude name="**/*.log"/>
      </ant:fileset>
    </ant:copy>

  </goal>

  <goal name="xdist"
    prereqs="xdist:build"
    description="Build a complete distribution.">
  </goal>
        
  <goal
    name="xdist:build"
    prereqs="xdist:build-bin,xdist:build-src"
    description="Build a complete distribution.">
  </goal>

  <goal
    name="xdist:build-setup"
    description="Set up directories for a distribution build">
    <ant:delete dir="${maven.dist.dir}"/>
    <ant:mkdir dir="${maven.dist.dir}"/>
  </goal>

  <goal
    name="xdist:build-bin" 
    prereqs="xdist:build-setup,xdist:prepare-bin-filesystem"
    description="Build the binary distribution.">

    <!-- Create a tar.gz file -->
    <ant:tar longfile="gnu" tarfile="${maven.dist.dir}/${maven.final.name}.tar">
      <ant:tarfileset dir="${maven.dist.bin.archive.dir}"/>
    </ant:tar>

    <ant:gzip 
      zipfile="${maven.dist.dir}/${maven.final.name}.tar.gz"
      src="${maven.dist.dir}/${maven.final.name}.tar"
    />
    
    <ant:delete file="${maven.dist.dir}/${maven.final.name}.tar"/>

    <!-- Create a zip file -->
    <ant:zip zipfile="${maven.dist.dir}/${maven.final.name}.zip">
      <ant:zipfileset dir="${maven.dist.bin.archive.dir}"/>
    </ant:zip>
  </goal>

  <goal
    name="xdist:build-src"
    prereqs="xdist:build-setup,xdist:prepare-src-filesystem"
    description="Build the source distribution.">
 
    <!-- Create a tar.gz file -->
    <ant:tar longfile="gnu" tarfile="${maven.dist.dir}/${maven.final.name}-src.tar">
      <ant:tarfileset dir="${maven.dist.src.archive.dir}"/>
    </ant:tar>

    <ant:gzip 
      zipfile="${maven.dist.dir}/${maven.final.name}-src.tar.gz" 
      src="${maven.dist.dir}/${maven.final.name}-src.tar"
    />
    
    <ant:delete file="${maven.dist.dir}/${maven.final.name}-src.tar"/>

    <!-- Create a zip file -->
    <ant:zip zipfile="${maven.dist.dir}/${maven.final.name}-src.zip">
      <ant:zipfileset dir="${maven.dist.src.archive.dir}"/>
    </ant:zip>

  </goal>

  <postGoal name="java:prepare-filesystem">
    <ant:available file="${maven.home}/plugins/${meta.plugin.jar}"
      property="metaPluginPresent"/>
    <j:if test="${metaPluginPresent != 'true'}">
      <ant:echo>
#####################################################################
#                                                                   #
#   WARNING:                                                        #
#   You do not have the required version of the avalon-meta         #
#   plugin installed on your system.                                #
#   Please invoke the following command                             #
#                                                                   #
#     $ maven avalon:setup                                          #
#                                                                   #
#####################################################################</ant:echo>
      <attainGoal name="avalon:setup"/>
    </j:if>
  </postGoal>

  <goal name="avalon:setup">
    <echo>
Initiating download and installation of the Avalon Meta Plugin.
${meta.plugin.artifactId}-${meta.plugin.version}.jar</echo>
    <j:set var="repoList">${maven.repo.remote}</j:set> 
    <util:tokenize var="repos" delim=",">${repoList.trim()}</util:tokenize> 
    <j:forEach var="repo" items="${repos}"> 
      <echo>repository '${repo}'</echo> 
      <util:file var="localPlugin" name="${maven.home}/plugins/${meta.plugin.artifactId}-${meta.plugin.version}.jar" /> 
      <j:if test="${!localPlugin.exists()}"> 
        <j:set var="remoteFile" value="${repo}/${meta.plugin.groupId}/plugins/${meta.plugin.artifactId}-${meta.plugin.version}.jar" /> 
        <echo>trying to download ${remoteFile}</echo> 
        <j:catch var="ex"> 
        <j:invokeStatic var="dummy" method="getFile" className="org.apache.maven.util.HttpUtils"> 
          <j:arg type="java.lang.String" value="${remoteFile}" /> 
          <j:arg type="java.io.File" value="${localPlugin}"/> 
          <j:arg type="boolean" value="false"/> 
          <j:arg type="boolean" value="true"/> 
          <j:arg type="java.lang.String" value="${maven.proxy.host}" /> 
          <j:arg type="java.lang.String" value="${maven.proxy.port}" /> 
          <j:arg type="java.lang.String" value="${maven.proxy.username}" /> 
          <j:arg type="java.lang.String" value="${maven.proxy.password}" /> 
          <j:arg type="boolean" value="false"/> 
        </j:invokeStatic> 
        </j:catch> 
      </j:if> 
      <j:break test="${localPlugin.exists()}"/> 
    </j:forEach>
    <j:set var="downloaded" value="${localPlugin.exists()}"/> 
    <j:if test="${!downloaded}"> 
      <ant:fail message="Unable to find plug-in" /> 
    </j:if> 
    <j:if test="${downloaded}">
      <ant:move file="${localPlugin}" toFile="tmp.jar"/>
      <echo>Plugin downloaded, removing other versions</echo> 
      <delete verbose="false"> 
        <fileset dir="${maven.home}/plugins">
          <include name="${meta.plugin.artifactId}-*.jar" /> 
          <exclude name="${meta.plugin.artifactId}-${meta.plugin.version}.jar" /> 
        </fileset> 
      </delete> 
      <delete includeEmptyDirs="true" verbose="false"> 
        <fileset dir="${maven.plugin.unpacked.dir}"> 
          <include name="*.cache"/> 
          <include name="**/.processed" /> 
          <include name="${meta.plugin.artifactId}-*/**" /> 
        </fileset>
      </delete>
      <ant:move file="tmp.jar" toFile="${localPlugin}"/>
    </j:if> 
  </goal>

</project>
