<?xml version="1.0"?>

<document>
  <properties>
    <author email="mcconnell@apache.org">Stephen McConnell</author>
    <title>Avalon Plugin for Maven</title>
  </properties>
  <body>
    <section name="Avalon Plugin for Maven">
      <subsection name="Meta Generation">
      <p>
The Avalon Plugin for Maven provides support for developers in the management of Maven based projects that leverage the Avalon component model.  This plugin will be progressively extended with Avalon and related sub-system utilities.  Currently the plugin provides support for a meta info generation process based on javadoc tags within class and interface source files.
      </p>
      </subsection>
      <subsection name="Goals">
        <table>
          <tr><th>Goal</th><th>Description</th></tr>
          <tr>
            <td>avalon:meta</td>
            <td>
          <p>Generates meta info descriptors for service and component types
          based on javadoc tags within the java source files.  Source class files
          are scanned for the presence of an @avalon.component or @avalon service tag and if 
          present, a meta descriptor is generated.</p>
          
          <p>Meta info generation process includes:</p>
          <ul>
            <li>Scan source files for avalon.type or @avalon.service tags</li>
            <li>Build Type and Service descriptors</li>
            <li>Externalize descriptors to serial or xml format</li>
          </ul>
          <p>Resulting meta info descriptors are placed int the ${basedir}/target/src directory.  Typical application scenario is to define a preGoal to handle meta-info generation under the maven.xml file and inclusion of the output meta info under the project.xml jar resources.</p>
<p><i>maven.xml example</i></p>
<source><![CDATA[
  <project default="jar:jar">
    <preGoal name="jar:jar">
      <attainGoal name="avalon:meta"/>
    </preGoal>
  </project>
]]></source>
<p><i>project.xml example</i></p>
<source><![CDATA[
  <project>
    <!-- other stuff -->
    <build>
      <!-- more stuff -->
      <resources>
        <!-- include the generated meta-info descriptors into you jar file -->
        <resource>
          <directory>${basedir}/target/src</directory> 
          <includes>
            <include>**/*.x*</include> <!-- meta info desriptors -->
          </includes>
        </resource>
      </resources>
    </build>
  </project>
]]></source>
            </td>
          </tr>
        </table>
      </subsection>
      <subsection name="Properties">
      <table>
        <tr>
          <th>Property name</th>
          <th>Optional?</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>avalon.meta.format</td>
          <td>Yes</td>
          <td>
<p>Output format specification.  Valid values include 'xml' or 'serial'.
The xml value instructs the meta generator to create meta descriptions
in an XML format whereas the 'serial' value generates a serialized 
description of the descriptor.  Serial format is more efficient.  The 
XML format is more portable.</p>
<p>
Default behaviour:
</p>
<source><![CDATA[
avalon.meta.format="xml"
]]></source>
          </td>
        </tr>
        <tr>
          <td>avalon.meta.force</td>
          <td>Yes</td>
          <td>
<p>Policy controlling the regeneration of meta descriptors independently
of the descriptor data.  This value default to false. </p>
<p>
Default behaviour:
</p>
<source><![CDATA[
avalon.meta.force="false"
]]></source>
          </td>
        </tr>
        <tr>
          <td>avalon.meta.type.postfix</td>
          <td>No</td>
          <td>
<p>
Avalon will default to the generation of XML type descriptors under
the .xinfo file type.  When generating meta-info descriptors targetted
for deployment in both Merlin and Phoenix, the xinfo type will conflict
with the Phoenix meta-info descriptor. Avalon Plugin provides support for 
generation of meta info under the alternative .xtype.  To control the 
type of file generated, you can declare either "xinfo" or "xtype" under
this property. 
</p>
<p>
Default behaviour:
</p>
<source><![CDATA[
avalon.meta.type.postfix="xinfo"
]]></source>
<p>
Alternative xtype behaviour:
</p>
<source><![CDATA[
avalon.meta.type.postfix="xtype"
]]></source>

          </td>
        </tr>
      </table>
      </subsection>
    </section>
  </body>
</document>



