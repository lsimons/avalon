<?xml version="1.0"?>

<!-- this ant buildfile provides base functionality for gump
     integration. You should not normally have to modify this
     by hand. -->
<project name="Gump Build Support" default="warning" basedir=".">
    <!-- note the lack of property file inclusion. You should
         do that from the script which calls this file. -->

    <target name="avalon:warning" unless="do.not.warn">
        <echo>
=======================================================================
                          WARNING!

  This buildfile is only here for gump integration. Please use
  maven (http://maven.apache.org/) for normal builds.
=======================================================================
        </echo>
    </target>

    <target name="avalon:debug" depends="avalon:init" unless="do.not.debug">
        <echo>
=======================================================================
DEBUG INFO

  maven.src.dir             = ${maven.src.dir}
  maven.build.dir           = ${maven.build.dir}
  maven.compile.debug       = ${maven.compile.debug}
  maven.compile.deprecation = ${maven.compile.deprecation}
  maven.compile.optimize    = ${maven.compile.optimize}

  project.name              = ${project.name}
  project.version           = ${project.version}
  project.copyright.year    = ${project.copyright.year}

  java sources = ${maven.src.dir}/java
  java classes = ${maven.build.dir}/classes
  jarfile      = ${maven.build.dir}/${project.name}-${project.version}.jar
  javadocs     = ${maven.build.dir}/docs/apidocs
=======================================================================
        </echo>
    </target>

    <target name="avalon:warn-project.name" unless="project.name.set">
        <echo>
=======================================================================
                          WARNING!

  The property 'project.name' has not been set. This will result in a
  jar file with a rather dumb name, being

  ${maven.build.dir}/${project.name}-${project.version}.jar

  To fix this, add a property to the gump build definition or the
  properties file for the current component.
=======================================================================
        </echo>
    </target>

    <target name="avalon:init">
        <antcall target="avalon:warning"/>

        <!-- defaults -->
        <property name="maven.src.dir" value="${basedir}/src"/>
        <property name="maven.build.dir" value="${basedir}/target"/>
        <property name="maven.compile.debug" value="on"/>
        <property name="maven.compile.optimize" value="off"/>
        <property name="maven.compile.deprecation" value="off"/>
        <property name="maven.junit.fork" value="off"/>
        <property name="maven.junit.dir" value="${basedir}"/>
        <property name="maven.junit.usefile" value="true"/>

        <property name="project.name" value="some-nameless-gump-built-component"/>
        <tstamp>
            <format property="project.version" pattern="yyyyMMdd"/>
        </tstamp>
        <property name="project.copyright.year" value="1997-2003"/>

        <condition property="project.name.set">
            <isset property="project.name"/>
        </condition>
        <antcall target="avalon:warn-project.name"/>
    </target>

    <target name="avalon:jar" depends="avalon:init">
        <available file="${basedir}/src/api" property="api.src.present"/>
        <available file="${basedir}/src/impl" property="impl.src.present"/>
        <available file="${basedir}/src/java" property="java.src.present"/>
        <available file="${basedir}/src/test" property="test.src.present"/>

        <antcall target="avalon:api-compile"/>
        <antcall target="avalon:impl-compile"/>
        <antcall target="avalon:java-compile"/>
        <antcall target="avalon:test"/>

        <available file="${basedir}/target/classes" property="classes.present"/>
        <available file="${basedir}/target/api-classes" property="api-classes.present"/>
        <available file="${basedir}/target/impl-classes" property="impl-classes.present"/>

        <antcall target="avalon:api-jar"/>
        <antcall target="avalon:impl-jar"/>
        <antcall target="avalon:regular-jar"/>
    </target>

    <target name="avalon:java-compile" if="java.src.present"
            depends="avalon:init,avalon:api-compile,avalon:impl-compile">
        <echo>
=======================================================================
 Compiling Sources
=======================================================================
        </echo>
        <mkdir dir="${maven.build.dir}"/>
        <mkdir dir="${maven.build.dir}/classes"/>
        <mkdir dir="${maven.build.dir}/api-classes"/><!-- to ensure <classpath/> works -->
        <mkdir dir="${maven.build.dir}/impl-classes"/><!-- to ensure <classpath/> works -->
        <javac
                destdir="${maven.build.dir}/classes"
                excludes="**/package.html"
                debug="${maven.compile.debug}"
                deprecation="${maven.compile.deprecation}"
                optimize="${maven.compile.optimize}">

            <src>
                <pathelement path="${maven.src.dir}/java"/>
                <pathelement path="${maven.build.dir}/api-classes"/>
                <pathelement path="${maven.build.dir}/impl-classes"/>
            </src>
        </javac>

        <mkdir dir="${maven.build.dir}/src"/>
        <copy todir="${maven.build.dir}/src">
            <fileset dir="${maven.src.dir}/java"/>
        </copy>
    </target>

    <target name="avalon:api-compile" if="api.src.present"
            depends="avalon:init">
        <echo>
=======================================================================
 Compiling API Sources
=======================================================================
        </echo>
        <mkdir dir="${maven.build.dir}"/>
        <mkdir dir="${maven.build.dir}/api-classes"/>
        <javac
                destdir="${maven.build.dir}/api-classes"
                excludes="**/package.html"
                debug="${maven.compile.debug}"
                deprecation="${maven.compile.deprecation}"
                optimize="${maven.compile.optimize}">

            <src>
                <pathelement path="${maven.src.dir}/api"/>
            </src>
        </javac>

        <mkdir dir="${maven.build.dir}/classes"/>
        <copy todir="${maven.build.dir}/classes">
            <fileset dir="${maven.build.dir}/api-classes"/>
        </copy>
        <mkdir dir="${maven.build.dir}/src"/>
        <copy todir="${maven.build.dir}/src">
            <fileset dir="${maven.src.dir}/api"/>
        </copy>
    </target>

    <target name="avalon:impl-compile" if="impl.src.present"
            depends="avalon:init,avalon:api-compile">
        <echo>
=======================================================================
 Compiling Implementation Sources
=======================================================================
        </echo>
        <mkdir dir="${maven.build.dir}"/>
        <mkdir dir="${maven.build.dir}/impl-classes"/>
        <mkdir dir="${maven.build.dir}/api-classes"/><!-- to ensure <classpath/> works -->
        <javac
                destdir="${maven.build.dir}/impl-classes"
                excludes="**/package.html"
                debug="${maven.compile.debug}"
                deprecation="${maven.compile.deprecation}"
                optimize="${maven.compile.optimize}">

            <src>
                <pathelement path="${maven.src.dir}/impl"/>
            </src>
            <classpath>
              <pathelement path="${maven.build.dir}/api-classes"/>
            </classpath>
        </javac>

        <mkdir dir="${maven.build.dir}/classes"/>
        <copy todir="${maven.build.dir}/classes">
            <fileset dir="${maven.build.dir}/impl-classes"/>
        </copy>
        <mkdir dir="${maven.build.dir}/src"/>
        <copy todir="${maven.build.dir}/src">
            <fileset dir="${maven.src.dir}/impl"/>
        </copy>
    </target>

    <target name="avalon:test" if="test.src.present"
        depends="avalon:init,avalon:api-compile,avalon:impl-compile,avalon:java-compile">
        <echo>
=======================================================================
 Compiling Tests
======================================================================
        </echo>
        <mkdir dir="${maven.build.dir}/test-classes"/>
        <mkdir dir="${maven.build.dir}/classes"/><!-- to ensure <classpath/> works -->
        <mkdir dir="${maven.build.dir}/api-classes"/><!-- to ensure <classpath/> works -->
        <mkdir dir="${maven.build.dir}/impl-classes"/><!-- to ensure <classpath/> works -->
        <javac
                destdir="${maven.build.dir}/test-classes"
                excludes="**/package.html"
                debug="${maven.compile.debug}"
                deprecation="${maven.compile.deprecation}"
                optimize="${maven.compile.optimize}">

            <src>
                <pathelement path="${maven.src.dir}/test"/>
            </src>
            <classpath>
                <pathelement path="${maven.build.dir}/classes"/>
                <pathelement path="${maven.build.dir}/api-classes"/>
                <pathelement path="${maven.build.dir}/impl-classes"/>
            </classpath>
        </javac>

        <echo>
=======================================================================
 Running tests
=======================================================================
        </echo>
        <taskdef
          name="junit"
          classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>

        <mkdir dir="${maven.build.dir}/test-reports"/>

        <junit printSummary="yes"
               failureProperty="maven.test.failure"
               fork="${maven.junit.fork}"
               dir="${maven.junit.dir}">
          <sysproperty key="basedir" value="${basedir}"/>

          <formatter type="xml"/>
          <formatter type="plain" usefile="${maven.junit.usefile}"/>
          <classpath>
              <pathelement location="${maven.build.dir}/classes"/>
              <pathelement path="${maven.build.dir}/api-classes"/>
              <pathelement path="${maven.build.dir}/impl-classes"/>
              <pathelement location="${maven.build.dir}/test-classes"/>
          </classpath>
          <batchtest todir="${maven.build.dir}/test-classes">
            <fileset dir="${maven.src.dir}/test">
                <include name="**/*TestCase.java"/>
                <exclude name="**/*Abstract*"/>
            </fileset>
          </batchtest>
        </junit>
    </target>

    <target name="avalon:regular-jar" if="classes.present"
            depends="avalon:init,avalon:api-compile,avalon:impl-compile,avalon:java-compile">
        <echo>
=======================================================================
 Building jar
=======================================================================
        </echo>
        <jar destfile="${maven.build.dir}/${project.name}-${project.version}.jar" basedir="${maven.build.dir}/classes"/>
    </target>

    <target name="avalon:api-jar" if="api-classes.present"
            depends="avalon:init,avalon:api-compile">
        <echo>
=======================================================================
 Building API jar
=======================================================================
        </echo>
        <jar destfile="${maven.build.dir}/${project.name}-${project.version}-api.jar" basedir="${maven.build.dir}/api-classes"/>
    </target>

    <target name="avalon:impl-jar" if="impl-classes.present"
            depends="avalon:init,avalon:impl-compile">
        <echo>
=======================================================================
 Building Implementation jar
=======================================================================
        </echo>
        <jar destfile="${maven.build.dir}/${project.name}-${project.version}-impl.jar" basedir="${maven.build.dir}/impl-classes"/>
    </target>

    <target name="avalon:javadocs" depends="avalon:init,avalon:jar">
        <mkdir dir="${maven.build.dir}/docs"/>
        <mkdir dir="${maven.build.dir}/docs/apidocs"/>
        <mkdir dir="${maven.build.dir}/classes"/><!-- to ensure <classpath/> works -->
        <mkdir dir="${maven.build.dir}/api-classes"/><!-- to ensure <classpath/> works -->
        <mkdir dir="${maven.build.dir}/impl-classes"/><!-- to ensure <classpath/> works -->

        <property name="copyright"
          value="Copyright &amp;copy; ${project.copyright.year} Apache Software Foundation. All Rights Reserved." />

        <property name="title" value="Avalon ${project.name} API"/>

        <javadoc
          sourcepath="${maven.build.dir}/src"
          packagenames="org.apache.*"
          destdir="${maven.build.dir}/docs/apidocs"
          windowtitle="${title}"
          doctitle="${title}"
          bottom="${copyright}">

          <link href="http://java.sun.com/j2se/1.4.1/docs/api/"/>
          <link href="http://avalon.apache.org/framework/api/"/>
          <classpath>
            <path location="${maven.build.dir}/classes"/>
            <path location="${maven.build.dir}/api-classes"/>
            <path location="${maven.build.dir}/impl-classes"/>
          </classpath>

        </javadoc>
    </target>

    <target name="avalon:distclean">
        <delete dir="${maven.build.dir}/${project.name}-${project.version}"/>
        <delete dir="${maven.build.dir}/dist"/>
    </target>

    <target name="avalon:dist" depends="avalon:init,avalon:distclean,avalon:jar,avalon:javadocs">
        <mkdir dir="${maven.build.dir}"/>
        <mkdir dir="${maven.build.dir}/${project.name}-${project.version}"/>
        <mkdir dir="${maven.build.dir}/dist"/>

        <echo>
=======================================================================
 Building Binary Distribution
=======================================================================
        </echo>
        <mkdir dir="${maven.build.dir}/${project.name}-${project.version}/bin"/>
        <copy todir="${maven.build.dir}/${project.name}-${project.version}/bin">
            <fileset dir="${maven.build.dir}">
                <include name="*.jar"/>
                <include name="*.txt"/>
                <include name="*.zip"/>
                <include name="docs"/>
            </fileset>
        </copy>
        <zip destfile="${maven.build.dir}/dist/${project.name}-${project.version}-bin.zip">
            <zipfileset dir="${maven.build.dir}/${project.name}-${project.version}/bin"
                prefix="${project.name}-${project.version}"/>
        </zip>

        <echo>
=======================================================================
 Building Source Distribution
=======================================================================
        </echo>
        <mkdir dir="${maven.build.dir}/${project.name}-${project.version}/src"/>
        <copy todir="${maven.build.dir}/${project.name}-${project.version}/src">
            <fileset dir="${maven.src.dir}"/>
            <fileset dir="${maven.build.dir}">
                <include name="*.txt"/>
            </fileset>
            <fileset dir="${basedir}">
                <include name="README*"/>
                <include name="LICENSE*"/>
                <include name="maven.*"/>
                <include name="project.*"/>
            </fileset>
        </copy>
        <zip destfile="${maven.build.dir}/dist/${project.name}-${project.version}-src.zip">
            <zipfileset dir="${maven.build.dir}/${project.name}-${project.version}/src"
                prefix="${project.name}-${project.version}"/>
        </zip>
    </target>
</project>