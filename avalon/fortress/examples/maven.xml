<?xml version="1.0"?>

<project default="check"
    xmlns:j="jelly:core"
    xmlns:ant="jelly:ant"
    xmlns:deploy="deploy">

    <!-- include the avalon-wide custom project properties -->
    <property file="${basedir}/project.properties"/>
    <property file="${basedir}/../project.properties"/>
    <property file="${basedir}/../../project.properties"/>
    <property file="${basedir}/../../../project.properties"/>
    <property file="${basedir}/../../../../project.properties"/>

    <goal name="check">
        <!-- friendly error in case file is not available -->
        <ant:available file="${avalon.buildsystem}/maven-common.xml"
                property="buildsystem.available"/>
        <j:set var="avalon.buildsystem.available" value="${buildsystem.available}"/>
        <j:if test="${empty(avalon.buildsystem.available)}">
            <ant:fail>
            ===================================================================
            BUILD SYSTEM FAILURE!
            ===================================================================

            a required file, ${avalon.buildsystem}/maven-common.xml, cannot be
            found. Try setting the avalon.buildsystem property in
            project.properties to the correct location.
            </ant:fail>
        </j:if>
    </goal>

    <!-- include the avalon-wide custom goal decorators from maven-common.xml -->
    <j:import file="${avalon.buildsystem}/maven-common.xml" inherit="true"/>

    <goal name="fortress:generate-meta"
            prereqs="avalon:init">
        <ant:taskdef name="collect-meta"
            classname="org.apache.avalon.fortress.tools.ComponentMetaInfoCollector">

            <ant:classpath>
                <ant:path refid="maven.dependency.classpath"/>
                <ant:pathelement path="${java.build.dir}"/>
            </ant:classpath>
        </ant:taskdef>

        <collect-meta destdir="${java.build.dir}">
            <fileset dir="${java.src.dir}"/>
        </collect-meta>

        <ant:copy todir="${java.build.dir}">
            <ant:fileset dir="${java.src.dir}">
                <ant:exclude name="**/*.java"/>
                <ant:exclude name="**/package.html"/>
            </ant:fileset>
        </ant:copy>
    </goal>

    <goal name="webapp"
            prereqs="java:jar">

        <mkdir dir="${maven.build.dir}/servlet"/>
        <mkdir dir="${maven.build.dir}/servlet/WEB-INF"/>
        <mkdir dir="${maven.build.dir}/servlet/WEB-INF/lib"/>

        <deploy:copy-deps
                todir="${maven.build.dir}/servlet/WEB-INF/lib"
                excludes="servletapi,junit,avalon-fortress-tools"/>

        <copy todir="${build.dir}/servlet/WEB-INF"
              file="${maven.src.dir}/conf/web.xml"/>
    </goal>

    <postGoal name="java:jar">
        <jar jarfile="${maven.build.dir}/${maven.final.name}-viewer.jar"
             basedir="${maven.build.dir}/classes"
             includes="**">
          <manifest>
            <attribute name="Main-Class" value="org.apache.avalon.fortress.examples.viewer.Main"/>
            <attribute name="Class-Path" value="logkit-1.2.jar avalon-framework-4.1.4.jar avalon-fortress-complete-1.1-dev.jar concurrent-1.3.1.jar commons-collections-2.1.jar"/>
          </manifest>
        </jar>

        <jar jarfile="${lib.dir}/${name}-swing.jar"
             basedir="${build.classes.dir}"
             includes="**/*.*">
          <manifest>
            <attribute name="Main-Class" value="org.apache.avalon.fortress.examples.swing.Main"/>
            <attribute name="Class-Path" value="logkit-1.2.jar avalon-framework-4.1.4.jar avalon-fortress-complete-1.1-dev.jar concurrent-1.3.1.jar commons-collections-2.1.jar"/>
          </manifest>
        </jar>

        <jar jarfile="${lib.dir}/${name}-extended.jar"
             basedir="${build.classes.dir}"
             includes="**/*.*">
          <manifest>
            <attribute name="Main-Class" value="org.apache.avalon.fortress.examples.extended.Main"/>
            <attribute name="Class-Path" value="logkit-1.2.jar avalon-framework-4.1.4.jar avalon-fortress-complete-1.1-dev.jar concurrent-1.3.1.jar commons-collections-2.1.jar"/>
          </manifest>
        </jar>
    </postGoal>

</project>
