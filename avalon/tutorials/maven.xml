<project default="jar:jar" xmlns:maven="jelly:maven" xmlns:j="jelly:core" xmlns:util="jelly:util" xmlns:ant="jelly:ant">

  <!--
  ==============================================================================
  build the tutorials and generate a clean copy for publication 
  ==============================================================================
  -->

  <goal name="avalon:clean" 
       description="Clean." >
    <maven:reactor
      basedir="${basedir}"
      includes="**/project.xml"
      excludes="project.xml,**/target/**"
      goals="clean:clean" 
      banner="Clean:"
      ignoreFailures="false" 
      postProcessing="false" />
  </goal>

  <goal name="avalon:build" 
       description="Build and generate a clean tutorial package." >

    <maven:reactor
      basedir="${basedir}"
      includes="**/project.xml"
      excludes="project.xml,**/target/**,**/mixed/**,**/jmx/**,**/security/**"
      goals="xgen" 
      banner="Generation:"
      ignoreFailures="false" 
      postProcessing="true" />

    <!-- 
    copy the generated target/package directory to the 
    local target/tutorials directory 
    -->

    <j:set var="tutorialsDir" value="${basedir}"/>
    <j:set var="tutorialsLen" value="${tutorialsDir.length()}"/>
    <j:forEach var="child" items="${reactorProjects}">
      <j:set var="pkgPath" value="${child.file.parentFile.path}"/>
      <j:set var="pkgLen" value="${pkgPath.length()}"/>
      <j:set var="packageName" value="${pkgPath.substring( tutorialsLen )}"/>
      <ant:copy toDir="${basedir}/target/tutorials${packageName}">
        <fileset dir="${child.file.parentFile}/target/package"/>
      </ant:copy>
    </j:forEach>

    <!-- 
    copy the generated target/package directory to the 
    local target/tutorials directory 
    -->

    <ant:copy toFile="${maven.build.dir}/tutorials/maven.xml"
       file="${basedir}/maven-template.xml"/>
    <ant:copy toFile="${maven.build.dir}/tutorials/master.xml"
       file="${basedir}/master.xml"/>
    <ant:copy todir="${maven.build.dir}/tutorials">
      <fileset dir="${basedir}">
        <include name="**/README.TXT"/>
        <exclude name="target/**"/>
      </fileset>
    </ant:copy>

  </goal>

  <goal name="avalon:dist" prereqs="avalon:build">

    <j:set var="tutorial.name" value="${maven.final.name}"/>
    <ant:echo>Building tutorial kit: ${tutorial.name}</ant:echo>
    <ant:zip zipfile="${maven.build.dir}/${tutorial.name}.zip">
      <zipfileset dir="${basedir}/target/tutorials" prefix="tutorial"/>
    </ant:zip>
    <checksum file="${maven.build.dir}/${tutorial.name}.zip" fileext=".md5" />
    <j:if test="${maven_gpg_exe != null}">
      <ant:exec executable="${maven_gpg_exe}">
        <ant:arg value="-a"/>
        <ant:arg value="-b"/>
        <ant:arg value="${maven.build.dir}/${tutorial.name}.zip"/>
      </ant:exec>
    </j:if>

    <ant:tar longfile="gnu" tarfile="${maven.build.dir}/${tutorial.name}.tar">
      <tarfileset dir="${basedir}/target/tutorials" prefix="tutorial"/>
    </ant:tar>
    <ant:gzip 
      zipfile="${maven.build.dir}/${tutorial.name}.tar.gz"
      src="${maven.build.dir}/${tutorial.name}.tar"/>
    <ant:delete file="${maven.build.dir}/${tutorial.name}.tar"/>
    <checksum file="${maven.build.dir}/${tutorial.name}.tar.gz" fileext=".md5" />
    <j:if test="${maven_gpg_exe != null}">
      <ant:exec executable="${maven_gpg_exe}">
        <ant:arg value="-a"/>
        <ant:arg value="-b"/>
        <ant:arg value="${maven.build.dir}/${tutorial.name}.tar.gz"/>
      </ant:exec>
    </j:if>

  </goal>

  <!--
  ==============================================================================
  common pre and post goals
  ==============================================================================
  -->

  <preGoal name="java:compile">
    <attainGoal name="avalon:meta"/>
  </preGoal>

  <!--
  ==============================================================================
  utilities
  ==============================================================================
  -->

  <goal name="demo" prereqs="jar:install">
    <j:set var="demo.target" value="${maven.build.dir}/classes/BLOCK-INF/block.xml"/>
    <util:file var="target" name="${demo.target}"/>
    <j:if test="${target.exists()}">
      <attainGoal name="merlin:simulate"/>
    </j:if>
  </goal>

  <goal name="xgen" prereqs="jar:install">
    <ant:mkdir dir="${maven.build.dir}/package"/>
    <ant:copy toDir="${maven.build.dir}/package">
      <fileset dir="${pom.file.parentFile}">
        <exclude name="target/**"/>
        <exclude name="*.log"/>
        <exclude name=".*"/>
        <exclude name="*.ent"/>
        <exclude name="*.xsl"/>
      </fileset>
    </ant:copy>
    <util:file var="xslFile" name="${basedir}/copy-all.xsl"/>
    <j:if test="${xslFile.exists()}">
      <ant:delete file="${maven.build.dir}/package/project.xml"/>
      <ant:xslt in="${pom.file}" 
          out="${maven.build.dir}/package/project.xml"
         style="${xslFile}">
        <outputproperty name="method" value="xml" />
        <outputproperty name="standalone" value="yes"/>
        <outputproperty name="indent" value="yes"/>
      </ant:xslt>
    </j:if>
  </goal>

</project>
