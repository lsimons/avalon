<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE project [
  <!ENTITY % index SYSTEM "file:index.ent"> %index;
]>

<project default="avalon:build" xmlns:maven="jelly:maven" xmlns:j="jelly:core" xmlns:util="jelly:util" xmlns:ant="jelly:ant">

  <!--
  ==============================================================================
  switches 
  ==============================================================================
  -->

  <ant:property name="avalon.snapshot" value="true"/>

  <!--
  ==============================================================================
  dependent properties 
  ==============================================================================
  -->

  <ant:property name="plugin.groupId" value="avalon-util"/>
  <ant:property name="plugin.artifactId" value="avalon-util"/>
  <ant:property name="plugin.version" value="1.0-SNAPSHOT"/>
  <ant:property name="plugin.jar" 
    value="${plugin.artifactId}-${plugin.version}.jar"/>

  <!--
  ==============================================================================
  derived properties 
  ==============================================================================
  -->

  <ant:property name="maven.dist.assembly.dir"
    value="${maven.build.dir}/temp"/>
  <ant:property name="maven.dist.bin.archive.dir"
    value="${maven.dist.assembly.dir}/bin"/>
  <ant:property name="maven.dist.src.archive.dir"
    value="${maven.dist.assembly.dir}/src"/>
  <ant:property name="maven.dist.bin.assembly.dir"
    value="${maven.dist.assembly.dir}/bin/avalon-${pom.currentVersion}"/>
  <ant:property name="maven.dist.src.assembly.dir"
    value="${maven.dist.assembly.dir}/src/${pom.artifactId}"/>
  <ant:property name="maven.dist.dir"
    value="${maven.build.dir}/distributions"/>

  <!--
  ==============================================================================
  structural properties 
  ==============================================================================
  -->

  <ant:property name="pom.specificationVersion" value="1.0"/>
  <ant:property name="pom.organization.identifier" value="ASF"/>
  <ant:property file="project.properties"/>

  <!--
  ==============================================================================
  build the repository package
  ==============================================================================
  -->


  <preGoal name="java:jar-resources">
    <ant:filter token="AVALON-LOGGING-LOGKIT-SPEC" 
        value="&avalon-logging-logkit-artifact-spec;"/>
    <ant:filter token="AVALON-LOGGING-LOG4J-SPEC" 
        value="&avalon-logging-log4j-artifact-spec;"/>
  </preGoal>

  <goal name="avalon:build" description="Build the Logging system.">

    <maven:reactor basedir="${basedir}"
      includes="**/project.xml"
      excludes="project.xml,test/project.xml,**test/project.xml"
      goals=""
      banner="Building:"
      ignoreFailures="false"
      postProcessing="true" />

    <ant:copy todir="${maven.build.dir}/jars">
      <j:forEach var="child" items="${reactorProjects}">
        <ant:fileset dir="${child.file.parentFile}/target">
          <ant:include name="${child.artifactId}-${child.currentVersion}.jar"/>
          <ant:include name="${child.artifactId}-${child.currentVersion}.jar.meta"/>
        </ant:fileset>
      </j:forEach>
    </ant:copy>
    <j:forEach var="child" items="${reactorProjects}">
      <j:set var="path" value="${child.artifactId}-${child.currentVersion}"/>
      <util:file var="jarFile" name="${maven.build.dir}/jars/${path}.jar"/>
      <j:if test="${jarFile.exists()}">
        <checksum file="${jarFile}"/>
        <move file="${jarFile}.md5" toFile="temp"/>
        <move file="temp" toFile="${jarFile}.md5"/>
        <j:if test="${maven_gpg_exe != null}">
          <ant:exec executable="${maven_gpg_exe}">
            <ant:arg value="-a"/>
            <ant:arg value="--yes"/>
            <ant:arg value="-b"/>
            <ant:arg value="${jarFile}"/>
          </ant:exec>
        </j:if>
      </j:if>
      <util:file var="metaFile" name="${maven.build.dir}/jars/${path}.jar.meta"/>
      <j:if test="${metaFile.exists()}">
        <checksum file="${metaFile}"/>
        <move file="${metaFile}.md5" toFile="temp"/>
        <move file="temp" toFile="${metaFile}.md5"/>
        <j:if test="${maven_gpg_exe != null}">
          <ant:exec executable="${maven_gpg_exe}">
            <ant:arg value="-a"/>
            <ant:arg value="--yes"/>
            <ant:arg value="-b"/>
            <ant:arg value="${metaFile}"/>
          </ant:exec>
        </j:if>
      </j:if>
    </j:forEach>

    <maven:reactor basedir="${basedir}"
      includes="test/project.xml"
      goals=""
      banner="Testing:"
      ignoreFailures="false"
      postProcessing="false" />

  </goal>

  <!--
  ==============================================================================
  clean all subprojects
  ==============================================================================
  -->

  <goal name="avalon:clean" prereqs="clean" description="Clean all subprojects.">
    <maven:reactor
      basedir="${basedir}"
      includes="**/project.xml"
      excludes="project.xml"
      goals="clean:clean"
      banner="Cleaning subproject:"
      ignoreFailures="true"/>
  </goal>

  <!--
  ==============================================================================
  build the site documentation
  ==============================================================================
  -->

  <goal name="avalon:site" prereqs="xavalon:css-copy,xjavadoc,site"/>

  <goal name="xavalon:css-copy">
    <ant:mkdir dir="${maven.build.dir}/docs/style"/>
    <ant:copy toDir="${maven.build.dir}/docs/style">
      <fileset dir="${basedir}/site/etc">
        <include name="maven.css"/>
        <include name="tigris.css"/>
      </fileset>
    </ant:copy>
  </goal>

  <!--
  ==============================================================================
  build a formal distribution
  ==============================================================================
  -->

  <goal name="avalon:dist" prereqs="avalon:build,avalon:site,xdist"/>

  <goal name="xdist"
    prereqs="xdist:build"
    description="Build a complete distribution.">
  </goal>
        
  <goal
    name="xdist:build"
    prereqs="xdist:build-setup,xdist:build-bin,xdist:build-src"
    description="Build a complete distribution.">
  </goal>

  <goal
    name="xdist:build-setup"
    description="Set up directories for a distribution build">
    <ant:delete dir="${maven.dist.dir}"/>
    <ant:mkdir dir="${maven.dist.dir}"/>

    <j:choose>
      <j:when test="${avalon.snapshot}">
        <maven:snapshot project="${pom}"/>
        <j:set var="timestamp" value="${snapshotSignature.substring(15)}"/>
        <j:set var="binary.name" value="${maven.final.name}-${timestamp}-dist"/>
        <j:set var="source.name" value="${maven.final.name}-${timestamp}-src"/>
        <echo>Snapshot Packaging: ${timestamp}</echo>
      </j:when>
      <j:otherwise>
        <j:set var="binary.name" value="${maven.final.name}-dist"/>
        <j:set var="source.name" value="${maven.final.name}-src"/>
        <echo>Release Packaging: ${pom.currentVersion}</echo>
      </j:otherwise>
    </j:choose>

  </goal>

  <goal
    name="xdist:build-bin" 
    prereqs="xdist:prepare-bin-filesystem"
    description="Build the binary distribution.">

    <!-- Create a tar.gz file -->
    <ant:tar longfile="gnu" tarfile="${maven.dist.dir}/${binary.name}.tar">
      <ant:tarfileset dir="${maven.dist.bin.archive.dir}"/>
    </ant:tar>

    <ant:gzip 
      zipfile="${maven.dist.dir}/${binary.name}.tar.gz"
      src="${maven.dist.dir}/${binary.name}.tar"
    />
    <ant:delete file="${maven.dist.dir}/${binary.name}.tar"/>
    <checksum file="${maven.dist.dir}/${binary.name}.tar.gz"/>
    <move file="${metaFile}.md5" toFile="temp"/>
    <move file="temp" toFile="${metaFile}.md5"/>
    <j:if test="${maven_gpg_exe != null}">
      <ant:exec executable="${maven_gpg_exe}">
        <ant:arg value="-a"/>
        <ant:arg value="-b"/>
        <ant:arg value="${maven.dist.dir}/${binary.name}.tar.gz"/>
      </ant:exec>
    </j:if>

    <!-- Create a zip file -->
    <ant:zip zipfile="${maven.dist.dir}/${binary.name}.zip">
      <ant:zipfileset dir="${maven.dist.bin.archive.dir}"/>
    </ant:zip>
    <checksum file="${maven.dist.dir}/${binary.name}.zip"/>
    <move file="${maven.dist.dir}/${binary.name}.zip.md5" toFile="temp"/>
    <move file="temp" toFile="${maven.dist.dir}/${binary.name}.zip.md5"/>
    <j:if test="${maven_gpg_exe != null}">
      <ant:exec executable="${maven_gpg_exe}">
        <ant:arg value="-a"/>
        <ant:arg value="-b"/>
        <ant:arg value="${maven.dist.dir}/${binary.name}.zip"/>
      </ant:exec>
    </j:if>
  </goal>

  <goal
    name="xdist:build-src"
    prereqs="xdist:prepare-src-filesystem"
    description="Build the source distribution.">
 
    <!-- Create a tar.gz file -->
    <ant:tar longfile="gnu" tarfile="${maven.dist.dir}/${source.name}.tar">
      <ant:tarfileset dir="${maven.dist.src.archive.dir}"/>
    </ant:tar>
    <ant:gzip 
      zipfile="${maven.dist.dir}/${source.name}.tar.gz" 
      src="${maven.dist.dir}/${source.name}.tar"
    />
    <ant:delete file="${maven.dist.dir}/${source.name}.tar"/>
    <checksum file="${maven.dist.dir}/${source.name}.tar.gz"/>
    <move file="${maven.dist.dir}/${source.name}.tar.gz.md5" toFile="temp"/>
    <move file="temp" toFile="${maven.dist.dir}/${source.name}.tar.gz.md5"/>
    <j:if test="${maven_gpg_exe != null}">
      <ant:exec executable="${maven_gpg_exe}">
        <ant:arg value="-a"/>
        <ant:arg value="-b"/>
        <ant:arg value="${maven.dist.dir}/${source.name}.tar.gz"/>
      </ant:exec>
    </j:if>

    <!-- Create a zip file -->
    <ant:zip zipfile="${maven.dist.dir}/${source.name}.zip">
      <ant:zipfileset dir="${maven.dist.src.archive.dir}"/>
    </ant:zip>
    <checksum file="${maven.dist.dir}/${source.name}.zip"/>
    <move file="${maven.dist.dir}/${source.name}.zip.md5" toFile="temp"/>
    <move file="temp" toFile="${maven.dist.dir}/${source.name}.zip.md5"/>
    <j:if test="${maven_gpg_exe != null}">
      <ant:exec executable="${maven_gpg_exe}">
        <ant:arg value="-a"/>
        <ant:arg value="-b"/>
        <ant:arg value="${maven.dist.dir}/${source.name}.zip"/>
      </ant:exec>
    </j:if>
  </goal>

  <goal
    name="xdist:prepare-bin-filesystem" 
    description="Builds the binary files.">

    <ant:delete dir="${maven.dist.bin.assembly.dir}"/>
    <ant:mkdir dir="${maven.dist.bin.assembly.dir}"/>
    <ant:echo>
      +-------------------------------------------------------+
      | C R E A T I N G  B I N A R Y  D I S T R I B U T I O N |
      +-------------------------------------------------------+
    </ant:echo>
    <ant:copy todir="${maven.dist.bin.assembly.dir}">
      <ant:fileset dir=".">
        <ant:include name="LICENSE*"/>
        <ant:include name="README*"/>
      </ant:fileset>
    </ant:copy>

    <!-- Copy Jars -->
    <ant:copy todir="${maven.dist.bin.assembly.dir}">
      <ant:fileset dir="${maven.build.dir}">
        <ant:include name="jars/**"/>
      </ant:fileset>
    </ant:copy>

    <!-- Copy Docs -->
    <ant:copy todir="${maven.dist.bin.assembly.dir}">
      <ant:fileset dir="${maven.build.dir}">
        <ant:include name="docs/**"/>
      </ant:fileset>
    </ant:copy>

  </goal>

  <goal
    name="xdist:prepare-src-filesystem"
    description="Builds the source distribution file system.">
    <ant:delete dir="${maven.dist.src.assembly.dir}" />
    <ant:mkdir dir="${maven.dist.src.assembly.dir}" />

    <ant:echo>
      +-------------------------------------------------------+
      | C R E A T I N G  S O U R C E  D I S T R I B U T I O N |
      +-------------------------------------------------------+
    </ant:echo>

    <ant:copy todir="${maven.dist.src.assembly.dir}">
      <ant:fileset dir=".">
        <ant:include name="LICENSE*"/>
        <ant:include name="project.properties"/>
        <ant:include name="maven.xml"/>
        <ant:include name="project.xml"/>
      </ant:fileset>
    </ant:copy>

    <maven:reactor basedir="${basedir}"
      includes="**/project.xml"
      excludes="**/target/**,project.xml,**/test/project.xml"
      banner="Building:"
      ignoreFailures="false"
      postProcessing="true" />
    <ant:copy todir="${maven.dist.src.assembly.dir}">
      <j:forEach var="child" items="${reactorProjects}">
        <ant:fileset dir="${child.file.parentFile}">
          <ant:exclude name="**/target/**"/>
          <ant:exclude name="**/*.log"/>
        </ant:fileset>
      </j:forEach>
    </ant:copy>

    <ant:copy todir="${maven.dist.src.assembly.dir}/site">
      <ant:fileset dir="site"/>
    </ant:copy>

  </goal>


  <goal name="xjavadoc">

    <maven:reactor basedir="${basedir}"
      includes="**/project.xml"
      excludes="project.xml,**/test/**.*"
      banner="Site Prep:"
      ignoreFailures="false"
      postProcessing="true" />

    <ant:path id="template.classpath">
      <j:forEach var="child" items="${reactorProjects}">
        <j:set var="deps" value="${child.dependencies}"/>
        <j:forEach var="dep" items="${deps}">
          <ant:pathelement 
            path="${maven.repo.local}/${dep.getArtifactDirectory()}/jars/${dep.getArtifact()}"/>
        </j:forEach>
      </j:forEach>
    </ant:path>

    <ant:mkdir dir="${maven.build.dir}/docs/api" />
    <ant:property name="copyright"
      value="Copyright &amp;copy; ${year} ${pom.organization.name}. All Rights Reserved." />
    <ant:property name="title" value="${pom.name} ${pom.currentVersion}"/>
    <ant:javadoc destdir="${maven.build.dir}/docs/api" 
	doctitle="&lt;h1&gt;${title}&lt;/h1&gt;" 
      noindex="false" author="true" use="true"
	windowtitle="${title}" 
      bottom="${copyright}"
      additionalparam="-breakiterator -J-Xmx128m "
      packagenames="*,org.*">

        <j:forEach var="child" items="${reactorProjects}">
          <sourcepath path="${child.file.parentFile}/src/java"/>
        </j:forEach>

        <j:forEach var="packageGroup" items="${pom.packageGroups}">
          <group title="${packageGroup.title}" packages="${packageGroup.packages}"/>
        </j:forEach>

        <classpath>
          <path refid="template.classpath"/>
	  </classpath>

	  <link href="http://java.sun.com/j2se/1.4.2/docs/api/" />
	  <link href="http://avalon.apache.org/util/api/" />
	  <link href="http://avalon.apache.org/logkit/api/" />
	  <link href="http://avalon.apache.org/repository/api/" />
	  <link href="http://avalon.apache.org/framework/api/" />
	  <link href="http://logging.apache.org/log4j/docs/api/" />

    </ant:javadoc>
  </goal>

  <!--
  ==============================================================================
  checks
  ==============================================================================
  -->

  <goal name="validate">
    <ant:available file="${maven.home}/plugins/${plugin.jar}"
      property="repoPluginPresent"/>
    <j:choose>
      <j:when test="${repoPluginPresent}">
        <echo>OK</echo>
      </j:when>
      <j:otherwise>
        <ant:echo>
#####################################################################
#                                                                   #
#   WARNING:                                                        #
#   You do not have the required version of the avalon-util-plugin  #
#   installed on your system.                                       #
#   Please invoke the following command                             #
#                                                                   #
#     $ maven avalon:setup                                          #
#                                                                   #
#####################################################################</ant:echo>
      </j:otherwise>
    </j:choose>
  </goal>

  <goal name="avalon:setup">
    <echo>
Initiating download and installation of the Avalon Util Plugin.
${plugin.artifactId}-${plugin.version}.jar</echo>
    <j:set var="repoList">${maven.repo.remote}</j:set> 
    <util:tokenize var="repos" delim=",">${repoList.trim()}</util:tokenize> 
    <j:forEach var="repo" items="${repos}"> 
      <echo>repository '${repo}'</echo> 
      <util:file var="localPlugin" name="${maven.home}/plugins/${plugin.artifactId}-${plugin.version}.jar" /> 
      <j:if test="${!localPlugin.exists()}"> 
        <j:set var="remoteFile" value="${repo}/${plugin.groupId}/plugins/${plugin.artifactId}-${plugin.version}.jar" /> 
        <echo>trying to download ${remoteFile}</echo> 
        <j:catch var="ex"> 
        <j:invokeStatic var="dummy" method="getFile" className="org.apache.maven.util.HttpUtils"> 
          <j:arg type="java.lang.String" value="${remoteFile}" /> 
          <j:arg type="java.io.File" value="${localPlugin}"/> 
          <j:arg type="boolean" value="false"/> 
          <j:arg type="boolean" value="true"/> 
          <j:arg type="java.lang.String" value="${maven.proxy.host}" /> 
          <j:arg type="java.lang.String" value="${maven.proxy.port}" /> 
          <j:arg type="java.lang.String" value="${maven.proxy.username}" /> 
          <j:arg type="java.lang.String" value="${maven.proxy.password}" /> 
          <j:arg type="boolean" value="false"/> 
        </j:invokeStatic> 
        </j:catch> 
      </j:if> 
      <j:break test="${localPlugin.exists()}"/> 
    </j:forEach>
    <j:set var="downloaded" value="${localPlugin.exists()}"/> 
    <j:if test="${!downloaded}"> 
      <ant:fail message="Unable to find plug-in" /> 
    </j:if> 
    <j:if test="${downloaded}">
      <ant:move file="${localPlugin}" toFile="tmp.jar"/>
      <echo>Plugin downloaded, removing other versions</echo> 
      <delete verbose="false"> 
        <fileset dir="${maven.home}/plugins">
          <include name="${plugin.artifactId}-*.jar" /> 
          <exclude name="${plugin.artifactId}-${plugin.version}.jar" /> 
        </fileset> 
      </delete> 
      <delete includeEmptyDirs="true" verbose="false"> 
        <fileset dir="${maven.plugin.unpacked.dir}"> 
          <include name="*.cache"/> 
          <include name="**/.processed" /> 
          <include name="${plugin.artifactId}-*/**" /> 
        </fileset>
      </delete>
      <ant:move file="tmp.jar" toFile="${localPlugin}"/>
    </j:if> 
  </goal>

</project>
