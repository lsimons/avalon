<?xml version="1.0"?>

<project xmlns:j="jelly:core"
  xmlns:define="jelly:define"
  xmlns:util="jelly:util"
  xmlns:maven="jelly:maven"
  xmlns:ant="jelly:ant"
  xmlns:log="jelly:log"
  xmlns:merlin="merlin">

  <define:taglib uri="merlin">
    <define:jellybean
      name="kernel"
      className="org.apache.avalon.merlin.tools.MerlinBean"
      method="doExecute"/>
  </define:taglib>

  <goal name="merlin:deploy" prereqs="jar:jar"
      description="Deployment from ${maven.build.dir}/${maven.final.name}.jar">
    <j:set var="merlin.target" value="${merlin.target}"/>
    <j:set var="merlin.target" value="${maven.build.dir}/${maven.final.name}.jar"/>
    <util:file var="target" name="${merlin.target}"/>
    <j:if test="${target.exists()}">
       <attainGoal name="merlin:execute"/>
    </j:if>
  </goal>

  <goal name="merlin:simulate" prereqs="test:test"
      description="Simulated deployment from ${maven.build.dir}/classes">
    <j:set var="merlin.target" value="${maven.build.dir}/classes"/>
    <util:file var="target" name="${merlin.target}"/>
    <j:if test="${target.exists()}">
       <attainGoal name="merlin:execute"/>
    </j:if>
  </goal>

  <goal name="merlin:execute" prereqs="merlin:prepare-context">
    <merlin:kernel 
      repository="${merlin.repository.local}" 
      home="${merlin.basedir}" 
      anchor="${merlin.anchor}" 
      kernel="${merlin.kernel}" 
      target="${merlin.target}" 
      config="${merlin.config}" 
      debug="${merlin.debug}" 
      info="${merlin.info}" 
      wait="${wait}"/>
  </goal>

  <goal name="merlin:prepare-context">

    <ant:property environment="env"/>

    <!--
    Assign a value to the merlin.anchor.dir variable.  If the 
    value has already been defined this will fail and the prior
    defintion will hold.
    -->

    <j:set var="merlin.anchor.dir" value="${merlin.anchor}"/>
    <j:set var="merlin.anchor.dir" value="${basedir}"/>
    <util:file var="anchorFile" name="${merlin.anchor.dir}"/>
    <j:if test="${anchorFile.exists()}">
      <j:set var="merlin.anchor" value="${merlin.anchor.dir}"/>
    </j:if>

    <!--
    Set the repository path.
    -->
    <j:set var="merlin.repo.local" value="${maven.home.local}"/>
    <util:file var="repo" name="${merlin.repo.local}"/>
    <j:if test="${repo.exists()}">
      <j:set var="merlin.repository.local" value="${merlin.repo.local}/repository"/>
    </j:if>
    <j:if test="${!repo.exists()}">
      <j:set var="merlin.repository.local" value="${user.dir}/.maven/repository"/>
    </j:if>

    <!--
    If a kernel configuration has been declared the use it otherwise
    we default to the merlin installation kernel definition.
    -->
    <j:set var="merlin.kernel" value="${maven.conf.dir}/kernel.xml"/>
    <j:set var="merlin.kernel.config" value="${merlin.kernel}"/>
    <util:file var="kernelFile" name="${merlin.kernel.config}"/>
    <j:if test="${kernelFile.exists()}">
      <j:set var="merlin.kernel" value="${merlin.kernel.config}"/>
    </j:if>

    <!-- 
    Declare the default configuration path which will be overriden
    if an merlin.block.config property is set and exists.
    -->
    <j:set var="merlin.config" value="${maven.conf.dir}/config.xml"/>
    <j:set var="merlin.block.config" value="${merlin.config}"/>
    <util:file var="configFile" name="${merlin.block.config}"/>
    <j:if test="${configFile.exists()}">
      <j:set var="merlin.config" value="${merlin.block.config}"/>
    </j:if>

    <j:if test="${context.getVariable('merlin.debug') == null}">
      <j:set var="merlin.debug" value="false"/>
    </j:if>
    <j:if test="${context.getVariable('merlin.debug') != null}">
      <j:if test="${context.getVariable('merlin.debug') == 'true'}">
        <j:set var="merlin.debug" value="true"/>
      </j:if>
      <j:if test="${context.getVariable('merlin.debug') != 'true'}">
        <j:set var="merlin.debug" value="false"/>
      </j:if>
    </j:if>

    <j:set var="wait" value="${merlin.kernel.wait}"/>
    <j:if test="${wait == null}">
      <j:set var="wait" value="1000"/>
    </j:if>
  </goal>

</project>
