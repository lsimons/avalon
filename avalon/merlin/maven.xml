<project default="merlin:build" xmlns:maven="jelly:maven" xmlns:j="jelly:core" xmlns:util="jelly:util" xmlns:ant="jelly:ant">

  <ant:property name="merlin.bootstrap.jar" value="merlin-bootstrap-1.0.jar"/>
  <ant:property name="merlin.plugin.jar" value="merlin-plugin-1.1-SNAPSHOT.jar"/>
  <ant:property name="meta.plugin.jar" value="avalon-meta-plugin-1.2-SNAPSHOT.jar"/>

  <ant:property file="project.properties"/>
  <ant:property name="maven.docs.src" value="${basedir}/platform/xdocs"/>
  <ant:property name="merlin.build.inst" value="merlin"/>
  <ant:property name="merlin.build.inst.dir" 
    value="${maven.build.dir}/${merlin.build.inst}"/>
  <ant:property name="maven.jar.manifest.extensions.add" value="true"/>
  <ant:property name="maven.checkstyle.format" value="avalon"/>
  <ant:property name="pom.organization.identifier" value="ASF"/>
  <ant:property name="pom.specificationVersion" value="1.0"/>
  <ant:property name="maven.license.licenseFile" value="${basedir}/LICENSE.txt"/>
  <ant:property name="maven.javadoc.stylesheet" 
    value="${basedir}/platform/src/etc/stylesheet.css"/>

  <!--
  Get the MERLIN_HOME environment variable.  If its not declared then
  default to ${user.home}/.merlin as the install directory.
  -->

  <ant:property environment="env"/>
  <ant:property name="merlinEnvironment" value="${env.MERLIN_HOME}"/>
  <j:if test="${merlinEnvironment != ''}">
    <ant:property name="merlin.home" value="${merlinEnvironment}"/>
  </j:if>
  <ant:property name="merlin.home" value="${user.home}/.merlin"/>

  <goal name="merlin:update">
    <attainGoal name="merlin:install"/>
    <attainGoal name="merlin:tutorials"/>
    <attainGoal name="merlin:site"/>
    <attainGoal name="merlin:package"/>
    <attainGoal name="merlin:replicate"/>
  </goal>

  <goal name="merlin:replicate">
    <mkdir dir="${merlin.home}"/>
    <copy toDir="${merlin.home}">
      <fileset dir="${merlin.build.inst.dir}"/>
    </copy>
  </goal>

  <goal name="merlin:validate" description="Validate that the tutorial targets are buildable." >
    <maven:reactor
      basedir="${basedir}"
      includes="platform/tutorials/**/project.xml"
      excludes="platform/tutorials/project.xml,**/target/**"
      goals=""
      banner="Validate:"
      ignoreFailures="false" />
  </goal>

  <goal name="merlin:demo" description="Execute the demo targets." >
    <maven:reactor
      basedir="${basedir}"
      includes="platform/tutorials/**/project.xml"
      excludes="**/target/**"
      goals="demo"
      banner="Demo:"
      ignoreFailures="false" />
  </goal>


  <goal name="merlin:build" description="Build Merlin.">
    <maven:reactor basedir="${basedir}"
      includes="**/project.xml"
      excludes="target/**,platform/**,kernel/plugin/**,project.xml,merlin-extensions/**"
      goals="jar:install"
      banner="Installing:"
      ignoreFailures="false" />
    <attainGoal name="merlin:plugin"/>
  </goal>

  <goal name="merlin:install" 
    description="Build the Merlin distribution." prereqs="merlin:build,xinstall"/>

  <goal name="xinstall">
    <!-- prepare structure -->
    <ant:mkdir dir="${merlin.build.inst.dir}"/>
    <ant:mkdir dir="${merlin.build.inst.dir}/ext"/>
    <ant:mkdir dir="${merlin.build.inst.dir}/bin/lib"/>
    <ant:mkdir dir="${merlin.build.inst.dir}/repository"/>

    <!-- import bootstrap jar -->
    <ant:copy 
       file="${basedir}/kernel/bootstrap/target/${merlin.bootstrap.jar}" 
       toDir="${merlin.build.inst.dir}/bin/lib"/>

    <!-- import subproject jar files -->
    <maven:reactor
      basedir="${basedir}"
      includes="platform.xml"
      goals="ximport"
      banner="Resolving dependencies:"
      ignoreFailures="false"/>

    <!-- create a directory containing the plugins -->
    <ant:copy 
       file="${merlin.build.inst.dir}/system/avalon-meta/jars/${meta.plugin.jar}" 
       toDir="${maven.build.dir}/plugins"/>
    <delete file="${merlin.build.inst.dir}/system/avalon-meta/jars/${meta.plugin.jar}"/>
    <ant:mkdir dir="${maven.build.dir}/plugins"/>
    <ant:copy toDir="${maven.build.dir}/plugins">
      <fileset dir="${basedir}/kernel/plugin/target">
        <include name="${merlin.plugin.jar}"/>
      </fileset>
    </ant:copy>

    <!-- copy the xml api jar file to the merlin/ext directory -->
    <ant:copy 
       file="${merlin.build.inst.dir}/system/xml-apis/jars/xml-apis-2.0.2.jar" 
       toDir="${merlin.build.inst.dir}/ext"/>
    <ant:copy 
       file="${merlin.build.inst.dir}/system/xml-apis/jars/xmlParserAPIs-2.0.2.jar" 
       toDir="${merlin.build.inst.dir}/ext"/>
    <ant:copy 
       file="${merlin.build.inst.dir}/system/xerces/jars/xerces-2.4.0.jar" 
       toDir="${merlin.build.inst.dir}/ext"/>
    <delete dir="${merlin.build.inst.dir}/system/xml-apis"/>
    <delete dir="${merlin.build.inst.dir}/system/xerces"/>

    <!-- add supporting resources -->
    <ant:copy toDir="${merlin.build.inst.dir}">
      <fileset dir="${basedir}/platform/src">
        <include name="bin/**/*"/>
        <include name="config/**/*"/>
        <include name="system/**/*"/>
      </fileset>
      <fileset dir="${basedir}">
        <include name="LICENSE.txt"/>
        <include name="README.TXT"/>
      </fileset>
    </ant:copy>

    <ant:copy toDir="${maven.build.dir}">
      <fileset dir="${basedir}">
        <include name="INSTALLATION.TXT"/>
      </fileset>
    </ant:copy>

    <ant:chmod file="${merlin.build.inst.dir}/bin/merlin.sh" perm="u=rwx,go=rx"/>
    <ant:chmod file="${merlin.build.inst.dir}/bin/merlinx.sh" perm="u=rwx,go=rx"/>
    <ant:chmod file="${merlin.build.inst.dir}/bin/merlin-server.sh" perm="u=rwx,go=rx"/>
    <ant:fixcrlf eol="crlf" srcdir="${merlin.build.inst.dir}/bin">
       <include name="README.TXT"/>
    </ant:fixcrlf>
    <ant:fixcrlf eol="crlf" srcdir="${merlin.build.dir}">
       <include name="INSTALLATION.TXT"/>
    </ant:fixcrlf>
    <ant:fixcrlf eol="crlf" srcdir="${merlin.build.inst.dir}/bin">
      <include name="merlin.bat"/>
      <include name="merlinx.bat"/>
      <include name="README.TXT"/>
      <include name="LICENSE.TXT"/>
    </ant:fixcrlf>
    <ant:fixcrlf eol="crlf" srcdir="${merlin.build.inst.dir}/bin/nt">
      <include name="InstallService-NT.bat"/>
      <include name="UninstallService-NT.bat"/>
      <include name="TANUKISOFTWARE_LICENSE.txt"/>
      <include name="wrapper.conf"/>
    </ant:fixcrlf>
    <ant:fixcrlf eol="lf" srcdir="${merlin.build.inst.dir}/bin">
      <include name="merlin.sh"/>
      <include name="merlinx.sh"/>
      <include name="merlin-server.sh"/>
    </ant:fixcrlf>

  </goal>

  <goal name="merlin:plugin">
    <maven:reactor
      basedir="${basedir}"
      includes="kernel/plugin/project.xml"
      goals="plugin:install"
      banner="Installing plugin:"
      ignoreFailures="false"/>
  </goal>

  <goal name="merlin:package">

    <!--
    <j:set var="package.name" value="${maven.final.name}-dist"/>
    -->
    <maven:snapshot project="${pom}"/>
    <j:set var="timestamp" value="${snapshotSignature.substring(7,15)}"/>
    <j:set var="package.name" value="${maven.final.name}-dist-${timestamp}"/>

    <ant:echo>Building distribution: ${package.name}</ant:echo>
    <ant:zip zipfile="${maven.build.dir}/${package.name}.zip">
      <zipfileset dir="${merlin.build.inst.dir}" prefix="merlin"/>
      <zipfileset dir="${maven.build.dir}/plugins" prefix="plugins"/>
      <fileset dir="${basedir}">
        <include name="INSTALLATION.TXT"/>
      </fileset>
    </ant:zip>
    <checksum file="${maven.build.dir}/${package.name}.zip"/>

    <ant:tar tarfile="${maven.build.dir}/${package.name}.tar">
      <tarfileset dir="${merlin.build.inst.dir}" prefix="merlin"/>
      <tarfileset dir="${maven.build.dir}/plugins" prefix="plugins"/>
      <fileset dir="${basedir}">
        <include name="INSTALLATION.TXT"/>
      </fileset>
    </ant:tar>
    <ant:gzip 
      zipfile="${maven.build.dir}/${package.name}.tar.gz"
      src="${maven.build.dir}/${package.name}.tar"/>
    <ant:delete file="${maven.build.dir}/${package.name}.tar"/>
    <checksum file="${maven.build.dir}/${package.name}.tar.gz"/>

    <j:set var="docs.name" value="${maven.final.name}-docs-${timestamp}"/>
    <!-- <j:set var="docs.name" value="${package.name}-docs"/>-->

    <ant:echo>Building doc kit: ${docs.name}</ant:echo>
    <ant:zip zipfile="${maven.build.dir}/${docs.name}.zip">
      <zipfileset dir="${maven.build.dir}/docs" prefix="docs"/>
    </ant:zip>
    <checksum file="${maven.build.dir}/${docs.name}.zip"/>
    <ant:tar tarfile="${maven.build.dir}/${docs.name}.tar">
      <tarfileset dir="${maven.build.dir}/docs" prefix="docs"/>
    </ant:tar>
    <ant:gzip 
      zipfile="${maven.build.dir}/${docs.name}.tar.gz"
      src="${maven.build.dir}/${docs.name}.tar"/>
    <ant:delete file="${maven.build.dir}/${docs.name}.tar"/>
    <checksum file="${maven.build.dir}/${docs.name}.tar.gz"/>

    <j:set var="tutorial.name" value="${maven.final.name}-tutorial-${timestamp}"/>
    <!--<j:set var="tutorial.name" value="${maven.final.name}-tutorial"/>-->

    <ant:echo>Building tutorial kit: ${tutorial.name}</ant:echo>
    <ant:zip zipfile="${maven.build.dir}/${tutorial.name}.zip">
      <zipfileset dir="${basedir}/target/tutorials" prefix="tutorial"/>
    </ant:zip>
    <checksum file="${maven.build.dir}/${tutorial.name}.zip"/>
    <ant:tar tarfile="${maven.build.dir}/${tutorial.name}.tar">
      <tarfileset dir="${basedir}/target/tutorials" prefix="tutorial"/>
    </ant:tar>
    <ant:gzip 
      zipfile="${maven.build.dir}/${tutorial.name}.tar.gz"
      src="${maven.build.dir}/${tutorial.name}.tar"/>
    <ant:delete file="${maven.build.dir}/${tutorial.name}.tar"/>
    <checksum file="${maven.build.dir}/${tutorial.name}.tar.gz"/>

  </goal>

  <!--
  Import the jar files declared as dependecies from platform.xml.  This
  includes all of the external jar files needed to run merlin.  Dependent 
  jar files are copied from the user's local repository to the merlin 
  install repository.
  -->
  <goal name="ximport">
    <j:forEach var="dep" items="${pom.dependencies}">
      <j:if test="${dep.getId() != 'junit:junit'}">
        <mkdir dir="${maven.build.dir}/${merlin.build.inst}/system/${dep.artifactDirectory}/${dep.type}s"/>
        <copy 
          todir="${maven.build.dir}/${merlin.build.inst}/system/${dep.artifactDirectory}/${dep.type}s/"
          file="${maven.repo.local}/${dep.artifactDirectory}/${dep.type}s/${dep.artifact}"/>
      </j:if>
    </j:forEach>
  </goal>

  <!--
  Generation of the documentation for the entire Merlin project including the 
  related subprojects.
  NOTE: merlin site generation is broken due a bug in Maven RC1
  Workaround is to download docs from 
  http://www.apache.org/dist/avalon/merlin/binaries/
  -->
  <goal name="merlin:site"
      description="Build the Merlin site" prereqs="license">
    <maven:reactor basedir="${basedir}"
      includes="platform.xml"
      goals="xjavadoc,site"
      banner="Building site:"
      ignoreFailures="false"/>
  </goal>

  <!--
  Build the tuturials distribution.
  -->
  <goal name="merlin:tutorials"
    description="Build tutorials.">
    <maven:reactor
      basedir="${basedir}"
      includes="platform.xml"
      goals="xtutorials"
      banner="Building tutorials:"
      ignoreFailures="false"/>
  </goal>

  <goal name="xtutorials">
    <ant:mkdir dir="${basedir}/target/tutorials"/>
    <ant:copy todir="${basedir}/target/tutorials">
      <fileset dir="${basedir}/platform/tutorials">
        <include name="README.TXT"/>
        <include name="project.xml"/>
        <include name="maven.xml"/>
        <include name="hello/**"/>
        <include name="configuration/**"/>
        <include name="context/**"/>
        <include name="composition/**"/>
        <include name="dependencies/**"/>
        <include name="lifecycle/**"/>
        <include name="meta/**"/>
        <include name="profiles/**"/>
        <include name="selection/**"/>
        <exclude name="**/target/**"/>
        <exclude name="**/*.log"/>
      </fileset>
    </ant:copy>
  </goal>

  <goal name="xjavadoc">
    <ant:mkdir dir="${maven.build.dir}/docs/api" />
    <ant:property name="copyright"
      value="Copyright &amp;copy; ${year} ${pom.organization.name}. All Rights Reserved." />
    <ant:property name="title" value="${pom.name} ${pom.currentVersion} API"/>
    <ant:javadoc destdir="${maven.build.dir}/docs/api" 
	doctitle="&lt;h1&gt;Merlin Service Management API&lt;/h1&gt;" 
      noindex="false" author="true" use="true"
	windowtitle="${title}" 
      bottom="${copyright}"
      additionalparam="-breakiterator -J-Xmx128m "
      packagenames="*,org.*">
        <j:forEach var="packageGroup" items="${pom.packageGroups}">
          <group title="${packageGroup.title}" packages="${packageGroup.packages}"/>
        </j:forEach>
        <sourcepath path="${basedir}/repository/spi/src/java"/>
        <sourcepath path="${basedir}/repository/impl/src/java"/>
        <sourcepath path="${basedir}/extension/spi/src/java"/>
        <sourcepath path="${basedir}/extension/impl/src/java"/>
        <sourcepath path="${basedir}/composition/api/src/java"/>
        <sourcepath path="${basedir}/composition/spi/src/java"/>
        <sourcepath path="${basedir}/composition/impl/src/java"/>
        <sourcepath path="${basedir}/activation/api/src/java"/>
        <sourcepath path="${basedir}/activation/spi/src/java"/>
        <sourcepath path="${basedir}/activation/impl/src/java"/>
        <sourcepath path="${basedir}/kernel/spi/src/java"/>
        <sourcepath path="${basedir}/kernel/impl/src/java"/>
        <sourcepath path="${basedir}/kernel/unit/src/java"/>
        <classpath>
          <path refid="maven.dependency.classpath"/>
	  </classpath>
	  <link href="${sun.j2se.link}" />
	  <link href="${sun.j2ee.link}" />
	  <link href="${avalon.framework.link}" />
	  <link href="${avalon.meta.link}" />
	  <link href="${avalon.logkit.link}" />
	  <link href="${avalon.lifecycle.link}" />
	  <link href="${excalibur.configuration.link}" />
        <!-- comment out the following until the respective project docs are in place -->
	  <!--<link href="${excalibur.pool.link}" />-->
	  <!--<link href="${excalibur.thread.link}" />-->
	  <!--<link href="${excalibur.event.link}" />-->
    </ant:javadoc>
  </goal>

  <!--
  ==============================================================================
  utilities
  ==============================================================================
  -->

  <goal name="merlin:clean" prereqs="clean">
    <maven:reactor
      basedir="${basedir}"
      includes="**/project.xml"
      excludes="project.xml,kernel/plugin/**/*,merlin-extensions/**"
      goals="clean:clean"
      banner="Cleaning subproject:"
      ignoreFailures="false"/>
  </goal>

  <goal name="merlin-clean" prereqs="merlin:clean"/>
  <goal name="merlin-dist" prereqs="merlin:install"/>
  <goal name="merlin-site" prereqs="merlin:site"/>
  <goal name="merlin-libs" prereqs="merlin:update"/>

</project>
