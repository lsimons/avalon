<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->

<document>
  <header>
    <title>Using Merlin : Contextualization</title>
    <authors>
      <person name="Stephen McConnell" email="mcconnell@apache.org"/>
    </authors>
  </header>
  <body>
    <section name="Using Merlin">
      <subsection name="Casting Context to a custom Interface">
        <p>
        This tutorial describes how Merlin provides support
        for the safe casting of a supplied context instance to 
        a domain specific context interface.
        </p>
        <p>
        Resources supporting this tutorial are contained in the 
        tutorials/casting package.
        </p>
      </subsection>
      <subsection name="Requirements">
        <p>
        While the context interface provides the mechanisms to 
        access any object type, it is sometimes convinient to 
        declare a domain specific interface and context 
        implementation.  This enables client code to take advantage
        of convinience accessors, resulting in code less cluttered
        with casting and context entry key references.
        </p>
        <p>
        For example, the following code fragment demonstrates a type
        safe casting of a supplied context value by the component to 
        domain specific context interface.
        </p>
<source>
   /**
    * Contextualization of the component using a context
    * class that implements a domain specific context interface.
    */
    public void contextualize( Context context )
      throws ContextException
    {
        DemoContext c = (DemoContext) context;
        getLogger().info( "name: " + c.getName() );
        getLogger().info( "partition: " + c.getPartition() );
        getLogger().info( "home: " + c.getHomeDirectory() );
        getLogger().info( "temp: " + c.getWorkingDirectory() );
    }
</source>
      </subsection>
      <subsection name="Sample Code">
        <p>
        The following code is an example of an extended context 
        interface.
        </p>
        <source>
package tutorial;

import java.io.File;

import org.apache.avalon.framework.context.Context;

/**
 * An example of an convinience interface that extends the 
 * standard Avalon Context interface.
 */
public interface DemoContext extends Context
{

   /**
    * Return the component name.
    * @return the component name
    */
    String getName();

   /**
    * Return the name of the partition assigned to the component.
    * @return the partition name
    */
    String getPartition();

   /**
    * Return the home directory.
    * @return the directory
    */
    File getHomeDirectory();

   /**
    * Return the temporary working directory.
    * @return the directory
    */
    File getWorkingDirectory();
}
</source>
        <p>
        The following source is the implementation of the domain 
        specific context interface.  The implementation class must include
        a constructor that takes a base context as single argument.  The supplied context
        context entries requested by the component type and populated in accordance with
        the associated context directives.
        </p>
        <source>
package tutorial;

import java.io.File;

import org.apache.avalon.framework.context.Context;
import org.apache.avalon.framework.context.DefaultContext;
import org.apache.avalon.framework.context.ContextException;


/**
 * A demonstration class that that we will instantiate via 
 * context directives within the component declaration.
 */
public class DemoContextProvider extends DefaultContext implements DemoContext
{

   /**
    * A custom context type implementation must provide
    * the following constructor.
    * @param entries a map of context entries
    */
    public DemoContextProvider( Context context )
    {
        super( context );
    }
 
   /**
    * Return the component name.
    * @return the component name
    */
    public String getName()
    {
        try
        {
            return (String) super.get( "urn:avalon:name" );
        }
        catch( ContextException ce )
        {
            // should not happen 
            throw new RuntimeException( ce.toString() );
        }
    }

   /**
    * Return the name of the partition assigned to the component.
    * @return the partition name
    */
    public String getPartition()
    {
        try
        {
            return (String) super.get( "urn:avalon:partition" );
        }
        catch( ContextException ce )
        {
            // should not happen 
            throw new RuntimeException( ce.toString() );
        }
    }

   /**
    * Return the home directory.
    * @return the home directory
    */
    public File getHomeDirectory()
    {
        try
        {
            return (File) super.get( "urn:avalon:home" );
        }
        catch( ContextException ce )
        {
            // should not happen 
            throw new RuntimeException( ce.toString() );
        }
    }


   /**
    * Return the temporary working directory.
    * @return the temp directory
    */
    public File getWorkingDirectory()
    {
        try
        {
            return (File) super.get( "urn:avalon:temp" );
        }
        catch( ContextException ce )
        {
            // should not happen 
            throw new RuntimeException( ce.toString() );
        }
    }
}
</source>
      </subsection>
      <subsection name="Declaring the context interface">
        <p>
          To be supplied with a domain specific context to which 
          the component can safely cast, we need to declare this 
          dependency within the component xinfo descriptor.
        </p>
<source><![CDATA[
<type>
  <info>
    <name>hello</name>
    <version>1.0</version>
  </info>
  <context type="tutorial.DemoContext"/>
</type>
]]></source>
        <p>
          Secondly, we need to provide corresponding meta-data to Merlin
          describing the implementation class that it can use to construct
          the context instance.  The following changes to the block.xml
          description include the "class" attribute on the context directive.
          The class attribute tells Merlin to use the named class as the 
          context implementation.
        </p>
<source><![CDATA[
<container name="tutorial">
   <component name="hello" class="tutorial.HelloComponent" activation="startup">
     <context class="tutorial.DemoContextProvider"/>
   </component>
</container>
]]></source>
      </subsection>
      <subsection name="Executing the example">
        <p>
        Build and run the tutorial.
        </p>
        <source>
$ ant jar
$ merlin build\classes
        </source>
        <p>
        In the logging output we see the standard context values
        accessed via the domain specific context interface.
        </p>
<source>
[INFO   ] (tutorial.hello): name: hello
[INFO   ] (tutorial.hello): partition: /tutorial/hello
[INFO   ] (tutorial.hello): home: F:\tutorial\005\working\home\tutorial\hello
[INFO   ] (tutorial.hello): temp: F:\tutorial\005\working\temp\tutorial\hello
</source>

      </subsection>

      <subsection name="Next Steps">

        <p>
        The advanced tutorial provides information about the creation of a  
        <a href="../../advanced/context.html">custom contextualization strategies</a>.
        Alternatively, you can move onto the subject of 
        <a href="../services.html">service publication</a>.
        </p>

      </subsection>

    </section>
  </body>

</document>





