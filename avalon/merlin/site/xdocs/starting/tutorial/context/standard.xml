<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->

<document>
  <header>
    <title>Using Merlin : Contextualization</title>
    <authors>
      <person name="Stephen McConnell" email="mcconnell@apache.org"/>
    </authors>
  </header>
  <body>
    <section name="Using Merlin">
      <subsection name="Managing Context">
        <p>
        This tutorial presents information about the management
        of the runtime context supplied to your component.
        </p>
        <p>
        Resource supporting this tutorial are contained in the 
        tutorials/context/avalon/ package.
        </p>
      </subsection>

      <subsection name="Merlin Standard Context Entries">
        <p>
        In order to receive a runtime context we need to update the 
        HelloComponent source so that it implements the Avalon 
        Contextualizable lifecycle stage interface.  Merlin will 
        build and supply a context object containing the following  
        four context entries:
        </p>
        <p><i>Merlin Standard Context Entries</i></p>
        <table>
        <tr>
          <th>Key</th><th>Class</th><th>Description</th>
        </tr>
        <tr>
          <td>urn:avalon:home</td><td>java.io.File</td>
          <td>The working directory.</td>
        </tr>
        <tr>
          <td>urn:avalon:temp</td><td>java.io.File</td>
          <td>The temporary directory that will be destroyed at the 
            end of the session.</td>
        </tr>
        <tr>
          <td>urn:avalon:name</td><td>java.lang.String</td>
          <td>The name assigned to the component.</td>
        </tr>
        <tr>
          <td>urn:avalon:partition</td><td>java.lang.String</td>
            <td>The assigned partition name.</td>
        </tr>
        </table>
      </subsection>

      <subsection name="Adding context support to the component">
        <p>
        In order to receive a runtime context we need to update the 
        HelloComponent source so that it implements the Avalon 
        Contextualization stage interface.  Merlin will build and 
        supply a context object containing the standard four 
        context entries.
        </p>
        <p><i>HelloComponent.java</i></p>

<source>
package tutorial;

import java.io.File;

import org.apache.avalon.framework.logger.AbstractLogEnabled;
import org.apache.avalon.framework.context.Contextualizable;
import org.apache.avalon.framework.context.Context;
import org.apache.avalon.framework.context.ContextException;

/**
 * Component demonstrating access to standard context entries.
 * @avalon.component name="demo"
 */
public class HelloComponent extends AbstractLogEnabled 
  implements Contextualizable
{

    private File m_home = null;
    private File m_temp = null;
    private String m_name = "unknown";
    private String m_partition = "unknown";

   /**
    * Contextualization of the component by the container.
    * The context supplied by the container holds the 
    * Merlin standard context entries for the home and 
    * working directories, component name and partition.
    *
    * @avalon.context
    * @avalon.entry key="urn:avalon:name" 
    * @avalon.entry key="urn:avalon:partition" 
    * @avalon.entry key="urn:avalon:home" type="java.io.File"
    * @avalon.entry key="urn:avalon:temp" type="java.io.File"
    */
    public void contextualize( Context context )
      throws ContextException
    {
        m_home = (File) context.get( "urn:avalon:home" );
        m_temp = (File) context.get( "urn:avalon:temp" );
        m_name = (String) context.get( "urn:avalon:name" );
        m_partition = (String) context.get( "urn:avalon:partition" );

        StringBuffer buffer = new StringBuffer( "standard context entries" );
        buffer.append( "\n  name: " + m_name );
        buffer.append( "\n  home: " + m_home );
        buffer.append( "\n  temp: " + m_temp );
        buffer.append( "\n  partition: " + m_partition );

        getLogger().info( buffer.toString() );

    }
}
</source>
        <p>
        Build and run the tutorial.
        </p>
<source>
$ maven
$ merlin -execute target\classes
</source>
        <p>
        In the logging output we see the values provided by 
        Merlin to the component.
        </p>
<source>
[INFO   ] (tutorial.hello): standard context entries
  name: hello
  home: F:\dev\avalon\merlin\platform\tutorials\context\avalon\home\tutorial\hello
  temp: C:\TEMP\tutorial\hello
  partition: /tutorial/
</source>
      </subsection>

      <subsection name="Using Defaults">

        <p>
        The <a href="entries.html">next tutorial</a> shows how 
        Merlin provides support for creating custom context entries.
        </p>

      </subsection>
    </section>
  </body>
</document>




