<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->

<document>
  <header>
    <title>Using Merlin : Service</title>
    <authors>
      <person name="Stephen McConnell" email="mcconnell@apache.org"/>
    </authors>
  </header>
  <body>
    <section name="Using Merlin">
      <subsection name="Managing Dependencies - Manual Association">
        <p>
The manual dependencies tutorial covers additional information dealing 
with the explict control over dependency binding.  In this example we 
have HelloComponent with a dependency on two services of the same type. If we 
depended on classic merlin auto-assembly we would not necessarily get the 
desired result.  In such a situation, Merlin provides support for 
overriding the auto assembly process though explicit dependency directives
included inside a &lt;component/&gt; tag.
        </p>
        <p>
        Resources supporting this tutorial are contained in the 
        turorials/dependencies/manual package.
        </p>
        <p>
In the block.xml we have three component directives:
        </p>
<source><![CDATA[
     <component name="gloria" class="tutorial.IdentifiableComponent"/>
     <component name="nancy" class="tutorial.IdentifiableComponent"/>

     <component name="hello" class="tutorial.HelloComponent">
       <dependencies>
         <dependency key="primary" source="gloria"/>
         <dependency key="secondary" source="nancy"/>
       </dependencies>
     </component>
]]></source>
        <p>
        The "hello" component has been manually wired together using named 
        components references under a set of <dependency/> directives, thereby 
        overriding Merlin auto-assembly heuristics.
        </p>
      </subsection>

      <subsection name="Executing the demo">
        <p>
        Build and run the tutorial.
        </p>
        <source>
$ maven
$ merlin target\classes -execute
        </source>
        <p>
        In the logging output we see that Merlin has established and 
        and assigned the components we requested based on our directives
        in the block.xml file.
        </p>
<source>
[INFO   ] (tutorial.nancy): contextualize
[INFO   ] (tutorial.gloria): contextualize
[INFO   ] (tutorial.hello): initialization
[INFO   ] (tutorial.hello): assigned primary: /tutorial/gloria
[INFO   ] (tutorial.hello): assigned secondary: /tutorial/nancy
</source>
      </subsection>

      <subsection name="Advanced Features">
        <p>
        This completes the introduction to some of the basic features
        of the merlin platform.  More tutorials will be added so please check 
        for new releases and updates. In the meantime you may want to take a 
        look at some of Merlin's more <a href="../../advanced/index.html">advanced 
        features</a>. 
        </p>
      </subsection>



    </section>
  </body>

</document>




