<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->

<document>
  <header>
    <title>Using Merlin : Service</title>
    <authors>
      <person name="Stephen McConnell" email="mcconnell@apache.org"/>
    </authors>
  </header>
  <body>
    <section name="Using Merlin">
      <subsection name="Managing Dependencies">
        <p>
        A component type can declare dependencies on services provided by 
        other components.  Merlin will ensure that dependencies are resolved
        prior to creation of the dependent component.  Dependencies are 
        declared in the component xinfo resource and supplied by Merlin to
        the component using the Avalon Serviceable interface.
        </p>
        <p>
        Resources supporting this tutorial are contained in the 
        turorials/dependencies/auto package.
        </p>
      </subsection>
      <subsection name="Adding a Serviceable method implementation">
        <p>
        The following code fragment is the implementation of the 
        Serviceable interface under the HelloComponent.java source. 
        </p>
        <p><i>
        Note the use of the @avalon.dependency tag. 
        </i></p>
        <p><i>HelloComponent.java</i></p>
<source>
package tutorial;

import org.apache.avalon.framework.logger.AbstractLogEnabled;
import org.apache.avalon.framework.service.Serviceable;
import org.apache.avalon.framework.service.ServiceManager;
import org.apache.avalon.framework.service.ServiceException;
import org.apache.avalon.framework.activity.Initializable;
import org.apache.avalon.framework.activity.Disposable;

/**
 * The HelloComponent is dependent on a RandomGenerator service.
 * @avalon.component version="1.0" name="simple" lifestyle="singleton"
 */
public class HelloComponent extends AbstractLogEnabled 
  implements Initializable, Serviceable, Disposable
{
    RandomGenerator m_random = null;
    Identifiable m_identifiable = null;

   /**
    * Servicing of the component by the container during 
    * which service dependencies declared under the component
    * can be resolved using the supplied service manager.
    *
    * @param manager the service manager
    * @avalon.dependency type="tutorial.RandomGenerator:1.0"
    *    key="random"
    * @avalon.dependency type="tutorial.Identifiable"
    */
    public void service( ServiceManager manager )
      throws ServiceException
    {
        m_random = (RandomGenerator) manager.lookup( "random" );
        m_identifiable = 
          (Identifiable) manager.lookup( Identifiable.class.getName() );
    }

    public void initialize()
    {
        getLogger().info( "initialization" );
        getLogger().info( "received random value: " + m_random.getRandom() );
        getLogger().info( "using identifiable: " + m_identifiable.getIdentity() );
    }

    public void dispose()
    {
        getLogger().info( "disposal" );
    }

}
</source>
      </subsection>

      <subsection name="Declaring the service dependency">
        <p>
        In this example we are automatically generating the xinfo descriptors
        using the builtin meta-info generation goal based on the presence of
        dependency tags.
        </p>
<source><![CDATA[
* @avalon.dependency type="tutorial.RandomGenerator:1.0"
*    key="random"
* @avalon.dependency type="tutorial.Identifiable"
]]></source>

        <p>
        The generated xinfo for the hello component is shown below. 
        </p>
        <p><i>HelloComponent.xinfo</i></p>
<source><![CDATA[
<type>
  <info>
    <name>simple</name>
    <version>1.0.0</version>
    <lifestyle>singleton</lifestyle>
  </info>
  <dependencies>
    <dependency key="random" type="tutorial.RandomGenerator" version="1.0.0"/>
    <dependency type="tutorial.Identifiable"/>
  </dependencies>
</type>
]]></source>
      </subsection>

      <subsection name="Executing the demo">
        <p>
        Build and run the tutorial.
        </p>
        <source>
$ maven
$ merlin target\classes -execute
        </source>
        <p>
        In the logging output we see that Merlin has automatically
        located both RandomGeneratorProvider and IdentifiableComponent 
        and provided these to the consumer.  The HelloComponent
        implementation has logged the result of accessing and using 
        both services.
        </p>
<source>
[INFO   ] (tutorial.random): initialization
[INFO   ] (tutorial.simple): contextualize
[INFO   ] (tutorial.hello): initialization
[INFO   ] (tutorial.random): processing request
[INFO   ] (tutorial.hello): received random value: 359973592
[INFO   ] (tutorial.hello): using identifiable: /tutorial/simple
[INFO   ] (tutorial.hello): disposal
[INFO   ] (tutorial.random): disposal
</source>
      </subsection>

      <subsection name="Next Topic">
        <p>
        The <a href="manual.html">next topic</a> shows how you can 
        override Merlin's automatic dependency resolution by declaring
        named suppliers for particular dependencies. 
        </p>
      </subsection>

    </section>
  </body>

</document>




