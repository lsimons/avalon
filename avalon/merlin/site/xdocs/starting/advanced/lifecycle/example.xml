<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->

<document>
  <header>
    <title>Lifecycle Extensions</title>
    <authors>
      <person name="Avalon Development Team" email="dev@avalon.apache.org"/>
    </authors>
  </header>
  <body>

  <section name="Lifecycle Extensions Example">

    <subsection name="Creating your lifestyle stage interface">

<p>
The following interface is your domain specific lifecycle stage interface.  It is the interface that an extension handler will use to interact with your component during deployment and decommissioning.
</p>

      <source>
 public interface Exploitable
 {
    /**
     * Operation invoked by your exploitation manager.
     * @param message a message to be displayed
     */
     void exploit( String message );
 }
      </source>

    </subsection>

    <subsection name="Create the lifestyle extension handler">

<p>
An extension handler is the implementation class that will be activated by the Merlin container to handle domain specific tasks during the deployment and decommissioning phases.  The extension can implement either or both of the Creator and Accessor interfaces depeding on the particular extension requirements.  In this example we are defining a simple creation stage handler that supplies a message to an instance of Exploitable.
</p>
      <source>
 public class ExploitationManager implements Creator
 {
    /**
     * Operation invoked by a container to request creation
     * stage extension interception.
     * @param object a component to manager
     * @param context the context
     */
     public void create( Object object, Context context )
     {
         if( object instanceof Exploitable )
         {
             ((Expoitable)object).exploit( "hello" );
         }
     }

    /**
     * Operation invoked by a container to request destroy
     * stage extension interception.
     * @param object a component to manager
     * @param context the context
     */
     public void destroy( Object object, Context context )
     {
     }
 }
      </source>

<p>
To complete the definition of your extension handler you need to prepare the 
meta-info that will be used by Merlin to identify the extension and the stage 
interface it supports.  The following &lt;type/&gt; declaration includes an 
&lt;extensions/&gt; tag that contains a &lt;reference/&gt; element that 
includes the reference to the Exploitable lifecycle stage interface. This is 
the key that Merlin uses to associate a handler with a component.  If your 
extension class requires any specific context values, they should be declared 
in a &lt;context/&gt; element within the &lt;extension/&gt; element.
</p>

        <source><![CDATA[
<type>

   <info>
      <name>my-extension-handler</name>
   </info>

   <extensions>
     <extension type="Exploitable"/>
   </extensions>

</type>
]]></source>

    </subsection>

    <subsection name="Create a component implementing the stage interface">
      <source>
 public class MyComponent extends AbstractLogEnabled implements Exploitable
 {
    /**
     * Operation invoked by an exploitation manager.
     * @param message a message to be displayed
     */
     public void exploit( String message )
     {
         getLogger().info( message );
     }
 }
      </source>

<p>
To complete the defintion of your component you need to prepare the meta-info 
that will be used by Merlin to identify the stage interface it requires a 
handler for.  The following &lt;type/&gt; declaration includes a 
&lt;stage/&gt; tag that contains a &lt;reference/&gt; element that includes 
a reference to the Exploitable lifecycle stage interface. This is the key that 
Merlin uses to associate the component with a handler capable of handling the 
Exploitable interface.
</p>

        <source><![CDATA[
<type>

   <info>
      <name>my-component</name>
   </info>

   <stages>
     <stage type="Exploitable"/>
   </stages>

</type>

]]></source>
    </subsection>

    <subsection name="Execution">

<p>To execute the example you simply need to include a reference to your 
component within a Merlin container declaration.  The following XML source 
declares a Merlin kernel, container, and component.  You don't need to include 
the handler because Merlin can sort that out itself based on the information 
supplied in the meta-info declarations.</p>

<source><![CDATA[

     <component name="demo" class="MyComponent" activation="startup"/>

]]></source>

    </subsection>

  </section>

  </body>
</document>
