<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->


<document>
  <header>
    <title>Using Merlin</title>
    <authors>
      <person name="Stephen McConnell" email="mcconnell@apache.org"/>
    </authors>
  </header>
  <body>
    <section name="Advanced Features">
      <subsection name="Packaged Deployment Profiles">
        <p>
Central to the Merlin component management model is the notion deployment profiles. A profile is a predefined deployment template. It enables Merlin to establish a component type and associated context, parameterisation and/or configuration information as a candidate scenario when building a connected set of components.
        </p>
        <p>
Component deployment profiles are co-located with the component implementation class under a .xprofile resource.
        </p>
      </subsection>
      <subsection name="Creating a Profile">
        <p>
This tutorial extends the interfaces, classes and meta info declared in the <a href="../tutorial/dependencies.html">dependencies tutorial</a> by adding a configurable seed value to the RandomGenerator component. Without the benefit of a profile, users would be forced to declare a configuration under the block.xml directive. By providing one or more profiles, we enable Merlin to automatically select a deployment scenario candidate and use this during the assembly phase. 
        </p>
        <p>
The RandomGeneratorProvider source and the corresponding profile directive are presented below.
        </p>
        <p><i>RandomGeneratorProvider.java</i></p>
<source>

package tutorial;

import java.util.Random;

import org.apache.avalon.framework.configuration.Configuration;
import org.apache.avalon.framework.configuration.ConfigurationException;
import org.apache.avalon.framework.configuration.Configurable;
import org.apache.avalon.framework.logger.AbstractLogEnabled;

/**
 * An implementation of a random number generator.
 * 
 * @avalon.component name="randomizer" lifestyle="singleton"
 * @avalon.service type="tutorial.RandomGenerator"
 */
public class RandomGeneratorProvider extends AbstractLogEnabled 
  implements Configurable, RandomGenerator
{

    private Random m_random = null;

   /**
    * Configuration of the component by the container.  The 
    * implementation get a child element named 'source' and 
    * assigns the value of the element to a local variable.
    *
    * @param config the component configuration
    * @exception ConfigurationException if a configuration error occurs
    */
    public void configure( Configuration config ) throws ConfigurationException
    {
        getLogger().info( "configuration stage" );
        long seed = config.getChild( "seed" ).getValueAsLong( 0 );
        getLogger().info( "seed: " + seed );
        m_random = new Random( System.currentTimeMillis() * seed );
    }

   /**
    * Return a random integer
    * @return the random number
    */
    public int getRandom()
    {
        return m_random.nextInt();
    }
}
</source>
        <p>
The RandomGeneratorProvider.xprofile contains the definition of multiple tagged deployment scenarios.  During assembly Merlin will attempt to locate an explicit deployment profile (a component declaration in the block.xml).  In no explicit profile is available Merlin will select a packaged profile based on the xprofile declarations, otherwise Merlin will attempt to construct an implicit profile.
        </p>
        <p><i>RandomGeneratorProvider.xprofile</i></p>
<source><![CDATA[
<?xml version="1.0"?>

<profiles>
  <profile name="primary">
    <configuration>
      <seed>1024</seed>
    </configuration>
  </profile>
</profiles>
]]></source>
      </subsection>
      <subsection name="Executing the tutorial">
        <p>
        Build and run the tutorial.
        </p>
        <source>
$ maven jar
$ merlin -execute target\classes
        </source>
        <p>
In the logging output we see that Merlin has automatically locating the RandomGeneratorProvider using the packaged profile.
        </p>
<source>
[INFO   ] (kernel): installing: file:/${user.dir}/target/classes/
[INFO   ] (tutorial.randomizer-primary): configuration stage
[INFO   ] (tutorial.randomizer-primary): seed: 1024
[INFO   ] (tutorial.hello): resolved random: -1250858422
[INFO   ] (kernel): dissassembly phase
[INFO   ] (kernel): disposal phase</source>
        <p>
Note: When constructing a name for the component based on a packaged profile, Merlin will append the component type name to the profile name, seperated by the - character resulting in the component name 'random-provider-randomizer'.
        </p>

      </subsection>
      <subsection name="Profile selection">
        <p>
The <a href="selection.html">next tutorial</a> describes how you can package multiple profiles with a component and how you can control profile selection. 
        </p>
      </subsection>

    </section>
  </body>

</document>




