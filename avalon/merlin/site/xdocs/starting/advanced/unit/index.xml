<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->

<document>
  <header>
    <title>Using Merlin</title>
    <authors>
      <person name="Stephen McConnell" email="mcconnell@apache.org"/>
    </authors>
  </header>
  <body>
    <section name="Advanced Features">
      <subsection name="Unit Tests">
        <p>
        The Merlin platform provides an abstract test case class that you
        can use as a component factory.  To create a Merlin based unit
        test you simply extend AbstractMerlinTestCase.
        </p>
        <p>
        To use AbstractMerlinTestCase you should include the following 
        dependency in you maven project definition.
        </p>
<source><![CDATA[
    <dependency>
      <groupId>merlin</groupId>
      <artifactId>merlin-unit</artifactId>
      <version>3.1-dev</version>
    </dependency>
]]></source>
        <p>
        The following code fragment declares a new test case using the 
        abstract Merlin test case.
        </p>
        <source>
import org.apache.avalon.merlin.unit.AbstractMerlinTestCase;

public class ExampleTestCase extends AbstractMerlinTestCase
{
    public ExampleTestCase( String name )
    {
        super( name );
    }

    // ...
}
        </source>
        <p>
        The default behaviour is to deploy a block based on the 
        deployment path ${basedir}/target/classes/.  Merlin will attempt
        to locate a block.xml file at the [DEPLOYMENT-PATH]/BLOCK-INF/block.xml. 
        To make sure that a block.xml file and component meta-info is available under 
        ${basedir}/target/classes/ you need to include the following resource
        statement in you maven project descriptor.
        </p>
<source><![CDATA[
  <build>
    <sourceDirectory>${basedir}/src/java/</sourceDirectory>
    <unitTestSourceDirectory>${basedir}/src/test/</unitTestSourceDirectory>
    <resources>
      <resource>
        <directory>${basedir}/conf</directory>
        <targetPath>BLOCK-INF</targetPath>
        <includes>
          <include>block.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>${basedir}/src/java</directory>
        <includes>
          <include>**/*.x*</include>
        </includes>
      </resource>
    </resources>
  </build>
]]></source>

        <p>
        You can now access components established by Merlin via 
        the component name.  For example, if your block.xml defines
        a component named "hello" you access the component by 
        requesting the relative path "hello".  Relative paths are 
        resolved relative to the container defined by your block
        definition.
        </p>
        <p>
        The following code fragment demonstrates the usage of the 
        resolve method to locate a named component and a convenience 
        getLogger() method.
        </p>
<source><![CDATA[
public void testServiceResolution() throws Exception
{
    Hello hello = (Hello) resolve( "hello" );
    assertTrue( hello != null );
    getLogger().info( "Message from hello service: " + hello.getMessage() );
}
]]></source>

      </subsection>
      <subsection name="Customizing Merlin behaviour">
        <p>
        The abstract test case includes a constructor that allows
        control over the deployment path, configuration, debugging 
        and info generation policies.  Please refer to the supporting
        javadoc for more details.
        </p>
<source><![CDATA[
public StandardTestCase( String name )
{
    super( 
      MAVEN_TARGET_TEST_CLASSES_DIR, 
      MERLIN_DEFAULT_CONFIG_FILE, 
      MERLIN_DEBUG_OFF, 
      MERLIN_INFO_OFF, 
      name );
    }
]]></source>
      </subsection>
    </section>
  </body>

</document>




