<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->

<document>
  <header>
    <title>Using Merlin</title>
    <authors>
      <person name="Stephen McConnell" email="mcconnell@apache.org"/>
    </authors>
  </header>
  <body>
    <section name="Advanced Features">
      <subsection name="Composite Blocks">
        <p>
         A container can declare services that it exports.  In such a case
         the container declares one or more service directives that map 
         components declared within itself as service providers.  
         This mechanism enables a container to appear as a regular 
         component relative to other components.
        </p>
        <p>
         Content supporting this tutorial is available under the 
         tutorials/composition directory.
        </p>
      </subsection>
      <subsection name="Sample Container">
        <p>
         The following container definition includes:
        </p>
        <ul>
          <li><p>an application component</p></li>
          <li><p>a location provider block inlcuded by reference</p></li>
          <li><p>an application block included by reference</p></li>
        </ul>
        <p>
          The application block declares dependencies on a location 
          and publishing service.  The location and publishing block
          declare that they provide these respective services. As a part of 
          the general component assembly process - Merlin will assemble 
          blocks relative to the services and dependencies they declare.
          When a block is deployed, it appears to other components as a 
          component providing the services it exports.  However in practice
          these services are provided by components defined with the 
          container (i.e. the container represents the defintion of 
          a virtual component and the containers components and subcontainers
          represent the virual compoent implementation).
        </p>
        <p>The top level application block declaration (block.xml):</p>
        <source><![CDATA[
<container name="application">

     <classloader>
       <classpath>
         <repository>
           <resource id="avalon-framework:avalon-framework-impl" version="4.1.5"/>
           <resource id="merlin-tutorial:locator-api" version="1.0"/>
           <resource id="merlin-tutorial:publisher-api" version="1.0"/>
           <resource id="merlin-tutorial:application-impl" version="1.0"/>
         </repository>
       </classpath>
     </classloader>

     <!-- 
     note: each of the following include directives is equivalent to 
     a nested container declaration - using include or declaraing a 
     sub-container is semantically equivalent
     -->

     <include name="location" id="merlin-tutorial:locator-impl" version="1.0"/>
     <include name="publisher" id="merlin-tutorial:publisher-impl" version="1.0"/>

     <component name="application" 
        class="tutorial.application.Application">
     </component>

</container>
]]></source>
        <p>
          If we look at the location block (as an example) we will see a corresponding
          service declaration.  This declaration includes a source reference that is 
          a relative component path that tells Merlin to use the sub-component named
          "location" as the component that will fulfil the service published by this 
          block.
        </p>
        <source><![CDATA[
<container name="locator">

   <services>
     <service type="tutorial.location.LocationService">
       <source>info</source>
     </service>
   </services>

   <classloader>
     <classpath>
       <repository>
         <resource id="avalon-framework:avalon-framework-api" version="SNAPSHOT"/>
         <resource id="avalon-framework:avalon-framework-impl" version="SNAPSHOT"/>
         <resource id="merlin-tutorial:locator-api" version="1.0"/>
         <resource id="merlin-tutorial:locator-impl" version="1.0"/>
       </repository>
     </classpath>
   </classloader>

   <component name="info" 
       class="tutorial.location.LocationComponent">
       <configuration>
         <source>Paris</source>
       </configuration>
   </component>

</container>
]]></source>

      </subsection>
      <subsection name="Execution">
        <p>
         To run build and run the example please use the following commands:
        </p>
        <source><![CDATA[
$ cd application/impl
$ maven build
$ merlin target\*.jar -system %MAVEN_HOME% -execute
]]></source>
        <p>
         The log output demonstrates the deployment by Merlin of the blocks
         in the correct order (based on dependency resolution) and the 
         execution of the test application.
        </p>
        <source><![CDATA[
[INFO   ] (application.publisher.publisher): created
[INFO   ] (application.location.info): location: Paris
[INFO   ] (application.application): servicing application
[INFO   ] (application.location.info): location: Paris
[INFO   ] (application.publisher.publisher): created
[INFO   ] (application.publisher.publisher):
******************
* Paris
******************
[INFO   ] (application.application): done
]]></source>
      </subsection>
      <subsection name="Note">
        <p>
         The primary benefit of using block level services and dependencies
         is isolation of a block implementation from the public services it 
         provides.
        </p>
      </subsection>
    </section>
  </body>

</document>

