<?xml version="1.0"?>

<!-- 
 Copyright 2004 Apache Software Foundation
 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <header>
    <title>Blocks</title>
    <authors>
      <person name="Stephen McConnell" email="mcconnell@apache.org"/>
    </authors>
  </header>
  <body>

    <section name="Introducing Blocks">
      <subsection name="Overview">

      <p>
A block is a specialisation of an <a href="../appliance/index.html">Appliance</a>. 
A block manages a container (a type of component).  In addition, a block exposes 
services derived from the set of appliances that are managed by its container.  As 
such, a block can be view as a composite component.  A block may be contained 
within other blocks.
      </p>
      <p>
A container manages a set of components declared within the containment scope.  
As such, a container represents a logical and structural partition within a 
containment hierarchy.  Each container is associated with a classloader.  The 
classloader parent is the classloader of the parent container.  As such, a 
container (and component within the container) have access to the services 
defined within the immediate container and all parent containers. 
      </p>

      </subsection>
      <subsection name="Cascading Containers">

      <p>
The Merlin system provides support for <strong>cascading containers</strong>. 
This model enables component assemblers to (among other things) associate jar 
files under a protected block scope where each block is associated with its own 
classloader.  Each block manages a single container.  A container manages 
multiple components.
      </p>

      <p>
Merlin will handle resolution of service dependencies for components contained 
in containers by looking for explicitly declared components commencing within 
the local container, and working progressively up the container hierarchy.  If 
no explicit solutions are resolved, Merlin will attempt to build an implicit 
solution based on components declared in the respective container classpath.
      </p>

      </subsection>
      <subsection name="Block Model">

      <p>
A new block is defined by the &lt;container&gt; element. The element is the definition 
of a block, its classpath, and the components it is responsible for managing. 
Blocks are declared programmatically or via an XML description as shown below:
      </p>

      <p><em>Minimilist block definition:</em></p>
<source><![CDATA[
<container name="tutorial">

   <component name="hello" class="tutorial.HelloComponent" activation="startup"/>

</container>
]]></source>

      </subsection>

    </section>
  </body>

  <footer>
    <legal>
      Copyright (c) @year@ The Avalon Apache Project All rights reserved.
      $Revision: 1.2 $ $Date: 2004/01/25 13:28:47 $
    </legal>
  </footer>

</document>


