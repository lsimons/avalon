<?xml version="1.0"?>

<!-- 
 Copyright 2004 Apache Software Foundation
 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>

  <header>
    <title>Merlin Architecture</title>
    <authors>
      <person name="Stephen McConnell" email="mcconnell@apache.org"/>
    </authors>
  </header>

  <body>
    <section name="Appliance">
      <subsection name="Overview">
        <p>
An appliance is the internal handler of a component.  It is responsible for component deployment and decommissioning.  An appliance can be view as an instance of a unique named deployment scenario where a deployment scenario is the result of combining a particular component type with deployment meta-data (configuration, context directives, etc.).
        </p>
      </subsection>
      <subsection name="Components">
        <p>
A component is an instantiated java.lang.Object managed by an Appliance.  A component is characterised by deployment and runtime dependencies which are managed by an appliance in response to service requests. A component typically exposes services (public interfaces) through implementation or other means.  In addition a component may declare runtime dependencies on service provided by other components.  Wiring together provider and consumer components to fulfil deployment and runtime dependencies is referred to as component assembly.
        </p>
      </subsection>
    </section>
  </body>

</document>




