<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->

<document>

    <properties>
        <author email="mcconnell@apache.org">Stephen McConnell</author>
        <title>Merlin Service Management</title>
    </properties>

    <body>

        <section name="Merlin Service Management">

            <p>
                <strong>Welcome to Merlin.</strong>
            </p>

            <p>
                The Merlin project deals with the broad area of service
                and component management. The Merlin system is a container
                that provides comprehensive support for the management of
                complex component-based systems. Merlin uses a component
                meta-model to facilitate the automated assembly and
                deployment of components.
            </p>

            <p>
                <img src="images/cover.gif"/>
            </p>

            <subsection name="Service Management Platform (SMP)">
                <p>
                    Merlin is a service management platform based on an
                    advanced assembly engine. Its focus is to provide
                    support for the encapsulation of a set of components
                    and services within functional blocks. Blocks enable
                    the separation of components as an implementation
                    solution from services that are established by those
                    components.
                </p>

            </subsection>

            <subsection name="Assembly Framework">

                <p>
                    The assembly engine is responsible for the management
                    of the deployment of services provided by a component.
                </p>

                <p>
                    Components in the framework may have dependencies on
                    services provided by other components, which in turn
                    may have dependencies of their own.  In addition,
                    components can declare (as part of their meta-info)
                    particular lifecycle stages (such as initiation or
                    configuration) and the type of stage provider it needs
                    to handle that stage.  So in effect, components can be
                    deployed with classic runtime dependencies together
                    with deployment dependencies (because deployment stage
                    providers are themselves components that may have their
                    own deployment and runtime dependencies).
                </p>

                <p>
                    Assembly services include ordered deployment and
                    decommissioning, and a range of "lifestyle" handlers
                    (things like thread-safe, per-thread, singleton,
                    transient, or custom policies).  The package includes
                    facilities for: classloader management and cascading
                    repositories for types, templates, service definitions
                    and appliance instances (where an appliance is simply
                    an instantiation of a particular component deployment
                    scenario).
                </p>
            </subsection>

            <subsection name="Meta Model">
                <p>
                    The meta model used in Merlin defines the notion of a
                    component type.  A Type definition contains information
                    about deployment and runtime dependencies together with
                    general attributes about the type and services the
                    component type can provide. The Type and Service notions
                    are complimented by a Profile which can be viewed as a
                    template deployment scenario.  Type, Service and Profile
                    descriptions can be packaged in jars files and used as
                    the basic for automating component assembly and
                    deployment.
                </p>

            </subsection>

        </section>

    </body>

</document>


