<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->

<document>

  <properties>
    <title>Merlin JNDI</title>
    <author email="avalon-dev@jakarta.apache.org">Avalon Development Team</author>
  </properties>

  <body>

    <section name="Merlin JNDI Connection">

<p>
The Merlin JNDI package provides support for the establishment fo a Merlin Kernel via JNDI.
</p>

    <subsection name="Development Note">
<p>
This is an initial minimal JNDI connector implementation that enables the establishment of a Merlin Kernel via JNDI. This allows establishment and access to a Merlin kernel based on a set of properties containing the system and home path, the root block and internal kernel logging priority.
</p>

<p>
Using the JNDI context, a servlet can do something like the following:
</p>

<source>
   Context context = new InitialContext();
   Context env = (Context) context.lookup("java:comp/env");
   Kernel kernel = (Kernel) env.lookup("merlin/ServiceFactory");
   // then use the kernel to get the service that you want
</source>

<p>
The current implementation relies on the fact that the server.xml has the definition of the root block to be loaded.  Currently the connector is returning the kernel, however it should be possible to return a naming context from which services are access via JNDI lookups.  If the initial lookup returns a context then it should be possible to eliminate knowledge of the kernel - and keep things focussed on simply accessing services.  This also brings in the potential for including JNDI url resolution of services (i.e. service resolution with arguments) which seems to me a desirable direction.    
</p>

</subsection>

    </section>
  </body>

  <footer>
    <legal>
      Copyright (c) @year@ The Avalon Apache Project All rights reserved.
      $Revision: 1.1 $ $Date: 2003/09/24 09:34:17 $
    </legal>
  </footer>

</document>


