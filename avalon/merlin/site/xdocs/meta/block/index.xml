<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->

<document>

  <header>
    <title>Impementation Directive</title>
    <authors>
      <person name="Stephen McConnell" email="mcconnell@apache.org"/>
    </authors>
  </header>

  <body>

    <section name="Container Directive">

      <subsection name="Nested Elements">

        <table>
          <tr><th>Element</th><th>Occurance</th><th>Description</th></tr>
          <tr>
            <td><a href="services/index.html">services</a></td><td>0..n</td>
            <td>
             A container can declare the export of a set of services established
             by the components contained within it.  This enables a container to 
             function as a composite component relative to its peers.
            </td>
          </tr>
          <tr>
            <td><a href="classloader/index.html">classloader</a></td><td>0..1</td>
            <td>
             The classloader to assign to the container.
            </td>
          </tr>
          <tr>
            <td><a href="components/index.html">component</a></td><td>0..n</td>
            <td>
             A component directive is an instruction to merlin to build
             a component of the type specified, and deploy the component 
             in accordance with a stated policy.
            </td>
          </tr>
          <tr>
            <td><a href="index.html">container</a></td><td>0..n</td>
            <td>
             A container directive is simply a composite component.  A container
             establishes a partition within which a set of other components and 
             containers can be declared.
            </td>
          </tr>
          <tr>
            <td><a href="include/index.html">include</a></td><td>0..n</td>
            <td>
             An include directive instructs Merlin to include an external 
             block within the container.  Services exported by the block will 
             be made available to other components at the same level as the 
             included block.
            </td>
          </tr>
        </table>
      </subsection>

      <subsection name="Description">
        <p>
        A container holds a set of components, 
        sub-containers, and includes that make up the compostion
        of the block in terms of its internal functionality, exported
        through optional service directives.
        </p>
      </subsection>

      <subsection name="Sample XML">
        <p>
           The following XML is a sample of a implementation declaration
           containing an engine, components, subcontainers and block includes.
        </p>

<source><![CDATA[
 <!-- block implementation declaration -->
<container>
  
     <!-- 
     declaration of the classloader that this block 
     will execute within 
     -->

     <classloader>
       <classpath>
         <repository>
           <resource id="tutorial:composition-api" version="1.0"/>
         </repository>
       </classpath>
     </classloader>

     <!-- 
     declaration of a root component (services provided by this component
     will be avbailable to all other components at the same or lower levels
     in the container hierachy
     -->

     <component name="application" 
        class="tutorial.application.Application" activation="startup">
     </component>

     <!-- 
     declaration of a container contining other components
     -->

     <container name="subcontainer">
       
       <!--
       This component is only visible to other components at the same
       level or lower in this branch of the container hierachy
       -->

       <component name="test2" class="AnotherComponent"/>

       <!--
       A subcontainer declaring a custom container type.
       -->

       <container name="testing" class="MySpecialContainerClass">
         <!-- etc. -->
       </container>

     </container>

     <!--
     Declaration of a block to includes.  The inclusion of a block
     results in the establishment of a container with a name correponding
     to the name of the block.
     -->

     <include path="example-block.xml"/>
     <include id="osm:collaboration" version="1.0"/>

</container>

]]></source>
      </subsection>
    </section>

  </body>

</document>


