<?xml version="1.0"?>

<!-- 
 Copyright 2004 Apache Software Foundation
 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>

  <header>
    <title>Kernel</title>
    <authors>
      <person name="Stephen McConnell" email="mcconnell@apache.org"/>
    </authors>
  </header>

  <body>
    <section name="Features and Benefits">
      <subsection name="Composite Component Management">
        <p>
Merlin provides support for the packaging and deployment of composite components with a structure called a Block.  A block represents the association of resources to a containment hierarchy within which components are managed.  In addition, a block enables the separation of a component assembly as implementation from the subset of services published by the block.
        </p>
      </subsection>
      <subsection name="Automated Assembly">
        <p>
Underlying the Merlin system is a assembly engine that provides support for the deployment of components.  The assembly engine takes care of dependency resolution, component instantiation, lifecycle processing, and component decommissioning.
        </p>
      </subsection>
      <subsection name="Lifestyle Management">
        <p>
Merlin provides support for different component instantiation policies.  These policies are referred to as lifestyles. Examples of supported lifestyle include 'singleton', 'per-thread', 'pooled' and 'transient'.
        </p>
      </subsection>
      <subsection name="Lifecycle Management">
        <p>
Following instantiation, a component is processed through a lifecycle.  Lifecycle processing involves the execution of a series of stages such associating a logging channel, applying a configuration or component parameters, setting the runtime context, supplying dependent services, initialization, startup, shutdown and disposal.  Within the Merlin system, lifecycle stages can be extended or modified through association of other components that provide lifecycle support.  Merlin distinguishes these services as deployment dependencies as distinct from classic runtime dependencies.
        </p>
      </subsection>

    </section>
  </body>

</document>


