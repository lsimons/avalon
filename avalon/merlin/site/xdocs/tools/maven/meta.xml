<?xml version="1.0"?>

<!--
 ============================================================================
                   The Apache Software License, Version 1.1
 ============================================================================

 Copyright (C) 1999-2002 The Apache Software Foundation. All rights reserved.

 Redistribution and use in source and binary forms, with or without modifica-
 tion, are permitted provided that the following conditions are met:

 1. Redistributions of  source code must  retain the above copyright  notice,
    this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

 3. The end-user documentation included with the redistribution, if any, must
    include  the following  acknowledgment:  "This product includes  software
    developed  by the  Apache Software Foundation  (http://www.apache.org/)."
    Alternately, this  acknowledgment may  appear in the software itself,  if
    and wherever such third-party acknowledgments normally appear.

 4. The names "Jakarta", "Apache Avalon", "Avalon Framework" and
    "Apache Software Foundation"  must not be used to endorse or promote
    products derived  from this  software without  prior written
    permission. For written permission, please contact apache@apache.org.

 5. Products  derived from this software may not  be called "Apache", nor may
    "Apache" appear  in their name,  without prior written permission  of the
    Apache Software Foundation.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 This software  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more  information on the
 Apache Software Foundation, please see http://www.apache.org/.
-->

<document>
  <properties>
    <author email="mcconnell@apache.org">Stephen McConnell</author>
    <title>Merlin Plugin for Maven</title>
  </properties>
  <body>
    <section name="Merlin Plugin for Maven">
      <subsection name="Meta Generation">
      <p>
The Merlin Plugin for Maven provides support for developers in the management of Maven based projects that leverage the Avalon component model.  This plugin will be progressively extended with Merlin and related sub-system utilities.  Currently the plugin provides support for a meta info generation process based on javadoc tags within class and interface source files.
      </p>
      </subsection>
      <subsection name="Goals">
        <table>
          <tr><th>Goal</th><th>Description</th></tr>
          <tr>
            <td>merlin:meta</td>
            <td>
          <p>Generates meta info descriptors for service and component types
          based on javadoc tags within the java source files.  Source files
          are scanned for the presence of an @avalon.version tag and if 
          present, a meta descriptor is generated.  If the version tag is 
          within an interface defintion, a new Service defintion is created
          otherwise a Type defintion is created.</p>
          
          <p>Meta info generation process includes:</p>
          <ul>
            <li>Scan source files for avalon.meta tags</li>
            <li>Build Type and Service descriptors</li>
            <li>Externalize descriptors to serial or xml format</li>
          </ul>
          <p>Resulting meta info descriptors are placed int the ${basedir}/target/src directory.  Typical application scenario is to define a preGoal to handle meta-info generation under the maven.xml file and inclusion of the output meta info under the project.xml jar resources.</p>
<p><i>maven.xml example</i></p>
<source><![CDATA[
  <project default="jar:jar">
    <preGoal name="jar:jar">
      <attainGoal name="merlin:meta"/>
    </preGoal>
  </project>
]]></source>
<p><i>project.xml example</i></p>
<source><![CDATA[
  <project>
    <!-- other stuff -->
    <build>
      <!-- more stuff -->
      <resources>
        <!-- include the generated metainfo descriptors into you jar file -->
        <resource>
          <directory>${basedir}/target/src</directory> 
          <includes>
            <include>**/*.x*</include>
          </includes>
        </resource>
      </resources>
    </build>
  </project>
]]></source>
            </td>
          </tr>
        </table>
      </subsection>
      <subsection name="Properties">
      <table>
        <tr>
          <th>Property name</th>
          <th>Optional?</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>merlin.meta.format</td>
          <td>Yes</td>
          <td>
<p>Output format specification.  Valid values include 'xml' or 'serial'.
The xml value instructs the meta generator to create meta descriptions
in an XML format whereas the 'serial' value generates a serialized 
description of the descriptor.  Serial format is more efficient.  The 
XML format is more portable.</p>
<p>
Default behaviour:
</p>
<source><![CDATA[
merlin.meta.format="xml"
]]></source>
          </td>
        </tr>
        <tr>
          <td>merlin.meta.force</td>
          <td>Yes</td>
          <td>
<p>Policy controlling the regeneration of meta descriptors independently
of the descriptor data.  This value default to false. </p>
<p>
Default behaviour:
</p>
<source><![CDATA[
merlin.meta.force="false"
]]></source>
          </td>
        </tr>
        <tr>
          <td>merlin.meta.type.postfix</td>
          <td>No</td>
          <td>
<p>
Merlin will default to the deneration of XML type descriptors under
the .xinfo file type.  When generating meta-info descriptors targetted
for deployment in both Merlin and Phoenix, the xinfo type will conflict
with the Phoenix meta-info descriptor. Merlin provides support for 
generation of meta info under the alternative .xtype.  To control the 
type of file generated, you can declare either "xinfo" or "xtype" under
this property. 
</p>
<p>
Default behaviour:
</p>
<source><![CDATA[
merlin.meta.type.postfix="xinfo"
]]></source>
<p>
Alternative xtype behaviour:
</p>
<source><![CDATA[
merlin.meta.type.postfix="xtype"
]]></source>

          </td>
        </tr>
      </table>
      </subsection>
    </section>
  </body>
</document>


