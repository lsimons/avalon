// Copyright 2003-2004 The Apache Software Foundation
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.namespace Apache.Avalon.Framework{	using System;	using log4net;
	/// <summary>	/// The default log4net wrapper class for Logger.	/// </summary>	public class Log4netLogger: ILogger	{		/// <summary>
		/// underlying implementation
		/// </summary>		private ILog m_logger;		/// <summary>
		/// Category name
		/// </summary>		private string m_name;		/// <summary>		/// Creates a m_logger that delegates to specified category.		/// </summary>		/// <param name="logImpl">The ILog to delegate to.</param>		/// <param name="name">The current category name.</param>		public Log4netLogger(ILog logImpl, string name)		{			m_logger = logImpl;			m_name = name;		}		/// <summary>		/// Logs a debug message.		/// </summary>		/// <param name="message">The Message</param>		public void Debug(string message )		{			m_logger.Debug(message);		}		/// <summary>		/// Logs a debug message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		public void Debug(string message, Exception exception)		{			m_logger.Debug( message, exception );		}		/// <summary>		/// Logs a debug message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		public void Debug( string format, params Object[] args )		{			Debug(String.Format(format, args));		}		/// <summary>		/// Determines if messages of priority "debug" will be logged.		/// </summary>		/// <value>True if "debug" messages will be logged.</value> 		public bool IsDebugEnabled		{			get			{				return m_logger.IsDebugEnabled;			}		}		/// <summary>		/// Logs an info message.		/// </summary>		/// <param name="message">The Message</param>		public void Info( string message )		{			m_logger.Info(message);		}		/// <summary>		/// Logs an info message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		public void Info( string message, Exception exception)		{			m_logger.Info( message, exception);		}		/// <summary>		/// Logs an info message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		public void Info( string format, params Object[] args )		{			Info(String.Format(format, args));		}		/// <summary>		/// Determines if messages of priority "info" will be logged.		/// </summary>		/// <value>True if "info" messages will be logged.</value>		public bool IsInfoEnabled		{			get			{				return m_logger.IsInfoEnabled;			}		}
		/// <summary>		/// Logs a warn message.		/// </summary>		/// <param name="message">The Message</param>		public void Warn(string message )		{			m_logger.Warn( message );		}		/// <summary>		/// Logs a warn message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		public void Warn(string message, Exception exception)		{			m_logger.Warn( message, exception );		}		/// <summary>		/// Logs a warn message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		public void Warn( string format, params Object[] args )		{			Warn(String.Format(format, args));		}		/// <summary>		/// Determines if messages of priority "warn" will be logged.		/// </summary>		/// <value>True if "warn" messages will be logged.</value>		public bool IsWarnEnabled		{			get			{				return m_logger.IsWarnEnabled;			}		}		/// <summary>		/// Logs an error message.		/// </summary>		/// <param name="message">The Message</param>		public void Error(string message )		{			m_logger.Error( message );		}		/// <summary>		/// Logs an error message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		public void Error(string message, Exception exception)		{			m_logger.Error( message, exception );		}		/// <summary>		/// Logs an error message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		public void Error( string format, params Object[] args )		{			Error(String.Format(format, args));		}		/// <summary>		/// Determines if messages of priority "error" will be logged.		/// </summary>		/// <value>True if "error" messages will be logged.</value>		public bool IsErrorEnabled		{			get			{				return m_logger.IsErrorEnabled;			}		}		/// <summary>		/// Logs a fatal error message.		/// </summary>		/// <param name="message">The Message</param>		public void FatalError(string message )		{			m_logger.Fatal( message );		}		/// <summary>		/// Logs a fatal error message.		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		public void FatalError(string message, Exception exception)		{			m_logger.Fatal( message, exception);		}		/// <summary>		/// Logs a fatal error message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		public void FatalError( string format, params Object[] args )		{			FatalError(format, args);		}		/// <summary>		/// Determines if messages of priority "fatalError" will be logged.		/// </summary>		/// <value>True if "fatalError" messages will be logged.</value>		public bool IsFatalErrorEnabled		{			get 			{				return m_logger.IsFatalEnabled; 			}		}		/// <summary>		/// Create a new child logger.		/// The name of the child logger is [current-loggers-name].[passed-in-name]		/// </summary>		/// <param name="name">The Subname of this logger.</param>		/// <returns>The New ILogger instance.</returns> 		/// <exception cref="System.ArgumentException">If the name has an empty element name.</exception>		public ILogger CreateChildLogger(string name )		{			string newName = m_name + "." + name;			return new Log4netLogger( LogManager.GetLogger( newName ), newName );		}	}}