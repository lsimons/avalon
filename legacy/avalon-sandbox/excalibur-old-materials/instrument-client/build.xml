<?xml version="1.0"?>

<project name="Excalibur Instrument Client" default="main" basedir=".">

    <property file="${user.home}/build.properties"/>
    <property file="${basedir}/../ant.properties"/>
    <property file="${basedir}/ant.properties"/>
    <property file="${user.home}/.ant.properties"/>
    <property file="${basedir}/../libraries.properties"/>
    <property file="${basedir}/../default.properties"/>
    <property file="${basedir}/default.properties"/>

    <!-- Classpath for product -->
    <path id="project.class.path">
        <pathelement location="${build.classes}"/>
        <pathelement location="${avalon-framework-api.jar}"/>
        <pathelement location="${avalon-framework-impl.jar}"/>
        <pathelement location="${altrmi-common.jar}"/>
        <pathelement location="${altrmi-client-impl.jar}"/>
        <pathelement location="${altrmi-client-interfaces.jar}"/>
        <pathelement location="${altrmi-generator.jar}"/>
        <pathelement location="${excalibur-instrument-manager-interfaces.jar}"/>
        <pathelement path="${java.class.path}"/>
    </path>

    <path id="tools.class.path">
        <pathelement location="${junit.jar}"/>
    </path>

    <path id="test.class.path">
        <pathelement location="${build.testclasses}"/>
        <pathelement location="${junit.jar}"/>
        <path refid="project.class.path"/>
    </path>
    <property name="cp" refid="test.class.path"/>

    <target name="main" depends="jar" description="Build the project"/>
    <target name="rebuild" depends="clean,main" description="Rebuild the project"/>

    <target name="dependencies" description="Check dependencies" unless="skip.dependencies">
        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkCommon"/>
        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkFrameworkAPI"/>
        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkFrameworkImpl"/>
        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkInstrumentManagerInterfaces"/>
    </target>

    <target name="dependencies-test" depends="dist-jar, dependencies"
        description="Check unit test dependencies" unless="skip.dependencies">
        <!-- Need the jar to prevent recursive deps. -->

        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkJUnit"/>
    </target>


    <!-- Compiles the source code -->
    <target name="compile" depends="dependencies" description="Compiles the source code">

        <mkdir dir="${build.classes}"/>

        <!-- Compile all classes excluding the tests. -->
        <javac srcdir="${java.dir}"
            destdir="${build.classes}"
            debug="${build.debug}"
            optimize="${build.optimize}"
            deprecation="${build.deprecation}"
            target="1.2">
            <classpath refid="project.class.path" />
            <include name="**/*.java"/>
        </javac>

        <!-- copy resources to same location as .class files -->
        <copy todir="${build.classes}">
            <fileset dir="${java.dir}">
                <exclude name="**/*.java"/>
                <exclude name="**/package.html"/>
            </fileset>
        </copy>

    </target>

    <!-- Compiles the unit test source code -->
    <target name="compile-test" depends="compile, dependencies-test" description="Compiles the source code">
        <mkdir dir="${build.testsrc}"/>

        <!-- In case tests do not exist, create the directory -->
        <mkdir dir="${test.dir}"/>

        <!-- Copy over all of the tests applying test filters -->
        <copy todir="${build.testsrc}">
            <fileset dir="${test.dir}"/>
        </copy>

        <mkdir dir="${build.testclasses}"/>

        <!-- Compile all test classes. -->
        <javac srcdir="${build.testsrc}"
            destdir="${build.testclasses}"
            debug="${build.debug}"
            optimize="${build.optimize}"
            deprecation="${build.deprecation}"
            target="1.2">
            <classpath refid="test.class.path" />
            <include name="**/*.java"/>
        </javac>

        <copy todir="${build.testclasses}">
            <fileset dir="${test.dir}">
                <exclude name="**/*.java"/>
                <exclude name="**/package.html"/>
            </fileset>
        </copy>

    </target>

    <!-- Copies and filters the license. Used by jar and dist -->
    <target name="prepare-conf">
        <mkdir dir="${build.conf}"/>
        <copy todir="${build.conf}" flatten="true">
            <fileset dir="../" includes="LICENSE.txt"/>
            <filterset>
                <filter token="year" value="${year}"/>
            </filterset>
        </copy>
    </target>

    <!-- Generates the AltRMI proxies used by the client. -->
    <target name="altrmiproxies" depends="compile">
        <ant antfile="altrmiproxies.xml" target="altrmiproxies"/>
    </target>

    <!-- Creates all the .jar file -->
    <target name="jar" depends="compile, prepare-conf, altrmiproxies" description="Generates the jar files">

        <mkdir dir="${build.lib}"/>

        <jar jarfile="${build.lib}/${jar.name}"
            basedir="${build.classes}"
            compress="${build.compress}">
            <manifest>
                <attribute name="Extension-Name" value="${name}"/>
                <attribute name="Specification-Vendor" value="Apache Software Foundation"/>
                <attribute name="Specification-Version" value="1.0"/>
                <attribute name="Implementation-Vendor" value="Apache Software Foundation"/>
                <attribute name="Implementation-Vendor-Id" value="ASF"/>
                <attribute name="Implementation-Version" value="${package-version}"/>
            </manifest>
            <exclude name="**/test/**"/>
            <zipfileset dir="${build.conf}" prefix="META-INF/">
                <include name="LICENSE.txt"/>
            </zipfileset>
        </jar>
    </target>

    <!-- Creates all the Javadocs -->
    <target name="javadocs" depends="compile" description="Generates the javadocs" unless="skip.javadocs">

        <mkdir dir="${dist.javadocs}"/>
        <javadoc packagenames="org.apache.*"
            sourcepath="${java.dir}"
            destdir="${dist.javadocs}">
            <classpath refid="project.class.path" />
            <doclet name="com.sun.tools.doclets.standard.Standard">
                <param name="-author"/>
                <param name="-version"/>
                <param name="-doctitle" value="${Name}"/>
                <param name="-windowtitle" value="${Name} API"/>
                <param name="-link" value="http://java.sun.com/j2se/1.4/docs/api/"/>
                <param name="-link" value="http://java.sun.com/j2ee/sdk_1.3/techdocs/api/"/>
                <param name="-link" value="http://avalon.apache.org/api/"/>
                <param name="-bottom"
                    value="&quot;Copyright &#169; ${year} Apache Avalon Project. All Rights Reserved.&quot;"/>
                <param name="-tag" value="avalon.component:t:Avalon Component:"/>
                <param name="-tag" value="avalon.service:t:Avalon Service:"/>
                <param name="-tag" value="x-avalon.info:t:Avalon Component Information:"/>
                <param name="-tag" value="x-avalon.lifestyle:t:Avalon Component Lifestyle:"/>
                <param name="-tag" value="avalon.dependency:m:Avalon Component Dependency:"/>
            </doclet>
        </javadoc>
    </target>

    <target name="test" depends="compile-test" description="Perform the unit tests" unless="skip.tests">

        <echo message="Performing Unit Tests" />

        <mkdir dir="${build.tests}"/>

        <junit fork="true"
            haltonfailure="${junit.failonerror}"
            printsummary="yes"
            dir="${build.tests}">
            <classpath refid="test.class.path"/>

            <formatter type="xml"/>    <!-- xml reports for junitreport -->
            <formatter type="plain" usefile="false"/>  <!-- text reports for humans     -->

            <batchtest todir="${build.tests}">
                <fileset dir="${build.testclasses}">
                    <include name="**/test/*TestCase.class"/>
                    <exclude name="**/Abstract*"/>
                </fileset>
            </batchtest>
        </junit>

    </target>

    <target name="test-reports" depends="test" description="Generate Reports for the unit tests">

        <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkBSF"/>

        <mkdir dir="${build.reports}/junit"/>

        <junitreport todir="${build.reports}/junit">
            <fileset dir="${build.tests}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.reports}/junit"/>
        </junitreport>

        <!-- Clean up the xml reports used by the junitreport task -->
        <!--
        <delete>
            <fileset dir="${build.tests}" includes="TEST-*.xml"/>
            <fileset dir="${build.tests}" includes="TESTS-*.xml"/>
        </delete>
        -->

    </target>

    <!-- Creates the distribution -->
    <target name="dist"
        depends="dist-jar, test-reports"
        description="Generates a distribution (jar + javadocs + unit tests)">

        <copy file="${build.conf}/LICENSE.txt" todir="${dist.dir}"/>

        <zip zipfile="${dist.dir}/src.zip" compress="false">
            <zipfileset dir="src/java"/>
        </zip>

        <mkdir dir="${dist.base}"/>

        <zip zipfile="${dist.base}/${dist.name}.zip" compress="true">
            <zipfileset dir="${dist.dir}" prefix="${dist.name}"/>
        </zip>
    </target>

    <!-- Creates a mini jar-only distribution -->
    <target name="dist-jar" depends="jar">
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.bin.dir}"/>
        <mkdir dir="${dist.conf.dir}"/>
        <mkdir dir="${dist.lib.dir}"/>

        <!-- Copy over the bin and conf files -->
        <copy todir="${dist.bin.dir}">
            <fileset dir="${bin.dir}">
                <include name="*"/>
            </fileset>
        </copy>
        <copy todir="${dist.conf.dir}">
            <fileset dir="${conf.dir}">
                <include name="*"/>
            </fileset>
        </copy>

        <!-- Collect the jars required to run the client -->
        <copy todir="${dist.lib.dir}">
            <fileset dir="${build.lib}">
                <include name="*.jar"/>
            </fileset>
        </copy>

        <!-- Xerces -->
        <copy file="${xerces.jar}" todir="${dist.lib.dir}" preservelastmodified="yes"/>

        <!-- XML-APIs -->
        <copy file="${xml-apis.jar}" todir="${dist.lib.dir}" preservelastmodified="yes"/>

        <!-- Xalan -->
        <copy file="${xalan.jar}" todir="${dist.lib.dir}" preservelastmodified="yes"/>

        <!-- Avalong Framework Jar -->
        <copy file="${avalon-framework-api.jar}" todir="${dist.lib.dir}" preservelastmodified="yes"/>
        <copy file="${avalon-framework-impl.jar}" todir="${dist.lib.dir}" preservelastmodified="yes"/>

        <!-- Instrument Manager Jars -->
        <copy file="${excalibur-instrument-manager-interfaces.jar}" todir="${dist.lib.dir}" preservelastmodified="yes"/>

        <!-- AltRMI Jars -->
        <copy file="${altrmi-client-impl.jar}" todir="${dist.lib.dir}" preservelastmodified="yes"/>
        <copy file="${altrmi-client-interfaces.jar}" todir="${dist.lib.dir}" preservelastmodified="yes"/>
        <copy file="${altrmi-common.jar}" todir="${dist.lib.dir}" preservelastmodified="yes"/>
    </target>

    <!-- Creates a minimal distribution -->
    <target name="dist.lite"
        depends="dist-jar, test, javadocs"
        description="Generates a minimal distribution (jar + javadocs)">

        <copy file="../LICENSE.txt" todir="${dist.dir}"/>

    </target>

    <!-- Cleans up build and distribution directories -->
    <target name="clean" description="Cleans up the project">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
        <delete dir="${docs.dir}" />
        <delete dir="test" /> <!-- unit testing output directory -->
        <delete>
            <fileset dir="." includes="velocity.*"/>
            <fileset dir="." includes="**/*~" defaultexcludes="no"/>
        </delete>
    </target>

    <target name="real-clean" depends="clean" description="Cleans up the project, including distributions">
        <delete dir="${dist.base}" />
    </target>

</project>
