/* * Generated file - Do not edit! */package my.avalon.jmx.tools;import mx4j.MBeanDescriptionAdapter;import java.lang.reflect.Method;import java.lang.reflect.Constructor;/** * MBean description. * @xdoclet-genereted @ 20030629 0907
 */public class SystemInfoMBeanDescription extends                         MBeanDescriptionAdapter    {      public String getConstructorDescription(Constructor ctor) {        String name = ctor.getName();             return super.getConstructorDescription(ctor);    }    public String getConstructorParameterName(Constructor ctor, int index) {              return super.getConstructorParameterName(ctor, index);    }    public String getConstructorParameterDescription(Constructor ctor, int index) {              return super.getConstructorParameterDescription(ctor, index);    }    public String getAttributeDescription(String attribute) {                                                if (attribute.equals("FreeMemory")) {            return "Returns the amount of free memory in the system. see Runtime.freeMemory()";        }                                       if (attribute.equals("TotalMemory")) {            return "Returns the total amount of memory in the Java Virtual Machine. see Runtime.totalMemory()";        }                                       if (attribute.equals("RatioMemory")) {            return "Returns the ratio (%) free/total amount of memory in the Java Virtual Machine.";        }                                                                                                                      if (attribute.equals("NumberOfActiveThreads")) {            return "Returns an estimate of the number of active threads.";        }                          return super.getAttributeDescription(attribute);    }    public String getOperationDescription(Method operation) {        String name = operation.getName();                                                                                      if (name.equals("gc")) {            return "Runs the garbage collector. see Runtime.gc()";        }                            if (name.equals("exit")) {            return "Terminates the currently running Java virtual machine by initiating its shutdown sequence. see Runtime.exit(int)";        }                            if (name.equals("traceInstructions")) {            return "Enables/Disables tracing of instructions. see Runtime.traceInstructions(boolean)";        }                            if (name.equals("traceMethodCalls")) {            return "Enables/Disables tracing of method calls. see Runtime.traceMethodCalls(boolean)";        }                            if (name.equals("showProperties")) {            return "Determines the current system properties. see System.getProperties()";        }                                               return super.getOperationDescription(operation);    }    public String getOperationParameterName(Method method, int index) {        String name = method.getName();                                                                                                                                                                          return super.getOperationParameterName(method, index);    }    public String getOperationParameterDescription(Method method, int index) {        String name = method.getName();                                                                                                                                                                          return super.getOperationParameterDescription(method, index);    }}