<project default="jar:jar" xmlns:maven="jelly:maven" xmlns:j="jelly:core" xmlns:util="jelly:util">

  <property file="${basedir}/../build.properties"/>
  <property file="${basedir}/../project.properties"/>
  <property file="project.properties"/>
  <property name="merlin.build.inst" value="inst"/>
  <property name="merlin.build.inst.dir" value="${maven.build.dir}/${merlin.build.inst}"/>
  <property name="maven.jar.manifest.extensions.add" value="true"/>

  <property name="maven.checkstyle.format" value="avalon"/>
  <!--<property name="maven.jar.manifest" value="${basedir}/src/etc/project.mf"/>-->
  <property name="pom.organization.identifier" value="ASF"/>
  <property name="pom.specificationVersion" value="1.0"/>

  <goal name="merlin-dist" 
    description="Build the Merlin distribution." >

    <mkdir dir="${merlin.build.inst.dir}"/>
    <mkdir dir="${merlin.build.inst.dir}/ext"/>
    <mkdir dir="${merlin.build.inst.dir}/lib/system"/>
    <mkdir dir="${merlin.build.inst.dir}/lib/shared"/>
    <copy toDir="${merlin.build.inst.dir}/lib">
      <fileset dir="${basedir}/merlin-platform/lib"/>
    </copy>

    <!--
    Install the sub-project jars (meta, assembly, merlin, etc.)
    into the user's local repository and put a copy in the 
    build target install directory.
    -->

    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      excludes="merlin-platform/*,merlin-plugin/*"
      goals="merlin-propergate"
      banner="Installing:"
      ignoreFailures="false" />

    <!--
    Import the dependent jar files referenced by the SMP 
    subproject into the install directory.
    -->

    <maven:reactor
      basedir="${basedir}"
      includes="merlin-platform/project.xml"
      goals="merlin-import-external-jars"
      banner="Resolving dependencies:"
      ignoreFailures="false"/>

    <!--
    Move spi and framework jar files into the shared library.
    -->

    <move toDir="${merlin.build.inst.dir}/lib/shared">
      <fileset dir="${merlin.build.inst.dir}/lib/system">
        <include name="avalon-framework-*.jar"/>
        <include name="*-spi-*.jar"/>
      </fileset>
    </move>

    <!--
    Add the supporting resources.
    -->

    <copy toDir="${merlin.build.inst.dir}">
      <fileset dir="${basedir}/merlin-platform/src">
        <include name="bin/**/*"/>
        <include name="config/**/*"/>
        <include name="repository/**/*"/>
      </fileset>
      <fileset dir="${basedir}/merlin-platform/src/etc">
        <include name="LICENSE.txt"/>
      </fileset>
    </copy>

    <!--
    TODO - build the demonstrations to include the the repository
    directory (which is also linked to completing the documentation 
    on getting started and the finalization of the block service access
    and the finalization of repository semantics).
    -->

  </goal>

  <goal name="testing">
    <copy toDir="${merlin.build.inst.dir}" flatten="true">
      <fileset dir="${basedir}/merlin-platform/src/etc">
        <include name="LICENSE.txt"/>
      </fileset>
    </copy>
  </goal>

  <!--
  The following project is called against a subproject.  It results in 
  the build of the subproject, install of the jar in the user's local 
  repository, and copies the jar file into the merlin installation 
  directory.
  -->
  <goal name="merlin-propergate" prereqs="jar:install">
    <copy todir="${basedir}/../target/${merlin.build.inst}/lib/system">
      <fileset dir="${maven.build.dir}">
        <include name="${maven.final.name}.jar"/>
      </fileset>
    </copy>
  </goal>

  <!--
  Import the jar files declared as dependecies of the smp project.  This
  includes all of the external jar files needed to run merlin.  Dependent 
  jar files are copied from the user's local repository to the merlin 
  install system library.
  -->
  <goal name="merlin-import-external-jars">
    <j:forEach var="dep" items="${pom.dependencies}">
      <copy 
        todir="${basedir}/../target/${merlin.build.inst}/lib/system"
        file="${maven.repo.local}/${dep.artifactDirectory}/jars/${dep.artifact}"/>
    </j:forEach>
  </goal>

  <!--
  The site goal is called by the merlin-install goal and handles the generation
  of the documetation for the entire Merlin project including the related sub-
  projects.
  -->
  <goal name="merlin-site"
    description="Build the Merlin site.">
    <maven:reactor
      basedir="${basedir}"
      includes="merlin-platform/project.xml"
      goals="xjavadoc,site"
      banner="Building site."
      ignoreFailures="false"/>
  </goal>

  <!-- convinience docs generation within runing javadoc -->
  <goal name="merlin-site-xdocs"
    description="Build the Merlin site.">
    <maven:reactor
      basedir="${basedir}"
      includes="merlin-platform/project.xml"
      goals="site"
      banner="Building site."
      ignoreFailures="false"/>
  </goal>

  <!-- convinience javadoc generation within runing xdocs -->
  <goal name="merlin-site-javadoc"
    description="Build the Merlin site.">
    <maven:reactor
      basedir="${basedir}"
      includes="merlin-platform/project.xml"
      goals="xjavadoc"
      banner="Building site."
      ignoreFailures="false"/>
  </goal>


  <!--
  The site goal is called by the merlin-install goal and handles the generation
  of the documetation for the entire Merlin project including the related sub-
  projects.
  -->
  <goal name="merlin-site-deploy"
    description="Deploy the Merlin site.">

    <maven:reactor
      basedir="${basedir}"
      includes="merlin-platform/project.xml"
      goals="site:fsdeploy"
      banner="Deploying site."
      ignoreFailures="false"/>

  </goal>

  <!--
  The update goal generates the merlin site and deploys it to local site repository.
  -->
  <goal name="merlin-update">
    <attainGoal name="merlin-site"/>
    <attainGoal name="merlin-site-deploy"/>
  </goal>

  <!--
  Copy the distribution into the local merlin installation.  This target
  is very preliminary and presumes that you have a MERLIN_HOME environment 
  variable already defined.  No checking or validation is currently in 
  place.  It is useful if you want to update an existing installation.
  -->
  <goal name="merlin-install" prereqs="merlin-install-plugin,merlin-dist">
    <property environment="env"/>
    <mkdir dir="${env.MERLIN_HOME}"/>
    <echo>Installing Merlin into home directory: ${env.MERLIN_HOME}</echo>
    <copy toDir="${env.MERLIN_HOME}">
      <fileset dir="${merlin.build.inst.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </goal>

  <!--
  Utility goal to update the lib directories in the Merlin installation
  without disrupting current executing NT services.  I.e. just update
  the jar files in the lib subdirectories.
  -->
  <goal name="merlin-libs" prereqs="merlin-install-plugin,merlin-dist">
    <property environment="env"/>
    <mkdir dir="${env.MERLIN_HOME}/lib/shared"/>
    <echo>Updating Merlin libraries: ${env.MERLIN_HOME}</echo>
    <copy toDir="${env.MERLIN_HOME}/lib/shared">
      <fileset dir="${merlin.build.inst.dir}/lib/shared">
        <include name="**/*"/>
      </fileset>
    </copy>
    <mkdir dir="${env.MERLIN_HOME}/lib/system"/>
    <copy toDir="${env.MERLIN_HOME}/lib/system">
      <fileset dir="${merlin.build.inst.dir}/lib/system">
        <include name="**/*"/>
      </fileset>
    </copy>
  </goal>

  <goal name="xjavadoc">
    <mkdir dir="${basedir}/target/docs/api" />
    <property name="copyright"
      value="Copyright &amp;copy; ${year} ${pom.organization.name}. All Rights Reserved." />
    <property name="title" value="${pom.name} ${pom.currentVersion} API"/>
    <javadoc destdir="${basedir}/target/docs/api" 
	doctitle="&lt;h1&gt;Merlin Service Management API&lt;/h1&gt;" 
      noindex="false" author="true" use="true"
	windowtitle="${title}" 
      bottom="${copyright}"
      additionalparam="-breakiterator -J-Xmx128m -tag todo:a:ToDo: "
      packagenames="*,org.*">
        <j:forEach var="packageGroup" items="${pom.packageGroups}">
      	  <group title="${packageGroup.title}" packages="${packageGroup.packages}"/>
        </j:forEach>
        <sourcepath path="${basedir}/../meta-spi/src/java"/>
        <sourcepath path="${basedir}/../meta/src/java"/>
        <sourcepath path="${basedir}/../assembly-spi/src/java"/>
        <sourcepath path="${basedir}/../assembly/src/java"/>
        <sourcepath path="${basedir}/../merlin-spi/src/java"/>
        <sourcepath path="${basedir}/../merlin-core/src/java"/>
        <classpath>
          <path refid="maven.dependency.classpath"/>
	  </classpath>
	  <link href="${sun.j2se.link}" />
	  <link href="${avalon.framework.link}" />
	  <link href="${avalon.logkit.link}" />
	  <link href="${avalon.lifecycle.link}" />
	  <link href="${excalibur.configuration.link}" />
	  <link href="${excalibur.pool.link}" />
	  <link href="${excalibur.thread.link}" />
	  <link href="${excalibur.event.link}" />
    </javadoc>
  </goal>


  <!--
  Install the merlin plugin into the Maven plugin suite.
  -->
  <goal name="merlin-install-plugin" prereqs="merlin-dist" 
      description="Install Merlin Maven plugin.">
    <attainGoal name="merlinx-install-plugin"/>
  </goal>

  <goal name="merlinx-install-plugin">
    <maven:reactor
      basedir="${basedir}"
      includes="merlin-plugin/project.xml"
      goals="plugin:install"
      banner="Installing plugin:"
      ignoreFailures="false"/>
  </goal>


  <!--
  ==============================================================================
  utilities
  ==============================================================================
  -->

  <goal name="merlin-clean" prereqs="clean">
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      goals="clean"
      banner="Cleaning subproject:"
      ignoreFailures="false"/>
  </goal>

  <goal name="merlin-jar" >
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      excludes="merlin-platform/*"
      goals="jar"
      banner="Building jar:"
      ignoreFailures="false"/>
  </goal>

  <goal name="merlin-snapshot" >
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      excludes="merlin-platform/*"
      goals="jar:snapshot"
      banner="Building shapshot:"
      ignoreFailures="false"/>
  </goal>

  <goal name="merlin-install-snapshot" >
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      excludes="merlin-platform/*"
      goals="jar:install-snapshot"
      banner="Installing snapshot:"
      ignoreFailures="false"/>
  </goal>

  <goal name="merlin-jar-install" >
    <maven:reactor
      basedir="${basedir}"
      includes="*/project.xml"
      excludes="merlin-platform/*"
      goals="clean,jar:install"
      banner="Installing jar:"
      ignoreFailures="false"/>
  </goal>

</project>
