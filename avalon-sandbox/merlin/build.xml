<?xml version="1.0"?>

<!--  
Copyright (C) The Apache Software Foundation. All rights reserved.
This software is published under the terms of the Apache Software License
version 1.1, a copy of which has been included with this distribution in
the LICENSE.txt file.

@author  Avalon Development Team
@version 1.0 12/03/2001
-->

<project name="merlin" default="install" basedir=".">

  <property file="${basedir}/../ant.properties"/>
  <property file="${basedir}/ant.properties"/>
  <property file="${user.home}/.ant.properties"/>
  <property file="${basedir}/../default.properties"/>
  <property file="${basedir}/default.properties"/>

  <!-- Classpath for product -->
  <path id="project.class.path">
    <pathelement location="${avalon-logkit.jar}"/>
    <pathelement location="${commons-collections.jar}"/>
    <pathelement location="${avalon-framework.jar}"/>
    <pathelement location="${excalibur-i18n.jar}"/>
    <pathelement location="${excalibur-extension.jar}"/>
    <pathelement location="${excalibur-util-concurrent.jar}"/>
    <pathelement location="${excalibur-configuration.jar}"/>
    <pathelement location="${excalibur-collections.jar}"/>
    <pathelement location="${excalibur-pool.jar}"/>
    <pathelement location="${excalibur-thread.jar}"/>
    <pathelement location="${excalibur-threadcontext.jar}"/>
    <pathelement location="${excalibur-event.jar}"/>
    <pathelement location="${avalon-assembly-spi.jar}"/>
    <pathelement location="${avalon-assembly.jar}"/>
    <pathelement location="${avalon-meta.jar}"/>
    <pathelement location="${avalon-lifecycle.jar}"/>
    <pathelement location="${merlin-spi.jar}"/>
    <pathelement location="${merlin-bootstrap.jar}"/>
    <pathelement location="${build.classes}"/>
    <pathelement location="${checkstyle.jar}"/>
    <pathelement path="${java.class.path}"/>
  </path>

  <path id="test.class.path">
    <path refid="project.class.path"/>
    <pathelement location="${build.dir}/lib/${jar.name}"/>
    <pathelement location="${build.testclasses}"/>
  </path>

  <path id="runtime.class.path">
    <pathelement location="${build.dir}/lib/${jar.name}"/>
    <pathelement location="${build.testclasses}"/>
  </path>

  <target name="main" depends="jar,jar-playground" description="Build the project"/>
  <target name="rebuild" depends="clean,main" description="Rebuild the project"/>
  <target name="all" depends="rebuild,docs" description="Rebuild the project"/>

  <target name="assembly-context">
    <uptodate property="assembly-uptodate" targetfile="${avalon-assembly.jar}">
      <srcfiles dir="${avalon-assembly.home}/src">
        <include name="**/*.*"/>
      </srcfiles>
    </uptodate>
  </target>

  <target name="assembly" depends="assembly-context" 
      description="Assembly dependency" unless="assembly-uptodate">
    <ant dir="../assembly" inheritAll="false"/>
  </target>

  <target name="bootstrap-context">
    <uptodate property="bootstrap-uptodate" targetfile="${merlin-bootstrap.jar}">
      <srcfiles dir="../merlin-bootstrap/src">
        <include name="**/*.*"/>
      </srcfiles>
    </uptodate>
  </target>

  <target name="spi-context">
    <uptodate property="spi-uptodate" targetfile="${merlin-spi.jar}">
      <srcfiles dir="../merlin-spi/src">
        <include name="**/*.*"/>
      </srcfiles>
    </uptodate>
  </target>

  <target name="bootstrap" depends="bootstrap-context" 
      description="Bootstrap dependency" unless="bootstrap-uptodate">
    <ant dir="../merlin-bootstrap" inheritAll="false"/>
  </target>

  <target name="flags">
        <available property="framework.present"
               classname="${avalon-framework.key}"
               classpathref="project.class.path" />
        <available property="configuration.present"
               classname="${excalibur-configuration.key}"
               classpathref="project.class.path" />
        <available property="i18n.present"
               classname="${excalibur-i18n.key}"
               classpathref="project.class.path" />
        <available property="extension.present"
               classname="${excalibur-extension.key}"
               classpathref="project.class.path" />
        <available property="excalibur-collections.present"
               classname="${excalibur-collections.key}"
               classpathref="project.class.path" />
        <available property="event.present"
               classname="${excalibur-event.key}"
               classpathref="project.class.path" />
        <available property="concurrent.present"
               classname="${excalibur-util-concurrent.key}"
               classpathref="project.class.path" />
        <available property="collections.present"
               classname="${commons-collections.key}"
               classpathref="project.class.path" />
        <available property="logkit.present"
               classname="${avalon-logkit.key}"
               classpathref="project.class.path" />
        <available property="thread.present"
               classname="${excalibur-thread.key}"
               classpathref="project.class.path" />
        <available property="threadcontext.present"
               classname="${excalibur-threadcontext.key}"
               classpathref="project.class.path" />
        <available property="pool.present"
               classname="${excalibur-pool.key}"
               classpathref="project.class.path" />
        <available property="lifecycle.present"
               classname="${avalon-lifecycle.key}"
               classpathref="project.class.path" />
        <available property="meta.present"
               classname="${avalon-meta.key}"
               classpathref="project.class.path" />
        <available property="assembly.present"
               classname="${avalon-assembly.key}"
               classpathref="project.class.path" />
        <available property="bootstrap.present"
               classname="${merlin-bootstrap.key}"
               classpathref="project.class.path" />
        <available property="spi.present"
               classname="${merlin-spi.key}"
               classpathref="project.class.path" />
  </target>

  <target name="dependencies" depends="external-dependencies,assembly,bootstrap" description="Check dependencies"/>

  <target name="external-dependencies" depends="check-framework,check-i18n,check-configuration,check-extension,check-event,check-excalibur-util-concurrent,check-commons-collections,check-excalibur-collections,check-avalon-logkit,check-thread,check-thread-context,check-pool,check-lifecycle,check-meta,check-assembly,check-bootstrap,check-spi"/>

  <target name="check-framework" depends="flags" unless="framework.present">
      <mkdir dir="${local.repository}"/>
	<get src="${remote.repository}/${avalon-framework.id}/jars/${avalon-framework.name}"
		dest="${local.repository}/${avalon-framework.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-configuration" depends="flags" unless="configuration.present">
      <mkdir dir="${local.repository}"/>
	<get src="${remote.repository}/${excalibur-configuration.id}/jars/${excalibur-configuration.name}"
		dest="${local.repository}/${excalibur-configuration.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-i18n" depends="flags" unless="i18n.present">
      <mkdir dir="${local.repository}"/>
	<get src="${remote.repository}/${excalibur-i18n.id}/jars/${excalibur-i18n.name}"
		dest="${local.repository}/${excalibur-i18n.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-extension" depends="flags" unless="extension.present">
      <mkdir dir="${local.repository}"/>
	<get src="${remote.repository}/${excalibur-extension.id}/jars/${excalibur-extension.name}"
		dest="${local.repository}/${excalibur-extension.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-event" depends="flags" unless="event.present">
      <mkdir dir="${local.repository}"/>
	<get src="${remote.repository}/${excalibur-event.id}/jars/${excalibur-event.name}"
		dest="${local.repository}/${excalibur-event.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-excalibur-collections" depends="flags" unless="excalibur-collections.present">
      <mkdir dir="${local.repository}"/>
	<get src="${remote.repository}/${excalibur-collections.id}/jars/${excalibur-collections.name}"
		dest="${local.repository}/${excalibur-collections.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-excalibur-util-concurrent" depends="flags" unless="concurrent.present">
      <mkdir dir="${local.repository}"/>
	<get src="${remote.repository}/${excalibur-util-concurrent.id}/jars/${excalibur-util-concurrent.name}"
		dest="${local.repository}/${excalibur-util-concurrent.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-commons-collections" depends="flags" unless="collections.present">
      <mkdir dir="${local.repository}"/>
	<get src="${remote.repository}/${commons-collections.id}/jars/${commons-collections.name}"
		dest="${local.repository}/${commons-collections.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-avalon-logkit" depends="flags" unless="logkit.present">
      <mkdir dir="${local.repository}"/>
	<get src="${remote.repository}/${avalon-logkit.id}/jars/${avalon-logkit.name}"
		dest="${local.repository}/${avalon-logkit.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-thread" depends="flags" unless="thread.present">
      <mkdir dir="${local.repository}"/>
	<get src="${remote.repository}/${excalibur-thread.id}/jars/${excalibur-thread.name}"
		dest="${local.repository}/${excalibur-thread.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-thread-context" depends="flags" unless="threadcontext.present">
      <mkdir dir="${local.repository}"/>
	<get src="${remote.repository}/${excalibur-threadcontext.id}/jars/${excalibur-threadcontext.name}"
		dest="${local.repository}/${excalibur-threadcontext.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-pool" depends="flags" unless="pool.present">
      <mkdir dir="${local.repository}"/>
	<get src="${remote.repository}/${excalibur-pool.id}/jars/${excalibur-pool.name}"
		dest="${local.repository}/${excalibur-pool.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-lifecycle" depends="flags" unless="lifecycle.present">
      <mkdir dir="${local.repository}"/>
	<get src="${remote.repository}/${avalon-lifecycle.id}/jars/${avalon-lifecycle.name}"
		dest="${local.repository}/${avalon-lifecycle.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-meta" depends="flags" unless="meta.present">
      <mkdir dir="${local.repository}"/>
	<get src="${remote.repository}/${avalon-meta.id}/jars/${avalon-meta.name}"
		dest="${local.repository}/${avalon-meta.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-assembly" depends="flags" unless="meta.present">
      <mkdir dir="${local.repository}"/>
	<get src="${remote.repository}/${avalon-assembly.id}/jars/${avalon-assembly.name}"
		dest="${local.repository}/${avalon-assembly.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-bootstrap" depends="flags" unless="bootstrap.present">
      <mkdir dir="${local.repository}"/>
	<get src="${merlin-bootstrap.path}"
		dest="${local.repository}/${merlin-bootstrap.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="check-spi" depends="flags" unless="spi.present">
      <mkdir dir="${local.repository}"/>
	<get src="${merlin-spi.path}"
		dest="${local.repository}/${merlin-spi.name}"
		verbose="true"
		usetimestamp="true"/>
  </target>

  <target name="context" depends="dependencies">
    <uptodate property="uptodate" targetfile="${build.lib}/${jar.name}">
      <srcfiles dir="${src.dir}">
        <include name="**/*.*"/>
      </srcfiles>
    </uptodate>
  </target>

  <!-- Compiles the source code -->
  <target name="compile" depends="context" 
       description="Compiles the source code" unless="uptodate">
    
    <echo message="compiling ${ant.project.name}"/>
    <mkdir dir="${build.classes}"/>

    <!-- Compile all classes -->

    <javac srcdir="${java.dir}"
       destdir="${build.classes}"
       debug="${build.debug}"
       optimize="${build.optimize}"
       deprecation="${build.deprecation}"
       target="1.2">
      <src path="${java.dir}" />
      <classpath refid="project.class.path" />
      <exclude name="Merlin.java"/>
      <exclude name="BootstrapRuntimeException.java"/>
      <exclude name="Resources.properties"/>
      <exclude name="**/playground/**/*.java"/>
      <include name="**/*.java"/>
    </javac>

    <!-- copy resources to same location as .class files -->
    <copy todir="${build.classes}">
      <fileset dir="${java.dir}">
        <exclude name="**/*.java"/>
        <exclude name="**/package.html"/>
        <exclude name="**/playground/**/*.*"/>
      </fileset>
    </copy>

  </target>

  <target name="jar" depends="compile" description="Generates the merlin jar file" unless="uptodate">

    <mkdir dir="${build.conf}"/>
    <copy todir="${build.conf}" flatten="true">
      <fileset dir="../" includes="LICENSE.txt"/>
      <filterset>
        <filter token="year" value="${year}"/>
      </filterset>
    </copy>
    <copy todir="${build.conf}" flatten="true">
      <fileset dir="${src.dir}/etc" includes="kernel.xml" />
    </copy>

    <mkdir dir="${build.lib}"/>

    <jar jarfile="${build.lib}/${jar.name}"
       basedir="${build.classes}"
       compress="${build.compress}"
       manifest="${src.dir}/etc/project.mf">
      <exclude name="**/test/**"/>
      <exclude name="**/playground/**"/>
      <exclude name="**/*.zip"/>
      <zipfileset dir="${build.conf}" prefix="META-INF/">
        <include name="LICENSE.txt"/>
      </zipfileset>
      <zipfileset dir="${build.conf}" prefix="BLOCK-INF/">
        <include name="kernel.xml"/>
      </zipfileset>
    </jar>

  </target>

  <target name="update-install" depends="jar,jar-playground">
      <mkdir dir="${local.repository}"/>
      <copy toDir="${local.repository}" file="${build.dir}/lib/${jar.name}"/>
  </target>

  <target name="install" depends="update-install">

    <!--
    Create the standard installation structure.
    -->
    <mkdir dir="${merlin.home}"/>
    <mkdir dir="${merlin.home}/ext"/>
    <mkdir dir="${merlin.home}/lib/system"/>
    <mkdir dir="${merlin.home}/lib/shared"/>
    <mkdir dir="${merlin.home}/repository"/>
    <copy toDir="${merlin.home}/lib" file="${wrapper.dll}"/>
    <copy toDir="${merlin.home}/lib" file="${wrapper.jar}"/>
    <copy toDir="${merlin.home}/lib/shared" file="${avalon-framework.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${excalibur-i18n.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${excalibur-configuration.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${excalibur-extension.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${excalibur-util-concurrent.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${excalibur-thread.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${excalibur-threadcontext.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${excalibur-pool.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${excalibur-event.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${excalibur-collections.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${commons-collections.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${avalon-logkit.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${avalon-meta.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${avalon-lifecycle.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${avalon-assembly.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${avalon-assembly-spi.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${merlin.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${merlin-bootstrap.jar}"/>
    <copy toDir="${merlin.home}/lib/system" file="${merlin-spi.jar}"/>
    <mkdir dir="${merlin.home}/bin"/>
    <copy toDir="${merlin.home}/bin">
      <fileset dir="${src.dir}/bin">
        <include name="**/*.*"/>
      </fileset>
    </copy>
    <mkdir dir="${merlin.home}/config"/>
    <copy toDir="${merlin.home}/config">
      <fileset dir="${src.dir}/config">
        <include name="**/*.*"/>
      </fileset>
    </copy>

    <!--
    Include a sample repository.
    -->
    <mkdir dir="${merlin.home}/repository"/>
    <copy toDir="${merlin.home}/repository">
      <fileset dir="${src.dir}/repository">
        <include name="**/*.*"/>
      </fileset>
    </copy>
    <mkdir dir="${merlin.home}/repository/playground"/>
    <copy toDir="${merlin.home}/repository/playground">
      <fileset dir="../assembly/build/lib">
        <include name="playground*.jar"/>
      </fileset>
    </copy>
    <copy toDir="${merlin.home}/repository/demo">
      <fileset dir="build/lib">
        <include name="merlin-demo*.jar"/>
      </fileset>
    </copy>

  </target>

  <!-- Creates all the Javadocs -->
  <target name="javadocs" depends="compile" 
          description="Generates the javadocs" unless="skip.javadocs">
    <mkdir dir="${build.javadocs}"/>
    <javadoc sourcepath="${java.dir}" packagenames="*,*.*"
       destdir="${build.javadocs}">
     <classpath refid="project.class.path" />
      <group title="Kernel">
        <package name=""/>
        <package name="org.apache.avalon.merlin"/>
        <package name="org.apache.avalon.merlin.kernel"/>
        <package name="org.apache.avalon.merlin.kernel.*"/>
        <package name="org.apache.avalon.merlin.service"/>
        <package name="org.apache.avalon.merlin.service.*"/>
        <package name="org.apache.avalon.merlin.bootstrap"/>
      </group>
      <group title="Containment">
        <package name="org.apache.avalon.merlin.container"/>
        <package name="org.apache.avalon.merlin.container.builder"/>
        <package name="org.apache.avalon.merlin.container.impl"/>
        <package name="org.apache.avalon.merlin.block"/>
        <package name="org.apache.avalon.merlin.block.*"/>
      </group>
      <doclet name="com.sun.tools.doclets.standard.Standard">
        <param name="-author"/>
        <param name="-version"/>
        <param name="-doctitle" value="${Name}"/>
        <param name="-windowtitle" value="${Name} API"/>
        <param name="-link" value="${j2se.api.link}"/>
        <param name="-link" value="${j2ee.api.link}"/>
        <param name="-link" value="${avalon.api.link}"/>
        <param name="-link" value="${assembly.api.link}"/>
        <param name="-link" value="${lifecycle.api.link}"/>
        <param name="-link" value="${meta.api.link}"/>
        <param name="-link" value="${merlin-spi.api.link}"/>
        <param name="-bottom"
           value="&quot;Copyright &#169; ${year} Apache Avalon Project. All Rights Reserved.&quot;"/>
      </doclet>
    </javadoc>
  </target>

  <target name="checkstyle" if="do.checkstyle">
    <taskdef classpath="${checkstyle.jar}"
       resource="checkstyletask.properties"/>

    <checkstyle
      properties="${etc.dir}/checkstyle.properties" 
      failOnViolation="false">
      <fileset dir="${java.dir}"
               includes="**/*.java"/>
      <property key="checkstyle.cache.file" file="${checkstyle-cache}"/>
      <formatter type="plain"/>
      <formatter type="xml" toFile="${build.dir}/checkstyle-results.xml"/>
    </checkstyle>
  </target>

  <!-- the following task is broken folling checkes to the tool dir in the avalon package -->
  <target name="checkstyle-report" depends="checkstyle" if="do.checkstyle"
     description="Generate Checkstyle Report">
    <mkdir dir="${build.reports}"/>
    <property name="checkstyle.pathhack" location="."/>
    <style style="${tools.dir}/etc/checkstyle-frames.xsl" in="${build.dir}/checkstyle-results.xml"
       out="${build.reports}/delete-me.html.html">
            <param name="pathhack" expression="${checkstyle.pathhack}"/>
    </style>
  </target>

  <!-- Creates the distribution -->
  <target name="dist"
     depends="dist-jar, checkstyle-report, javadocs"
     description="Generates a distribution (jar + javadocs + unit tests + checkstyle reports)">

    <copy file="${build.conf}/LICENSE.txt" todir="${dist.dir}"/>
    <copy file="../KEYS" todir="${dist.dir}"/>

    <zip zipfile="${dist.dir}/src.zip" compress="false">
      <zipfileset dir="src/java"/>
    </zip>

    <mkdir dir="${dist.base}"/>

    <zip zipfile="${dist.base}/${dist.name}.zip" compress="true">
      <zipfileset dir="${dist.dir}" prefix="${dist.name}"/>
    </zip>

    <delete dir="${dist.dir}" />

  </target>

  <!-- Creates a mini jar-only distribution -->
  <target name="dist-jar" depends="jar">
    <mkdir dir="${dist.dir}"/>
    <copy todir="${dist.dir}">
      <fileset dir="${build.lib}">
        <include name="*.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- Creates a minimal distribution -->
  <target name="dist.lite"
     depends="dist-jar, javadocs"
     description="Generates a minimal distribution (jar + javadocs)">

    <copy file="../LICENSE.txt" todir="${dist.dir}"/>
    <copy file="../KEYS" todir="${dist.dir}"/>

  </target>

  <target name="docs" depends="xdocs, javadocs" 
     description="generates all the Avalon documentation">
    <copy todir="${dist.docs}">
      <fileset dir="${build.docs}/docs">
      </fileset>
    </copy>
  </target>

  <target name="xdocs" description="generates the xdocs-based documentation">
    <ant antfile="${basedir}/../cocoonbuild.xml"/>
  </target>

  <target name="site" depends="docs" 
     description=" Places Docs ready for hosting on website">
    <mkdir dir="../site/dist/docs/${dir-name}"/>
    <copy todir="../site/dist/docs/${dir-name}">
      <fileset dir="${build.docs}">
        <exclude name="api/**"/>
      </fileset>
    </copy>
  </target>

  <!-- Cleans up build and distribution directories -->
  <target name="clean" description="Cleans up the project">
    <delete file="checkstyle.cache"/>
    <delete dir="${build.dir}" />
    <delete dir="${lib.dir}" />
    <delete dir="${common.dir}" />
    <delete dir="${dist.dir}" />
    <delete dir="test" /> <!-- unit testing output directory -->
    <delete>
      <fileset dir="." includes="velocity.*"/>
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
  </target>

  <target name="real-clean" depends="clean" 
     description="Cleans up the project, including distributions">
    <delete dir="${dist.base}" />
  </target>
 
  <!--
  Test
  -->

  <!-- Compiles the unit test source code -->
  <target name="compile-test" depends="jar" description="Compiles unit test source code">

    <mkdir dir="${build.testsrc}"/>

    <!-- Copy over all of the tests applying test filters -->
    <copy todir="${build.testsrc}">
      <fileset dir="${test.dir}"/>
    </copy>

    <mkdir dir="${build.testclasses}"/>

    <!-- Compile all test classes. -->
    <javac srcdir="${build.testsrc}"
       destdir="${build.testclasses}"
       debug="${build.debug}"
       optimize="${build.optimize}"
       deprecation="${build.deprecation}"
       target="1.2">
       <classpath refid="test.class.path" />
       <include name="**/*.java"/>
    </javac>

    <copy todir="${build.testclasses}">
      <fileset dir="${test.dir}">
        <exclude name="**/*.java"/>
        <exclude name="**/package.html"/>
      </fileset>
    </copy>

  </target>

  <!-- Compiles the unit test source code -->
  <target name="compile-playground" depends="jar" description="Compiles demo sources.">

    <mkdir dir="${build.playground}"/>

    <!-- Compile all test classes. -->
    <javac srcdir="${test.dir}"
       destdir="${build.playground}"
       debug="${build.debug}"
       optimize="${build.optimize}"
       deprecation="${build.deprecation}"
       target="1.3">
       <classpath refid="project.class.path" />
       <include name="**/playground/*.java"/>
    </javac>

    <copy todir="${build.playground}">
      <fileset dir="${test.dir}">
        <exclude name="**/*.java"/>
        <exclude name="**/package.html"/>
        <include name="**/playground/**/*"/>
      </fileset>
    </copy>

    <copy todir="${build.playground}" flatten="true">
      <fileset dir="${src.dir}/repository/demo" includes="block.xml"/>
    </copy>

    <copy todir="${build.dir}/tests">
      <fileset dir="${basedir}" includes="kernel.xml"/>
    </copy>

  </target>


  <!-- Compiles the unit test source code -->
  <target name="jar-playground" depends="compile-playground" description="Jar the playground.">
    <jar jarfile="${build.lib}/${demo.jar}"
        basedir="${build.playground}"
        compress="${build.compress}"
        manifest="${src.dir}/etc/demo.mf">
      <include name="**/playground/**"/>
      <zipfileset dir="${build.conf}" prefix="META-INF/">
         <include name="LICENSE.txt"/>
      </zipfileset>
      <zipfileset dir="${build.playground}" prefix="BLOCK-INF/">
        <include name="block.xml"/>
      </zipfileset>
    </jar>
  </target>

  <target name="test" depends="jar-playground,compile-test" description="Perform the unit tests" unless="skip.tests">

    <echo message="Performing Unit Tests" />

    <mkdir dir="${build.tests}"/>

    <junit fork="true"
        haltonfailure="${junit.failonerror}"
        printsummary="yes"
        dir="${basedir}">
      <classpath>
        <path refid="runtime.class.path"/>
        <pathelement location="${build.test}"/>
      </classpath>
      <jvmarg value="-Djava.ext.dirs=common;lib"/>

      <formatter type="xml"/>    <!-- xml reports for junitreport -->
      <formatter type="plain" usefile="false"/>  <!-- text reports for humans     -->

      <batchtest todir="${build.tests}">
        <fileset dir="${build.testclasses}">
          <include name="**/*TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="test-reports" depends="test" description="Generate Reports for the unit tests">

    <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkBSF"/>

    <mkdir dir="${build.reports}/junit"/>

    <junitreport todir="${build.reports}/junit">
      <fileset dir="${build.tests}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${build.reports}/junit"/>
    </junitreport>
  </target>

</project>
