<?xml version="1.0"?>

<!--  
Copyright (C) The Apache Software Foundation. All rights reserved.
This software is published under the terms of the Apache Software License
version 1.1, a copy of which has been included with this distribution in
the LICENSE.txt file.

@author  Avalon Development Team
@version 1.0 12/03/2001
-->

<project name="merlin" default="main" basedir=".">

  <property file="${basedir}/../ant.properties"/>
  <property file="${basedir}/ant.properties"/>
  <property file="${user.home}/.ant.properties"/>
  <property file="${basedir}/../default.properties"/>
  <property file="${basedir}/default.properties"/>

  <!-- Classpath for product -->
  <path id="project.class.path">
    <pathelement location="${logkit.jar}"/>
    <pathelement location="${avalon-framework.jar}"/>
    <pathelement location="${excalibur-i18n.jar}"/>
    <pathelement location="${avalon-meta.jar}"/>
    <pathelement location="${avalon-lifecycle.jar}"/>
    <pathelement location="${avalon-assembly.jar}"/>
    <pathelement location="${excalibur-logger.jar}"/>
    <pathelement location="${excalibur-configuration.jar}"/>
    <pathelement location="${excalibur-thread.jar}"/>
    <pathelement location="${excalibur-event.jar}"/>
    <pathelement location="${util.concurrent.jar}"/>
    <pathelement location="${commons-collections.jar}"/>
    <pathelement location="${build.classes}"/>
    <pathelement location="${checkstyle.jar}"/>
    <pathelement location="${xml-apis.jar}"/>
    <pathelement path="${java.class.path}"/>
  </path>

  <path id="test.class.path">
    <path refid="project.class.path"/>
    <pathelement location="${build.dir}/lib/${jar.name}"/>
    <pathelement location="${build.testclasses}"/>
  </path>

  <path id="runtime.class.path">
    <pathelement location="${build.dir}/lib/${jar.name}"/>
    <pathelement location="${build.testclasses}"/>
  </path>

  <target name="main" depends="jar,jar-playground,deploy" description="Build the project"/>
  <target name="rebuild" depends="clean,main" description="Rebuild the project"/>
  <target name="all" depends="rebuild,docs" description="Rebuild the project"/>

  <target name="assembly-context">
    <uptodate property="assembly-uptodate" targetfile="${avalon-assembly.jar}">
      <srcfiles dir="${avalon-assembly.home}/src">
        <include name="**/*.*"/>
      </srcfiles>
    </uptodate>
  </target>

  <target name="assembly" depends="assembly-context" 
      description="Assembly dependency" unless="assembly-uptodate">
    <ant dir="../assembly" inheritAll="false"/>
  </target>

  <target name="meta-context">
    <uptodate property="meta-uptodate" targetfile="${avalon-meta.jar}">
      <srcfiles dir="${avalon-meta.home}/src">
        <include name="**/*.*"/>
      </srcfiles>
    </uptodate>
  </target>

  <target name="meta" depends="meta-context" description="Meta dependency" unless="meta-uptodate">
    <ant dir="../meta" inheritAll="false"/>
  </target>

  <target name="dependencies" depends="meta,assembly" description="Check dependencies" />

  <target name="context">
    <mkdir dir="${lib.dir}"/>
    <uptodate property="uptodate" targetfile="${build.lib}/${jar.name}">
      <srcfiles dir="${src.dir}">
        <include name="**/*.*"/>
      </srcfiles>
      <srcfiles dir="${lib.dir}">
        <include name="**/*.*"/>
      </srcfiles>
    </uptodate>
  </target>

  <target name="context-bootstrap">
    <mkdir dir="${lib.dir}"/>
    <uptodate property="uptodate-bootstrap" targetfile="${build.lib}/${bootstrap.jar}">
      <srcfiles dir="${src.dir}">
        <include name="**/bootstrap/**/*.*"/>
      </srcfiles>
      <srcfiles dir="${lib.dir}">
        <include name="**/*.*"/>
      </srcfiles>
    </uptodate>
  </target>

  <!-- Compiles the source code -->
  <target name="compile" depends="context,dependencies" 
       description="Compiles the source code" unless="uptodate">
    
    <echo message="compiling ${ant.project.name}"/>
    <mkdir dir="${build.classes}"/>

    <!-- Compile all classes -->

    <javac srcdir="${java.dir}"
       destdir="${build.classes}"
       debug="${build.debug}"
       optimize="${build.optimize}"
       deprecation="${build.deprecation}"
       target="1.2">
      <src path="${java.dir}" />
      <classpath refid="project.class.path" />
      <exclude name="**/playground/**/*.java"/>
      <exclude name="**/bootstrap/**/*.java"/>
      <include name="**/*.java"/>
    </javac>

    <!-- copy resources to same location as .class files -->
    <copy todir="${build.classes}">
      <fileset dir="${java.dir}">
        <exclude name="**/*.java"/>
        <exclude name="**/package.html"/>
        <exclude name="**/playground/**/*.*"/>
      </fileset>
    </copy>

  </target>

  <!-- Compiles the bootstrap source code -->
  <target name="compile-bootstrap" depends="context-bootstrap" 
       description="Compiles the bootstrap source code" unless="uptodate-bootstrap">
    
    <echo message="compiling bootstrap"/>
    <mkdir dir="${build.bootstrap}"/>

    <javac srcdir="${java.dir}"
       destdir="${build.bootstrap}"
       debug="${build.debug}"
       optimize="${build.optimize}"
       deprecation="${build.deprecation}"
       target="1.2">
      <src path="${java.dir}" />
      <include name="**/bootstrap/**/*.java"/>
    </javac>

  </target>

  <!-- Creates the merlin jar files -->
  <target name="jar" depends="merlin.jar,bootstrap.jar" description="Generates the jar files"/>

  <target name="merlin.jar" depends="compile" description="Generates the merlin jar file" unless="uptodate">

    <mkdir dir="${build.conf}"/>
    <copy todir="${build.conf}" flatten="true">
      <fileset dir="../" includes="LICENSE.txt"/>
      <filterset>
        <filter token="year" value="${year}"/>
      </filterset>
    </copy>
    <copy todir="${build.conf}" flatten="true">
      <fileset dir="${src.dir}/etc" includes="kernel.xml"/>
    </copy>

    <mkdir dir="${build.lib}"/>

    <jar jarfile="${build.lib}/${jar.name}"
       basedir="${build.classes}"
       compress="${build.compress}"
       manifest="${src.dir}/etc/project.mf">
      <exclude name="**/test/**"/>
      <exclude name="**/playground/**"/>
      <zipfileset dir="${build.conf}" prefix="META-INF/">
        <include name="LICENSE.txt"/>
      </zipfileset>
      <zipfileset dir="${build.conf}" prefix="BLOCK-INF/">
        <include name="kernel.xml"/>
      </zipfileset>
    </jar>

  </target>

  <target name="bootstrap.jar" depends="compile-bootstrap" description="Generates the jar files" unless="uptodate-bootstrap">
    <mkdir dir="${build.lib}"/>
    <jar jarfile="${build.lib}/${bootstrap.jar}"
       basedir="${build.bootstrap}"
       compress="${build.compress}" >
    </jar>
  </target>

  <target name="deploy" depends="jar">

     <mkdir dir="${common.dir}"/>
     <copy todir="${common.dir}" file="${avalon-framework.jar}"/>
     <copy todir="${common.dir}" file="${excalibur-i18n.jar}"/>
     <copy todir="${common.dir}" file="${excalibur-configuration.jar}"/>
     <copy todir="${common.dir}" file="${avalon-meta.jar}"/>
     <copy todir="${common.dir}" file="${logkit.jar}"/>

     <mkdir dir="${lib.dir}"/>
     <copy todir="${lib.dir}" file="${build.lib}/${jar.name}"/>
     <copy todir="${lib.dir}" file="${excalibur-extension.jar}"/>
     <copy todir="${lib.dir}" file="${excalibur-logger.jar}"/>
     <copy todir="${lib.dir}" file="${excalibur-event.jar}"/>
     <copy todir="${lib.dir}" file="${commons-collections.jar}"/>
     <copy todir="${lib.dir}" file="${util.concurrent.jar}"/>
     <copy todir="${lib.dir}" file="${excalibur-thread.jar}"/>
     <copy todir="${lib.dir}" file="${avalon-lifecycle.jar}"/>
     <copy todir="${lib.dir}" file="${avalon-assembly.jar}"/>
     <copy todir="${lib.dir}" preservelastmodified="true">
       <fileset dir="${tools.dir}/lib">
         <include name="xerces-2.0.1.jar"/>
         <include name="xml-apis.jar"/>
         <include name="xalan-2.3.1.jar"/>
       </fileset>
     </copy>

  </target>


  <!-- Creates all the Javadocs -->
  <target name="javadocs" depends="compile" 
          description="Generates the javadocs" unless="skip.javadocs">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="org.apache.avalon.merlin.*"
       sourcepath="${java.dir}"
       destdir="${build.javadocs}">
      <classpath refid="project.class.path" />
      <group title="Kernel">
        <package name="org.apache.avalon.merlin"/>
        <package name="org.apache.avalon.merlin.kernel"/>
        <package name="org.apache.avalon.merlin.service"/>
      </group>
      <group title="Containment">
        <package name="org.apache.avalon.merlin.container"/>
        <package name="org.apache.avalon.merlin.container.builder"/>
        <package name="org.apache.avalon.merlin.block"/>
      </group>
      <doclet name="com.sun.tools.doclets.standard.Standard">
        <param name="-author"/>
        <param name="-version"/>
        <param name="-doctitle" value="${Name}"/>
        <param name="-windowtitle" value="${Name} API"/>
        <param name="-link" value="http://java.sun.com/j2se/1.4/docs/api/"/>
        <param name="-link" value="http://java.sun.com/j2ee/sdk_1.3/techdocs/api/"/>
        <param name="-link" value="../../avalon/api"/>
        <param name="-link" value="../../assembly/api"/>
        <param name="-link" value="../../lifecycle/api"/>
        <param name="-link" value="../../meta/api"/>
        <param name="-bottom"
           value="&quot;Copyright &#169; ${year} Apache Avalon Project. All Rights Reserved.&quot;"/>
      </doclet>
    </javadoc>
  </target>

  <target name="checkstyle" if="do.checkstyle">
    <taskdef classpath="${checkstyle.jar}"
       resource="checkstyletask.properties"/>

    <checkstyle
      properties="${etc.dir}/checkstyle.properties" 
      failOnViolation="false">
      <fileset dir="${java.dir}"
               includes="**/*.java"/>
      <property key="checkstyle.cache.file" file="${checkstyle-cache}"/>
      <formatter type="plain"/>
      <formatter type="xml" toFile="${build.dir}/checkstyle-results.xml"/>
    </checkstyle>
  </target>

  <target name="checkstyle-report" depends="checkstyle" if="do.checkstyle"
     description="Generate Checkstyle Report">
    <mkdir dir="${build.reports}"/>
    <property name="checkstyle.pathhack" location="."/>
    <style style="${tools.dir}/etc/checkstyle-frames.xsl" in="${build.dir}/checkstyle-results.xml"
       out="${build.reports}/delete-me.html.html">
            <param name="pathhack" expression="${checkstyle.pathhack}"/>
    </style>
  </target>

  <!-- Creates the distribution -->
  <target name="dist"
     depends="dist-jar, checkstyle-report, javadocs"
     description="Generates a distribution (jar + javadocs + unit tests + checkstyle reports)">

    <copy file="${build.conf}/LICENSE.txt" todir="${dist.dir}"/>
    <copy file="../KEYS" todir="${dist.dir}"/>

    <zip zipfile="${dist.dir}/src.zip" compress="false">
      <zipfileset dir="src/java"/>
    </zip>

    <mkdir dir="${dist.base}"/>

    <zip zipfile="${dist.base}/${dist.name}.zip" compress="true">
      <zipfileset dir="${dist.dir}" prefix="${dist.name}"/>
    </zip>

    <delete dir="${dist.dir}" />

  </target>

  <!-- Creates a mini jar-only distribution -->
  <target name="dist-jar" depends="jar">
    <mkdir dir="${dist.dir}"/>
    <copy todir="${dist.dir}">
      <fileset dir="${build.lib}">
        <include name="*.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- Creates a minimal distribution -->
  <target name="dist.lite"
     depends="dist-jar, javadocs"
     description="Generates a minimal distribution (jar + javadocs)">

    <copy file="../LICENSE.txt" todir="${dist.dir}"/>
    <copy file="../KEYS" todir="${dist.dir}"/>

  </target>

  <target name="docs" depends="xdocs, javadocs" 
     description="generates all the Avalon documentation"/>

  <target name="xdocs" description="generates the xdocs-based documentation">
    <ant antfile="${basedir}/../cocoonbuild.xml"/>
  </target>

  <target name="site" depends="docs" 
     description=" Places Docs ready for hosting on website">
    <mkdir dir="../site/dist/docs/${dir-name}"/>
    <copy todir="../site/dist/docs/${dir-name}">
      <fileset dir="${build.docs}">
        <include name="**"/>
      </fileset>
    </copy>
  </target>

  <!-- Cleans up build and distribution directories -->
  <target name="clean" description="Cleans up the project">
    <delete file="checkstyle.cache"/>
    <delete dir="${build.dir}" />
    <delete dir="${lib.dir}" />
    <delete dir="${common.dir}" />
    <delete dir="${dist.dir}" />
    <delete dir="test" /> <!-- unit testing output directory -->
    <delete>
      <fileset dir="." includes="velocity.*"/>
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
  </target>

  <target name="real-clean" depends="clean" 
     description="Cleans up the project, including distributions">
    <delete dir="${dist.base}" />
  </target>
 
  <!--
  Test
  -->

  <!-- Compiles the unit test source code -->
  <target name="compile-test" depends="jar" description="Compiles unit test source code">

    <mkdir dir="${build.testsrc}"/>

    <!-- Copy over all of the tests applying test filters -->
    <copy todir="${build.testsrc}">
      <fileset dir="${test.dir}"/>
    </copy>

    <mkdir dir="${build.testclasses}"/>

    <!-- Compile all test classes. -->
    <javac srcdir="${build.testsrc}"
       destdir="${build.testclasses}"
       debug="${build.debug}"
       optimize="${build.optimize}"
       deprecation="${build.deprecation}"
       target="1.2">
       <classpath refid="test.class.path" />
       <include name="**/*.java"/>
    </javac>

    <copy todir="${build.testclasses}">
      <fileset dir="${test.dir}">
        <exclude name="**/*.java"/>
        <exclude name="**/package.html"/>
      </fileset>
    </copy>

  </target>

  <!-- Compiles the unit test source code -->
  <target name="compile-playground" depends="jar" description="Compiles demo sources.">

    <mkdir dir="${build.playground}"/>

    <!-- Compile all test classes. -->
    <javac srcdir="${test.dir}"
       destdir="${build.playground}"
       debug="${build.debug}"
       optimize="${build.optimize}"
       deprecation="${build.deprecation}"
       target="1.2">
       <classpath refid="project.class.path" />
       <include name="**/playground/*.java"/>
    </javac>

    <copy todir="${build.playground}">
      <fileset dir="${test.dir}">
        <exclude name="**/*.java"/>
        <exclude name="**/package.html"/>
        <include name="**/playground/**/*"/>
      </fileset>
    </copy>

    <copy todir="${build.playground}" flatten="true">
      <fileset dir="${src.dir}/test/config" includes="block.xml"/>
    </copy>

    <copy todir="${build.dir}/tests">
      <fileset dir="${basedir}" includes="kernel.xml"/>
    </copy>

  </target>


  <!-- Compiles the unit test source code -->
  <target name="jar-playground" depends="compile-playground" description="Jar the playground.">
    <jar jarfile="${build.lib}/${demo.jar}"
        basedir="${build.playground}"
        compress="${build.compress}"
        manifest="${src.dir}/etc/demo.mf">
      <include name="**/playground/**"/>
      <zipfileset dir="${build.conf}" prefix="META-INF/">
         <include name="LICENSE.txt"/>
      </zipfileset>
      <zipfileset dir="${build.playground}" prefix="BLOCK-INF/">
        <include name="block.xml"/>
      </zipfileset>
    </jar>
  </target>

  <target name="test" depends="jar-playground,compile-test" description="Perform the unit tests" unless="skip.tests">

    <echo message="Performing Unit Tests" />

    <mkdir dir="${build.tests}"/>

    <junit fork="true"
        haltonfailure="${junit.failonerror}"
        printsummary="yes"
        dir="${basedir}">
      <classpath>
        <path refid="runtime.class.path"/>
        <pathelement location="${build.test}"/>
      </classpath>
      <jvmarg value="-Djava.ext.dirs=common;lib"/>

      <formatter type="xml"/>    <!-- xml reports for junitreport -->
      <formatter type="plain" usefile="false"/>  <!-- text reports for humans     -->

      <batchtest todir="${build.tests}">
        <fileset dir="${build.testclasses}">
          <include name="**/*TestCase.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="test-reports" depends="test" description="Generate Reports for the unit tests">

    <ant antfile="${depchecker.prefix}/depchecker.xml" target="checkBSF"/>

    <mkdir dir="${build.reports}/junit"/>

    <junitreport todir="${build.reports}/junit">
      <fileset dir="${build.tests}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${build.reports}/junit"/>
    </junitreport>
  </target>

  <!--
  Misc. utilities.
  -->

  <target name="patch">
    <replace dir="src" summary="true"
       token="xxxx"
       value="yyyy" >
     <include name="**/*.*"/>
    </replace>
  </target>

</project>
