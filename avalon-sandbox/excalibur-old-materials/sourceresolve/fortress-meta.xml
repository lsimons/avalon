<?xml version="1.0"?>

<project name="Excalibur SourceResolving Fortress Meta Info Management" basedir="."
    default="provide-fortress-meta">

    <property file="${user.home}/build.properties"/>
    <property file="${basedir}/../ant.properties"/>
    <property file="${basedir}/ant.properties"/>
    <property file="${user.home}/.ant.properties"/>
    <property file="${basedir}/../libraries.properties"/>
    <property file="${basedir}/../default.properties"/>
    <property file="${basedir}/default.properties"/>

    <path id="fortress.tools.classpath">
        <pathelement location="${avalon-fortress-tools.jar}"/>
        <pathelement location="${qdox.jar}"/>
    </path>

    <property
        name="fortress.collect-meta.classname"
        value="org.apache.avalon.fortress.tools.ComponentMetaInfoCollector"/>

    <!-- ===================================================================== -->
    <!-- Generate or copy fortress meta descriptors                            -->
    <!-- ===================================================================== -->

    <target
        name="provide-fortress-meta"
        description="Add fortress meta descriptors to the compiled classes"
        depends="provide-fortress-meta-dynamic, provide-fortress-meta-static"/>

    <target
        name="provide-fortress-meta-dynamic"
        depends="test-fortress-collect-meta-present"
        if="avalon-fortress-tools.present">

        <taskdef name="fortress-collect-meta"
            classname="${fortress.collect-meta.classname}"
            classpathref="fortress.tools.classpath"/>

        <fortress-collect-meta destdir="${build.classes}">
            <fileset dir="${java.dir}"/>
        </fortress-collect-meta>

        <!-- save it for future use via provide-fortress-meta-static -->
        <antcall target="do-save-fortress-meta"/>

    </target>

    <target
        name="provide-fortress-meta-static"
        depends="test-fortress-collect-meta-present, complain-fortress-meta-static"
        unless="avalon-fortress-tools.present">

        <copy todir="${build.classes}">
            <fileset dir="${fortress-static-meta.dir}">
                <include name="services.list"/>
                <include name="META-INF/services/*"/>
                <include name="**/*.meta"/>
                <include name="**/*.dep"/>
            </fileset>
        </copy>

    </target>

    <target name="complain-fortress-meta-static" unless="avalon-fortress-tools.present">
        <echo>
            .----------------------------------------------------------------.
            | HAVE NOT FOUND SOME OF                                         |
            |                                                                |
            | ${avalon-fortress-tools.jar}
            | ${qdox.jar}"
            |----------------------------------------------------------------|
            | Fortress meta info for Excalibur SourceResolving can not       |
            | be generated dynamically.                                      |
            |                                                                |
            | As a bootrstrap workaround I will use static fortress          |
            | meta info from                                                 |
            |                                                                |
            | ${fortress-static-meta.dir}
            |                                                                |
            | This is okay if you only build Excalibur SourceResolving.      |
            |                                                                |
            | If you do any SourceResolving development and espcially if you |
            | deal with Fortress meta data in SourceResolving classes please |
            | do build or download the jars required for dynamic Fortress    |
            | meta info generation.                                          |
            |                                                                |
            '----------------------------------------------------------------'
        </echo>
    </target>

    <!-- ===================================================================== -->
    <!-- Check if excalibur-fortress-tools.jar and qdox.jar are present        -->
    <!-- ===================================================================== -->
    <target name="test-fortress-collect-meta-present">
        <!-- To avoid circular dependency we don't want to build avalon-fortress-tools.jar -->
        <!-- We'll also use static meta descriptors if do not find it - so we do not       -->
        <!-- want to fail the build if do not find it. Hence depchecker.xml not used       -->
        <!-- currently.                                                                    -->
        <available
            classname="${fortress.collect-meta.classname}"
            classpathref="fortress.tools.classpath"
            property="avalon-fortress-tools.present"/>
    </target>

    <!-- ===================================================================== -->
    <!-- Save generated meta for later static use                              -->
    <!-- by provide-fortress-meta-static                                       -->
    <!-- ===================================================================== -->

    <!-- ===================================================================== -->
    <!-- Because the copy operation is very destructive - we first erase all   -->
    <!-- existing fortress meta info, we want to make sure that the info has   -->
    <!-- really been generated.                                                -->
    <!-- This is what save-fortress-meta does. It is intended to be invoked    -->
    <!-- directly from the command line directly, via                          -->
    <!-- ant -f fortress-meta.xml save-fotress-meta.                           -->
    <!-- ===================================================================== -->
    <target
        name="save-fortress-meta"
        description="Copy generated fortress meta back under ./src"
        depends="conditionally-save-fortress-meta, complain-save-fortress-meta"/>

    <target
        name="conditionally-save-fortress-meta"
        depends="test-fortress-meta-generated"
        if="fortress.meta.generated">
        <antcall target="do-save-fortress-meta"/>
    </target>

    <!-- ===================================================================== -->
    <!-- Do copy the generated meta to ${fortress-static-meta.dir} without any -->
    <!-- checks. Invoked from conditionally-save-fortress-meta and from        -->
    <!-- provide-fortress-meta-dynamic.                                        -->
    <target name="do-save-fortress-meta">

        <!--delete stale meta info-->
        <delete dir="${fortress-static-meta.dir}"/>

        <mkdir dir="${fortress-static-meta.dir}"/>

        <copy todir="${fortress-static-meta.dir}">
            <fileset dir="${build.classes}">
                <include name="services.list"/>
                <include name="META-INF/services/*"/>
                <include name="**/*.meta"/>
                <include name="**/*.dep"/>
            </fileset>
        </copy>

    </target>

    <target name="complain-save-fortress-meta" depends="test-fortress-meta-generated"
        unless="fortress.meta.generated">
        <echo>
            .----------------------------------------------------------------.
            | FILE NOT FOUND                                                 |
            |                                                                |
            | ${build.classes}/services.list
            |----------------------------------------------------------------|
            | Fortress meta info has not been generated.                     |
            |                                                                |
            | ${fortress-static-meta.dir}
            |                                                                |
            | has not been changed.                                          |
            '----------------------------------------------------------------'
        </echo>
    </target>

    <target name="test-fortress-meta-generated">
        <available
            file="${build.classes}/services.list"
            property="fortress.meta.generated"/>
    </target>

</project>
