<?xml version="1.0"?>

<document>
  <header>
    <title>The Avalon Container HOWTO - Overview</title>
    <authors>
      <person name="Leo Simons" email="leosimons@apache.org"/>
      <person name="Nicola Ken Barozzi" email="nicolaken@apache.org"/>      
    </authors>
  </header>
  <body>
    <s1 title="Prerequisites">
		<p>Question: Do you know what Lifecycle in Avalon is? Ok, start reading.</p>
		<p>If not, look at Egg and understand this concept before reading about Containers.</p>
    </s1>
    
	<s1 title="Do I really know what a Container is?">
		<p>Well, you're mostly on your own for now. We're still working
		on the entire concept of container and on the various containers
		that ship with avalon.</p>

		<p>Anyway, Tweety.java conceptually is a Container. Look at the difference between
		   Tweety and Egg, and you'll see that the main difference are:
		
  		  <ul>
		    <li>Egg has just main(), while Main calles Tweety, ie The application (Main) uses the container (Tweety)</li>
		    <li>Tweety is a Container but also a Component; this is important, because it could contain
		        itself hierarchically.</li>
		  </ul>   
		   
		 </p>
		
	</s1>    

	<s1 title="So you want to build your won container, huh?">

		<p>For now, I suggest you check out the sources for Tweety
		(inside the <code>jakarta-avalon-excalibur</code> CVS module),
		<a href="http://tambora.zenplex.org/cgi-bin/cvsweb.cgi/plexus/">Plexus</a>,
		Containerkit (also inside the <code>jakarta-avalon-excalibur</code>
		CVS module), Fortress (same CVS module) and Phoenix
		(inside the <code>jakarta-avalon-phoenix</code> CVS module) to see
		how it is done.</p>

		<p>Finally, take a peak at the avalon-dev mail archives or ask some
		questions on that list,</p>
	</s1>

  </body>
  <footer>
    <legal>
      Copyright (c) @year@ The Jakarta Apache Project All rights reserved.
      $Revision: 1.3 $ $Date: 2002/07/08 18:00:14 $
    </legal>
  </footer>
</document>
