// ============================================================================//                   The Apache Software License, Version 1.1// ============================================================================// // Copyright (C) 2002-2003 The Apache Software Foundation. All rights reserved.// // Redistribution and use in source and binary forms, with or without modifica-// tion, are permitted provided that the following conditions are met:// // 1. Redistributions of  source code must  retain the above copyright  notice,//    this list of conditions and the following disclaimer.// // 2. Redistributions in binary form must reproduce the above copyright notice,//    this list of conditions and the following disclaimer in the documentation//    and/or other materials provided with the distribution.// // 3. The end-user documentation included with the redistribution, if any, must//    include  the following  acknowledgment:  "This product includes  software//    developed  by the  Apache Software Foundation  (http://www.apache.org/)."//    Alternately, this  acknowledgment may  appear in the software itself,  if//    and wherever such third-party acknowledgments normally appear.// // 4. The names "Jakarta", "Avalon", "Excalibur" and "Apache Software Foundation"  //    must not be used to endorse or promote products derived from this  software //    without  prior written permission. For written permission, please contact //    apache@apache.org.// // 5. Products  derived from this software may not  be called "Apache", nor may//    "Apache" appear  in their name,  without prior written permission  of the//    Apache Software Foundation.// // THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND// FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE// APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,// INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-// DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS// OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON// ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT// (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.// // This software  consists of voluntary contributions made  by many individuals// on  behalf of the Apache Software  Foundation. For more  information on the // Apache Software Foundation, please see <http://www.apache.org/>.// ============================================================================namespace Apache.Avalon.Framework{	using System;	/// <summary>	/// Supporting Logger levels.	/// </summary>	public enum LoggerLevel	{		/// <summary>
		/// Debug logging level
		/// </summary>		Debug,		/// <summary>
		/// Info logging level
		/// </summary>		Info,		/// <summary>
		/// Warn logging level
		/// </summary>		Warn,		/// <summary>
		/// Error logging level
		/// </summary>		Error,		/// <summary>
		/// Fatal logging level
		/// </summary>		Fatal	}	/// <summary>	/// This is a facade for the different logging subsystems.	/// It offers a simplified interface that follows IOC patterns	/// and a simplified priority/level/severity abstraction. 	/// </summary>	public interface ILogger	{		/// <summary>		/// Logs a debug message.		/// </summary>		/// <param name="message">The Message</param>		void Debug( string message );		/// <summary>		/// Logs a debug message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		void Debug( string message, Exception exception);		/// <summary>		/// Logs a debug message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		void Debug( string format, params Object[] args );		/// <summary>		/// Determines if messages of priority "debug" will be logged.		/// </summary>		/// <value>True if "debug" messages will be logged.</value> 		bool IsDebugEnabled 		{			get;		}
		/// <summary>		/// Logs an info message.		/// </summary>		/// <param name="message">The Message</param>		void Info( string message );
		/// <summary>		/// Logs an info message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		void Info( string message, Exception exception);		/// <summary>		/// Logs an info message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		void Info( string format, params Object[] args );		/// <summary>		/// Determines if messages of priority "info" will be logged.		/// </summary>		/// <value>True if "info" messages will be logged.</value>		bool IsInfoEnabled		{			get;		}		/// <summary>		/// Logs a warn message.		/// </summary>		/// <param name="message">The Message</param>		void Warn( string message );		/// <summary>		/// Logs a warn message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		void Warn( string message, Exception exception);		/// <summary>		/// Logs a warn message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		void Warn( string format, params Object[] args );		/// <summary>		/// Determines if messages of priority "warn" will be logged.		/// </summary>		/// <value>True if "warn" messages will be logged.</value>		bool IsWarnEnabled		{			get;		}		/// <summary>		/// Logs an error message.		/// </summary>		/// <param name="message">The Message</param>		void Error( string message );		/// <summary>		/// Logs an error message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		void Error( string message, Exception exception);		/// <summary>		/// Logs an error message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		void Error( string format, params Object[] args );		/// <summary>		/// Determines if messages of priority "error" will be logged.		/// </summary>		/// <value>True if "error" messages will be logged.</value>		bool IsErrorEnabled		{			get;		}		/// <summary>		/// Logs a fatal error message.		/// </summary>		/// <param name="message">The Message</param>		void FatalError( string message );		/// <summary>		/// Logs a fatal error message.		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		void FatalError( string message, Exception exception);		/// <summary>		/// Logs a fatal error message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		void FatalError( string format, params Object[] args );		/// <summary>		/// Determines if messages of priority "fatalError" will be logged.		/// </summary>		/// <value>True if "fatalError" messages will be logged.</value>		bool IsFatalErrorEnabled		{			get;		}				/// <summary>		/// Create a new child logger.		/// The name of the child logger is [current-loggers-name].[passed-in-name]		/// </summary>		/// <param name="name">The Subname of this logger.</param>		/// <returns>The New ILogger instance.</returns> 		/// <exception cref="System.ArgumentException">If the name has an empty element name.</exception>		ILogger CreateChildLogger( string name );	}		}
