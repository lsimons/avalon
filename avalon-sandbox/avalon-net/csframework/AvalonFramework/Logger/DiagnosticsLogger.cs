// ============================================================================//                   The Apache Software License, Version 1.1// ============================================================================// // Copyright (C) 2002-2003 The Apache Software Foundation. All rights reserved.// // Redistribution and use in source and binary forms, with or without modifica-// tion, are permitted provided that the following conditions are met:// // 1. Redistributions of  source code must  retain the above copyright  notice,//    this list of conditions and the following disclaimer.// // 2. Redistributions in binary form must reproduce the above copyright notice,//    this list of conditions and the following disclaimer in the documentation//    and/or other materials provided with the distribution.// // 3. The end-user documentation included with the redistribution, if any, must//    include  the following  acknowledgment:  "This product includes  software//    developed  by the  Apache Software Foundation  (http://www.apache.org/)."//    Alternately, this  acknowledgment may  appear in the software itself,  if//    and wherever such third-party acknowledgments normally appear.// // 4. The names "Jakarta", "Avalon", "Excalibur" and "Apache Software Foundation"  //    must not be used to endorse or promote products derived from this  software //    without  prior written permission. For written permission, please contact //    apache@apache.org.// // 5. Products  derived from this software may not  be called "Apache", nor may//    "Apache" appear  in their name,  without prior written permission  of the//    Apache Software Foundation.// // THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND// FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE// APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,// INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-// DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS// OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON// ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT// (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.// // This software  consists of voluntary contributions made  by many individuals// on  behalf of the Apache Software  Foundation. For more  information on the // Apache Software Foundation, please see <http://www.apache.org/>.// ============================================================================namespace Apache.Avalon.Framework{	using System;	using System.Diagnostics; 	/// <summary>	/// The Logger using standart Diagnostics namespace.	/// </summary>	public class DiagnosticsLogger : ILogger	{		EventLog m_logger;		/// <summary>		/// Creates a logger based on <see cref="System.Diagnostics.EventLog"/>.		/// </summary>		/// <param name="logName"><see cref="EventLog.Log"/></param>		public DiagnosticsLogger(string logName)		{			m_logger = new EventLog(logName);		}		/// <summary>		/// Creates a logger based on <see cref="System.Diagnostics.EventLog"/>.		/// </summary>		/// <param name="logName"><see cref="EventLog.Log"/></param>		/// <param name="source"><see cref="EventLog.Source"/></param>		public DiagnosticsLogger(string logName, string source)		{			// Create the source, if it does not already exist.			if(!EventLog.SourceExists(source))			{				EventLog.CreateEventSource(source, logName);			}			m_logger = new EventLog(logName); 		}		/// <summary>		/// Creates a logger based on <see cref="System.Diagnostics.EventLog"/>.		/// </summary>		/// <param name="logName"><see cref="EventLog.Log"/></param>		/// <param name="machineName"><see cref="EventLog.MachineName"/></param>		/// <param name="source"><see cref="EventLog.Source"/></param>		public DiagnosticsLogger(string logName, string machineName, string source)		{			// Create the source, if it does not already exist.			if(!EventLog.SourceExists(source, machineName))			{				EventLog.CreateEventSource(source, logName, machineName);			}  						m_logger = new EventLog(logName, machineName, source);		}		/// <summary>		/// Logs a debug message.		/// </summary>		/// <param name="message">The Message</param>		public void Debug(string message )		{			Debug(message, null as Exception);		}		/// <summary>		/// Logs a debug message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		public void Debug(string message, Exception exception)		{			System.Diagnostics.Debug.WriteLine(string.Format("message: {0}", message));						if (exception != null)			{				System.Diagnostics.Debug.WriteLine(string.Format("exception: {0}", exception));			}		}		/// <summary>		/// Logs a debug message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		public void Debug( string format, params Object[] args )		{			Debug(String.Format(format, args), null as Exception);		}		/// <summary>		/// Debug level is always enabled.		/// </summary>		/// <value>The Value is always True</value> 		public bool IsDebugEnabled		{			get			{				return true;			}		}		/// <summary>		/// Logs an info message.		/// </summary>		/// <param name="message">The Message</param>		public void Info(string message )		{			Info(message, null as Exception);		}		/// <summary>		/// Logs an info message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		public void Info(string message, Exception exception)		{			Log(message, exception, EventLogEntryType.Information);  		}		/// <summary>		/// Logs an info message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		public void Info( string format, params Object[] args )		{			Info(String.Format(format, args));		}		/// <summary>		/// Information level is always enabled.		/// </summary>		/// <value>The Value is always True</value> 		public bool IsInfoEnabled		{			get			{				return true;			}		}		/// <summary>		/// Logs a warn message.		/// </summary>		/// <param name="message">The Message</param>		public void Warn(string message )		{			Warn(message, null as Exception);		}		/// <summary>		/// Logs a warn message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		public void Warn(string message, Exception exception)		{			Log(message, exception, EventLogEntryType.Warning); 		}		/// <summary>		/// Logs a warn message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		public void Warn( string format, params Object[] args )		{			Warn(String.Format(format, args));		}		/// <summary>		/// Warning level is always enabled.		/// </summary>		/// <value>The Value is always True</value> 		public bool IsWarnEnabled		{			get			{				return true;			}		}		/// <summary>		/// Logs an error message.		/// </summary>		/// <param name="message">The Message</param>		public void Error(string message )		{			Error(message, null as Exception);		}		/// <summary>		/// Logs an error message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		public void Error(string message, Exception exception)		{			Log(message, exception, EventLogEntryType.Error);		}		/// <summary>		/// Logs an error message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		public void Error( string format, params Object[] args )		{			Error(String.Format(format, args));		}		/// <summary>		/// Error level is always enabled.		/// </summary>		/// <value>The Value is always True</value> 		public bool IsErrorEnabled		{			get			{				return true;			}		}		/// <summary>		/// Logs a fatal error message.		/// </summary>		/// <param name="message">The Message</param>		public void FatalError(string message )		{			FatalError(message, null as Exception);		}		/// <summary>		/// Logs a fatal error message.		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		public void FatalError(string message, Exception exception)		{			Log(message, exception, EventLogEntryType.Error);		}		/// <summary>		/// Logs a fatal error message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		public void FatalError( string format, params Object[] args )		{			FatalError(String.Format(format, args));		}		/// <summary>		/// FatalError level is always enabled.		/// </summary>		/// <value>The Value is always True</value> 		public bool IsFatalErrorEnabled		{			get 			{				return true; 			}		}		/// <summary>		/// Create a new logger with the same Log, MachineName and Source properties.		/// </summary>		/// <param name="name">Ignored, cause a source can only be registered to one log at a time.</param>		/// <returns>The New ILogger instance.</returns> 		/// <exception cref="System.ArgumentException">If the name has an empty element name.</exception>		public ILogger CreateChildLogger(string name )		{			return new DiagnosticsLogger(m_logger.Log, m_logger.MachineName, m_logger.Source);  		}		private void Log(string message, Exception exception, EventLogEntryType type)		{			string result;			if (exception == null)			{				result = string.Format("message: {0}", message);			}			else			{				result = string.Format("message: {0}; exception: {1}", message, exception);			}						m_logger.WriteEntry(result, type);		}	}}