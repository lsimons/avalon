// ============================================================================//                   The Apache Software License, Version 1.1// ============================================================================// // Copyright (C) 2002-2003 The Apache Software Foundation. All rights reserved.// // Redistribution and use in source and binary forms, with or without modifica-// tion, are permitted provided that the following conditions are met:// // 1. Redistributions of  source code must  retain the above copyright  notice,//    this list of conditions and the following disclaimer.// // 2. Redistributions in binary form must reproduce the above copyright notice,//    this list of conditions and the following disclaimer in the documentation//    and/or other materials provided with the distribution.// // 3. The end-user documentation included with the redistribution, if any, must//    include  the following  acknowledgment:  "This product includes  software//    developed  by the  Apache Software Foundation  (http://www.apache.org/)."//    Alternately, this  acknowledgment may  appear in the software itself,  if//    and wherever such third-party acknowledgments normally appear.// // 4. The names "Jakarta", "Avalon", "Excalibur" and "Apache Software Foundation"  //    must not be used to endorse or promote products derived from this  software //    without  prior written permission. For written permission, please contact //    apache@apache.org.// // 5. Products  derived from this software may not  be called "Apache", nor may//    "Apache" appear  in their name,  without prior written permission  of the//    Apache Software Foundation.// // THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND// FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE// APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,// INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-// DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS// OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON// ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT// (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.// // This software  consists of voluntary contributions made  by many individuals// on  behalf of the Apache Software  Foundation. For more  information on the // Apache Software Foundation, please see <http://www.apache.org/>.// ============================================================================namespace Apache.Avalon.Framework{	using System;
	/// <summary>	///	The Logger sending everything to the standard output streams.	/// This is mainly for the cases when you have a utility that	/// does not have a logger to supply.	/// </summary>	public class ConsoleLogger: ILogger	{		/// <summary>		///  Typecode for debugging messages. 		/// </summary>		public const int LEVEL_DEBUG = 0;		/// <summary>		///  String name for debug level messages.		/// </summary>		public const string LEVEL_DEBUG_NAME = "DEBUG";		/// <summary>		/// Typecode for informational messages. 		/// </summary>		public const int LEVEL_INFO = 1;		/// <summary>		///  String name for info level messages.		/// </summary>		public const string LEVEL_INFO_NAME = "INFO";		/// <summary>		/// Typecode for warning messages.		/// </summary>		public const int LEVEL_WARN = 2;		/// <summary>		///  String name for warn level messages.		/// </summary>		public const string LEVEL_WARN_NAME = "WARN";		/// <summary>		/// Typecode for error messages.		/// </summary>		public const int LEVEL_ERROR = 3;		/// <summary>		///  String name for error level messages.		/// </summary>		public const string LEVEL_ERROR_NAME = "ERROR";		/// <summary>		/// Typecode for fatal error messages.		/// </summary>		public const int LEVEL_FATAL = 4;		/// <summary>		///  String name for fatal error level messages.		/// </summary>		public const string LEVEL_FATAL_NAME = "FATAL ERROR";		/// <summary>		/// Typecode for disabled log levels.		/// </summary>		public const int LEVEL_DISABLED = 5;		private int logLevel;		/// <summary>		/// Creates a new ConsoleLogger with the priority set to DEBUG.		/// </summary>		public ConsoleLogger(): this(LEVEL_DEBUG)		{		}		/// <summary>		/// Creates a new ConsoleLogger.		/// </summary>		/// <param name="logLevel">The Log level typecode.</param>		public ConsoleLogger(int logLevel)		{			this.logLevel = logLevel;		}		/// <summary>		/// Logs a debug message.		/// </summary>		/// <param name="message">The Message</param>		public void Debug(string message)		{			Debug(message, null as Exception);		}		/// <summary>		/// Logs a debug message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		public void Debug(string message, Exception exception)		{			Log(ConsoleLogger.LEVEL_DEBUG, ConsoleLogger.LEVEL_DEBUG_NAME, message, exception); 		}		/// <summary>		/// Logs a debug message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		public void Debug( string format, params Object[] args )		{			Debug(String.Format(format, args));		}		/// <summary>		/// Determines if messages of priority "debug" will be logged.		/// </summary>		/// <value>True if "debug" messages will be logged.</value> 		public bool IsDebugEnabled		{			get			{				return (logLevel <= LEVEL_DEBUG);			}		}		/// <summary>		/// Logs an info message.		/// </summary>		/// <param name="message">The Message</param>		public void Info( string message )		{			Info(message, null as Exception);		}		/// <summary>		/// Logs an info message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		public void Info( string message, Exception exception)		{			Log(ConsoleLogger.LEVEL_INFO, ConsoleLogger.LEVEL_INFO_NAME, message, exception); 		}		/// <summary>		/// Logs an info message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		public void Info( string format, params Object[] args )		{			Info(String.Format(format, args));		}		/// <summary>		/// Determines if messages of priority "info" will be logged.		/// </summary>		/// <value>True if "info" messages will be logged.</value>		public bool IsInfoEnabled		{			get			{				return (logLevel <= LEVEL_INFO);			}		}		/// <summary>		/// Logs a warn message.		/// </summary>		/// <param name="message">The Message</param>		public void Warn(string message )		{			Warn(message, null as Exception);		}		/// <summary>		/// Logs a warn message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		public void Warn(string message, Exception exception)		{			Log(ConsoleLogger.LEVEL_WARN, ConsoleLogger.LEVEL_WARN_NAME, message, exception); 		}		/// <summary>		/// Logs an warn message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		public void Warn( string format, params Object[] args )		{			Warn(String.Format(format, args));		}		/// <summary>		/// Determines if messages of priority "warn" will be logged.		/// </summary>		/// <value>True if "warn" messages will be logged.</value>		public bool IsWarnEnabled		{			get			{				return (logLevel <= LEVEL_WARN);			}		}		/// <summary>		/// Logs an error message.		/// </summary>		/// <param name="message">The Message</param>		public void Error(string message )		{			Error(message, null as Exception);		}		/// <summary>		/// Logs an error message. 		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		public void Error(string message, Exception exception)		{			Log(ConsoleLogger.LEVEL_ERROR, ConsoleLogger.LEVEL_ERROR_NAME, message, exception); 		}
		/// <summary>		/// Logs an error message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		public void Error( string format, params Object[] args )		{			Error(String.Format(format, args));		}		/// <summary>		/// Determines if messages of priority "error" will be logged.		/// </summary>		/// <value>True if "error" messages will be logged.</value>		public bool IsErrorEnabled		{			get			{				return (logLevel <= LEVEL_ERROR);			}		}		/// <summary>		/// Logs a fatal error message.		/// </summary>		/// <param name="message">The Message</param>		public void FatalError(string message )		{			FatalError(message, null as Exception);		}		/// <summary>		/// Logs a fatal error message.		/// </summary>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		public void FatalError(string message, Exception exception)		{			Log(ConsoleLogger.LEVEL_FATAL, ConsoleLogger.LEVEL_FATAL_NAME, message, exception); 		}		/// <summary>		/// Logs a fatal error message.		/// </summary>		/// <param name="format">Message format</param>		/// <param name="args">Array of objects to write using format</param>		public void FatalError( string format, params Object[] args )		{			FatalError(String.Format(format, args));		}		/// <summary>		/// Determines if messages of priority "fatalError" will be logged.		/// </summary>		/// <value>True if "fatalError" messages will be logged.</value>		public bool IsFatalErrorEnabled		{			get 			{				return (logLevel <= LEVEL_FATAL); 			}		}		/// <summary>		/// A Common method to log.		/// </summary>		/// <param name="level">The level of logging</param>		/// <param name="levelName">The Level name</param>		/// <param name="message">The Message</param>		/// <param name="exception">The Exception</param>		protected void Log(int level, string levelName, string message, Exception exception) 		{			if(logLevel <= level)			{				Console.Out.WriteLine(string.Format("[{0}] {1}", levelName, message));								if(exception != null)				{					Console.Out.WriteLine(exception.StackTrace);				}			}		}		/// <summary>		///	Just returns this logger (<c>ConsoleLogger</c> is not hierarchical).		/// </summary>		/// <param name="name">Ignored</param>		/// <returns>This ILogger instance.</returns> 		public ILogger CreateChildLogger(string name )		{			return this;		}	}}