// ============================================================================//                   The Apache Software License, Version 1.1// ============================================================================// // Copyright (C) 2002-2003 The Apache Software Foundation. All rights reserved.// // Redistribution and use in source and binary forms, with or without modifica-// tion, are permitted provided that the following conditions are met:// // 1. Redistributions of  source code must  retain the above copyright  notice,//    this list of conditions and the following disclaimer.// // 2. Redistributions in binary form must reproduce the above copyright notice,//    this list of conditions and the following disclaimer in the documentation//    and/or other materials provided with the distribution.// // 3. The end-user documentation included with the redistribution, if any, must//    include  the following  acknowledgment:  "This product includes  software//    developed  by the  Apache Software Foundation  (http://www.apache.org/)."//    Alternately, this  acknowledgment may  appear in the software itself,  if//    and wherever such third-party acknowledgments normally appear.// // 4. The names "Jakarta", "Avalon", "Excalibur" and "Apache Software Foundation"  //    must not be used to endorse or promote products derived from this  software //    without  prior written permission. For written permission, please contact //    apache@apache.org.// // 5. Products  derived from this software may not  be called "Apache", nor may//    "Apache" appear  in their name,  without prior written permission  of the//    Apache Software Foundation.// // THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND// FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE// APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,// INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-// DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS// OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON// ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT// (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.// // This software  consists of voluntary contributions made  by many individuals// on  behalf of the Apache Software  Foundation. For more  information on the // Apache Software Foundation, please see <http://www.apache.org/>.// ============================================================================
namespace Apache.Avalon.Framework{	using System;
	/// <summary>	///	The Null Logger class.  This is useful for implementations where you need	/// to provide a logger to a utility class, but do not want any output from it.	/// It also helps when you have a utility that does not have a logger to supply.	/// </summary>	public class NullLogger: ILogger	{		/// <summary>		/// Creates a new <c>NullLogger</c>.		/// </summary>		public NullLogger()		{		}
		/// <summary>		/// No-op.		/// </summary>		/// <param name="message">Ignored</param>		public void Debug(string message )		{		}		/// <summary>		/// No-op.		/// </summary>		/// <param name="message">Ignored</param>		/// <param name="exception">Ignored</param>		public void Debug(string message, Exception exception)		{		}		/// <summary>		/// No-op.		/// </summary>		/// <param name="format">Ignored</param>		/// <param name="args">Ignored</param>		public void Debug( string format, params Object[] args )		{		}		/// <summary>		/// No-op.		/// </summary>		/// <value>false</value> 		public bool IsDebugEnabled		{			get			{				return false;			}		}		/// <summary>		/// No-op.		/// </summary>		/// <param name="message">Ignored</param>		public void Info( string message )		{		}		/// <summary>		/// No-op.		/// </summary>		/// <param name="message">Ignored</param>		/// <param name="exception">Ignored</param>		public void Info( string message, Exception exception)		{		}		/// <summary>		/// No-op.		/// </summary>		/// <param name="format">Ignored</param>		/// <param name="args">Ignored</param>		public void Info( string format, params Object[] args )		{		}		/// <summary>		/// No-op.		/// </summary>		/// <value>false</value> 		public bool IsInfoEnabled		{			get			{				return false;			}		}		/// <summary>		/// No-op.		/// </summary>		/// <param name="message">Ignored</param>		public void Warn(string message )		{		}		/// <summary>		/// No-op.		/// </summary>		/// <param name="message">Ignored</param>		/// <param name="exception">Ignored</param>		public void Warn(string message, Exception exception)		{		}		/// <summary>		/// No-op.		/// </summary>		/// <param name="format">Ignored</param>		/// <param name="args">Ignored</param>		public void Warn( string format, params Object[] args )		{		}		/// <summary>		/// No-op.		/// </summary>		/// <value>false</value> 		public bool IsWarnEnabled		{			get			{				return false;			}		}		/// <summary>		/// No-op.		/// </summary>		/// <param name="message">Ignored</param>		public void Error(string message )		{		}
		/// <summary>		/// No-op.		/// </summary>		/// <param name="message">Ignored</param>		/// <param name="exception">Ignored</param>		public void Error(string message, Exception exception)		{		}		/// <summary>		/// No-op.		/// </summary>		/// <param name="format">Ignored</param>		/// <param name="args">Ignored</param>		public void Error( string format, params Object[] args )		{		}		/// <summary>		/// No-op.		/// </summary>		/// <value>false</value> 		public bool IsErrorEnabled		{			get			{				return false;			}		}		/// <summary>		/// No-op.		/// </summary>		/// <param name="message">Ignored</param>		public void FatalError(string message )		{		}		/// <summary>		/// No-op.		/// </summary>		/// <param name="message">Ignored</param>		/// <param name="exception">Ignored</param>		public void FatalError(string message, Exception exception)		{		}
		/// <summary>		/// No-op.		/// </summary>		/// <param name="format">Ignored</param>		/// <param name="args">Ignored</param>		public void FatalError( string format, params Object[] args )		{		}		/// <summary>		/// No-op.		/// </summary>		/// <value>false</value> 		public bool IsFatalErrorEnabled		{			get 			{				return false; 			}		}		/// <summary>		/// Returns this <c>NullLogger</c>.		/// </summary>		/// <param name="name">Ignored</param>		/// <returns>This ILogger instance.</returns> 		public ILogger CreateChildLogger(string name )		{			return this;		}	}}