<?xml version="1.0"?>

<project default="main" basedir=".">

<!-- ==========================================================================================
	PROPERTY SETUP
     ========================================================================================== -->

	<!-- set up properties -->
	<property file="${user.home}/build.properties"/>
	<property file="${user.home}/.ant.properties"/>
	<property file="${basedir}/ant.properties"/>
	<property file="${basedir}/../ant.properties"/>
	<property file="${basedir}/default.properties"/>
	<property file="${basedir}/../default.properties"/>
	<property file="${basedir}/../cocoon.properties"/>


  <!-- Set the installation variables for Cornerstone/Phoenix -->
  <property name="phoenix.home" value="../../jakarta-avalon-phoenix/dist"/>
  <property name="install.dir" value="${phoenix.home}/apps"/>

  <!-- Set the properties for intermediate directory -->
  <property name="build.dir" value="build"/>
  <property name="build.lib" value="${build.dir}/lib"/>
  <property name="build.xdoclet" value="${build.dir}/xdoclet"/>
  <property name="build.src" value="${build.dir}/src"/>  
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.javadocs" value="${build.dir}/javadocs"/>  
  <property name="build.docs" value="${build.dir}/docs"/>
  <property name="build.context" value="${build.dir}/documentation"/>  
  <property name="build.xdocs" value="${build.context}/content/xdocs"/>
  
  <!-- Sevak specific properties for building -->
  <property name="build.reports" value="${build.dir}/reports"/>
  <property name="build.demoClasses" value="${build.dir}/demoClasses"/> 
  <property name="build.demoXdoclet" value="${build.dir}/demoXdoclet"/>


  <!-- Set the properties for source directories -->
  <property name="src.dir" value="src"/>
  <property name="java.dir" value="${src.dir}/java"/>
  <property name="manifest.dir" value="${src.dir}/manifest"/>
  <property name="conf.dir" value="${src.dir}/conf"/>
  <property name="context.dir" value="../../jakarta-avalon/src/documentation"/>  
  <property name="xdocs.dir" value="${src.dir}/xdocs"/>  
  <property name="tools.dir" location="../../jakarta-avalon/tools"/>
   
  <property name="junit.jar" value="${tools.dir}/lib/junit-3.7.jar"/>
  <property name="tools.jar" value="${java.home}/../lib/tools.jar"/>  
  <property name="dist.base" value="dist"/>
  <property name="do.checkstyle" value="true"/>

  <property name="lib.dir" value="lib"/>
  <property name="test.dir" value="${src.dir}/test"/>
  <property name="demo.dir" value="${src.dir}/demo"/>
  <property name="java.demo.dir" value="${demo.dir}/java"/>
  <property name="conf.demo.dir" value="${demo.dir}/conf"/>  
  
  <!-- Tomcat Jars -->
  <!-- <property name="catalina-version" value="4.0.7"/> -->
  <property name="catalina-version" value="4.1.7"/>
  <property name="catalina-dir-suffix" value="-beta"/>
  
  <property name="tomcat.jars.dir" value="${lib.dir}/tomcat-jars"/>
  


  <path id="project.class.path">
    <pathelement path="${java.class.path}" />
    <pathelement path="${build.classes}" />
    <fileset dir="../common/lib">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${tomcat.jars.dir}">
      <include name="*.jar" />
    </fileset>    
  </path>

  <path id="tools.class.path">
    <pathelement location="${junit.jar}"/>
    <pathelement location="${tools.jar}"/>
    <fileset dir="${tools.dir}/lib"/>
    <fileset dir="${tools.dir}/ext"/>
  </path>

  <path id="test.class.path">
    <fileset dir="../common/lib">
      <include name="**/*.jar" />
    </fileset>
    <pathelement path="${build.lib}/sevak.jar"/>
  </path>
  
  <taskdef name="sar" classname="org.apache.avalon.phoenix.tools.tasks.Sar">
    <classpath refid="project.class.path" />
  </taskdef>

  <!-- Help on usage -->
  <target name="help" depends="usage"/>
  <target name="usage">
    <echo message="Run ant -projecthelp to get a list of targets to run"/>
  </target>

  <!-- Setup the filters -->
  <target name="setup-filters">
    <filter token="Name" value="Avalon Apps - ${Name}"/>
    <filter token="name" value="${name}"/>
    <filter token="version" value="${version}"/>
    <filter token="year" value="${year}"/>
    <filter token="status" value="${status}"/>
    <filter token="release" value="${release}"/>
    <filter token="short-version" value="${short.version}"/>

    <property name="avalon.base" value="http://jakarta.apache.org/avalon"/>
    <property name="framework.base" value="http://jakarta.apache.org/avalon/framework"/>
    <property name="phoenix.base" value="http://jakarta.apache.org/avalon/phoenix"/>
    <property name="cornerstone.base" value="http://jakarta.apache.org/avalon/cornerstone"/>
    <property name="logkit.base" value="http://jakarta.apache.org/avalon/logkit"/>
    <property name="testlet.base" value="http://jakarta.apache.org/avalon/testlet"/>

    <filter token="year" value="${year}"/>
    <filter token="AVALON_BASE" value="${avalon.base}"/>
    <filter token="FRAMEWORK_BASE" value="${framework.base}"/>
    <filter token="PHOENIX_BASE" value="${phoenix.base}"/>
    <filter token="CORNERSTONE_BASE" value="${cornerstone.base}"/>
    <filter token="LOGKIT_BASE" value="${logkit.base}"/>
    <filter token="TESTLET_BASE" value="${testlet.base}"/>      
    
  </target>

  <!-- Check Presense Of Tomcat 4.0 jars -->
  <target name="checkCatalinaJars">
    <condition property="catalina.present">
      <available file="catalina-download/catalina-${catalina-version}.zip"/>
    </condition>

  </target>

  <!-- checking for avalon-framework.jar too here -->
  <target name="checkFrameworkClass">
    <available classname="org.apache.avalon.framework.logger.Logger" classpathref="project.class.path" property="framework.present"/>    
  </target>

  <target name="checkFramework" depends="checkFrameworkClass" unless="framework.present">
    <echo>**********************************</echo>
    <echo>***** Please set the        ******</echo>
    <echo>****${avalon-framework.jar} ******</echo>
    <echo>**********************************</echo>   
    <fail message="Framework  needed. See above."/>

  </target>

  <target name="checkNeccesaryJars" depends="checkFramework,checkCatalinaJars" unless="catalina.present">
    <echo>**********************************</echo>
    <echo>***** Please execute target ******</echo>
    <echo>****     'get-catalina '    ******</echo>
    <echo>****  to retrieve Tomcat4.0 ******</echo>
    <echo>****  jars or place the jars *****</echo>
    <echo>****  in ${tomcat.jars.dir} dir  *****</echo>
    <echo>**********************************</echo>   
    
    <fail message="Catalina needed. See above."/>

  </target>

  <!-- Get catalina jars from apache repository -->
  <target name="get-catalina">
 
    <mkdir  dir="catalina-download"/>
    <mkdir dir="${lib.dir}"/>
    <mkdir dir="${tomcat.jars.dir}"/>

    <get src="http://jakarta.apache.org/builds/jakarta-tomcat-4.0/release/v${catalina-version}${catalina-dir-suffix}/bin/jakarta-tomcat-${catalina-version}.zip" 
    dest="catalina-download/catalina-${catalina-version}.zip" 
    verbose="true"
    usetimestamp="true"/>
    
    <!-- Get the Jakarta-COMMONS jar files which do NOT come along with the tomcat distribution -->

    <get src="http://jakarta.apache.org/builds/jakarta-tomcat-connectors/coyote/release/v1.0-rc2/commons-logging.jar"
        dest="${tomcat.jars.dir}/commons-logging.jar"
        verbose="true"
        usetimestamp="true"
    />

    <get src="http://jakarta.apache.org/builds/jakarta-tomcat-connectors/coyote/release/v1.0-rc2/tomcat-coyote.jar"
        dest="${tomcat.jars.dir}/tomcat-coyote.jar"
        verbose="true"
        usetimestamp="true"
    />

    <get src="http://jakarta.apache.org/builds/jakarta-tomcat-connectors/coyote/release/v1.0-rc2/tomcat-http11.jar"
        dest="${tomcat.jars.dir}/tomcat-http11.jar"
        verbose="true"
        usetimestamp="true"
    />

    <get src="http://jakarta.apache.org/builds/jakarta-tomcat-connectors/coyote/release/v1.0-rc2/tomcat-util.jar"
        dest="${tomcat.jars.dir}/tomcat-util.jar"
        verbose="true"
        usetimestamp="true"
    />


    <unzip src="catalina-download/catalina-${catalina-version}.zip" dest="catalina-download" />
    
    <copy todir="${tomcat.jars.dir}" flatten="true">
      <fileset dir="catalina-download/jakarta-tomcat-${catalina-version}">
        <include  name="**/bin/*.jar"/>
        <include  name="**/lib/*.jar"/>
      </fileset>
    </copy>   
    
  </target>
 
  <!-- prepare -->
  <target name="prepare" depends="checkNeccesaryJars" >
    <mkdir dir="${lib.dir}"/>
  </target>

  <!-- Compiles project -->
  <target name="compile" depends="prepare" >

    <mkdir dir="${build.classes}"/>

    <javac srcdir="${java.dir}"
           destdir="${build.classes}"
           debug="${build.debug}"
           optimize="${build.optimize}"
           deprecation="${build.deprecation}">
      <classpath refid="project.class.path" />
    </javac>

    <copy todir="${build.classes}">
      <fileset dir="${java.dir}">
        <exclude name="**/test/**"/>
        <exclude name="**/*.java"/>
      </fileset>
    </copy>

  </target>

  <target name="test-xdoclet">  
    <available classname="xdoclet.XDocletMain" classpathref="project.class.path" property="xdoclet.present"/>    
  </target>

  <!-- Make .xinfo and manifest automatically for blocks -->
  <target name="phoenix-xdoclet" depends="compile" if="xdoclet.present">
  
    <mkdir dir="${build.xdoclet}"/>
  
    <taskdef name="phoenix-blocks"
             classname="org.apache.avalon.phoenix.tools.xdoclet.PhoenixXDoclet"
             classpathref="project.class.path"/>

    <phoenix-blocks
        destdir="${build.xdoclet}"
        classpathref="project.class.path">
      <fileset dir="${java.dir}">
        <include name="**/*.java" />
      </fileset>
      <blockinfo/>
      <manifest manifestFile="manifest.mf" />
    </phoenix-blocks>

  </target>

  <!-- Make .xinfo and manifest automatically for blocks -->
  <target name="no-phoenix-xdoclet" depends="compile" unless="xdoclet.present">
  
    <mkdir dir="${build.xdoclet}"/>
  
    <unzip src="${src.dir}/generated-by-xdoclet.zip" dest="${build.xdoclet}" />

  </target>


  <!-- Jars up project -->
  <target name="jars" depends="test-xdoclet, phoenix-xdoclet, no-phoenix-xdoclet">

    <mkdir dir="${build.lib}"/>

    <jar jarfile="${build.lib}/${name}.jar"
         manifest="${build.xdoclet}/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/apache/avalon/apps/sevak/**"/>
      </fileset>
      <fileset dir="${build.xdoclet}">
        <include name="**/*.xinfo"/>
      </fileset>
    </jar>

  </target>

  <!-- Jars project for Merlin -->
  <target name="merlin" depends="compile" >

    <mkdir dir="${build.lib}"/>
    <jar jarfile="${build.lib}/tomcat-service-1.0.jar"
         manifest="${src.dir}/conf/manifest.mf">
      <fileset dir="${build.classes}">
        <include name="org/apache/avalon/apps/sevak/**"/>
      </fileset>
    </jar>

  </target>


  <target name="main" depends="sars" description="Default target to generate build products minus docs"/> 
  <target name="all" depends="main,docs" description="Generate build products including docs" /> 
 
  <target name="sars" depends="jars">

    <sar sarfile="${build.lib}/avalon-${name}.sar"
         config="${conf.dir}/${name}-config.xml"
         environment="${conf.dir}/${name}-environment.xml"
         assembly="${conf.dir}/${name}-assembly.xml" >

      <lib dir="${build.lib}/">
        <include name="*.jar"/>
      </lib>

      <lib dir="../common/lib">
        <include name="cornerstone.jar"/>
      </lib>
    
      <lib dir="${tomcat.jars.dir}">
        <include name="*.jar"/>
      </lib>

      <!-- 

      <lib dir="${java.home}/../lib/">
        <include name="tools.jar"/>
      </lib>
      
      -->
    </sar>
    
    <mkdir dir="dist"/>

    <copy todir="dist">
      <fileset dir="${build.lib}">
        <include name="**"/>
      </fileset>
    </copy>    

  </target>

    
  <!-- CheckStyle tasks-->
  <target name="checkstyle" if="do.checkstyle" description="Checkstyle">

        <!-- this invocation of checkstyle requires that checkstyle be downloaded and setup -->
        <!-- thats why you are required to define do.checkstyle property to generate the report -->
        <mkdir dir="${build.dir}"/>
        <taskdef name="checkstyle"
            classname="com.puppycrawl.tools.checkstyle.CheckStyleTask">
            <classpath refid="project.class.path"/>
        </taskdef>
        <checkstyle
            lcurlyType="nl"
            lcurlyMethod="nl"
            lcurlyOther="nl"
            rcurly="ignore"
            allowProtected="false"
            allowPackage="false"
            allowNoAuthor="false"
            maxLineLen="100"
            maxMethodLen="100"
            maxConstructorLen="100"
            memberPattern="^m_[a-z][a-zA-Z0-9]*$"
            staticPattern="^c_[a-z][a-zA-Z0-9]*$"
            constPattern="(^c_[a-z][a-zA-Z0-9]*$)|([A-Z_]*$)"
            ignoreImportLen="true"
            allowTabs="false"
            javadocScope="protected"
            ignoreWhitespace="true"
            cacheFile="checkstyle.cache"
            failOnViolation="false"
            ignoreCastWhitespace="true">
            <fileset dir="${java.dir}">
                <include name="**/*.java"/>
            </fileset>
            <formatter type="plain"/>
            <formatter type="xml" toFile="${build.dir}/checkstyle-results.xml"/>
        </checkstyle>
    </target>

    <target name="checkstyle-report"
        depends="checkstyle"
        if="do.checkstyle"
        description="Generate Checkstyle Report">

        <mkdir dir="${build.reports}/checkstyle"/>
        <property name="checkstyle.pathhack" location="."/>
        <style style="${tools.dir}/etc/checkstyle-frames.xsl" in="${build.dir}/checkstyle-results.xml"
            out="${build.reports}/checkstyle/delete-me.html">
            <param name="pathhack" expression="${checkstyle.pathhack}"/>
        </style>

    </target>

  
  <!-- Performs unit tests -->
  <target name="check" depends="compile" description="Perform any built in tests">
  </target>

  <!-- Completely build all dists -->
  <target name="dist" depends="sars" description="Generates the distribution">

    <property name="dist.name" value="${Name}-${version}"/>

    <mkdir dir="${dist.base}"/>

    <antcall target="bin-dist" inheritAll="false">
      <param name="bin.dist.dir" value="${dist.name}" />
    </antcall>

    <zip zipfile="${dist.base}/${dist.name}-bin.zip"
         basedir="${dist.name}/.."
         includes="${dist.name}/**"/>

    <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-bin.tar">
      <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
        <include name="${dist.name}/**"/>
      </tarfileset>
    </tar>

    <gzip zipfile="${dist.base}/${dist.name}-bin.tar.gz"
          src="${dist.base}/${dist.name}-bin.tar"/>

    <delete file="${dist.base}/${dist.name}-bin.tar"/>
    <delete dir="${dist.name}" />

    <antcall target="src-dist" inheritAll="false">
      <param name="src.dist.dir" value="${dist.name}" />
    </antcall>

    <zip zipfile="${dist.base}/${dist.name}-src.zip"
         basedir="${dist.name}/.."
         includes="${dist.name}/**">
      <fileset dir="..">
        <include name="common/lib/avalon-*"/>
        <include name="common/lib/cornerstone.jar"/>
        <include name="common/lib/phoenix-*"/>
        <include name="common/lib/excalibur-i18n*"/>
      </fileset>
    </zip>

    <tar longfile="gnu" tarfile="${dist.base}/${dist.name}-src.tar" >
      <tarfileset dir="${dist.name}/.." mode="755" username="avalon" group="avalon">
        <include name="${dist.name}/build.sh"/>
      </tarfileset>
      <tarfileset dir="${dist.name}/.." username="avalon" group="avalon">
        <include name="${dist.name}/**"/>
        <exclude name="${dist.name}/build.sh"/>
      </tarfileset>
      <tarfileset dir=".." username="avalon" group="avalon">
        <include name="common/lib/avalon-*"/>
        <include name="common/lib/cornerstone.jar"/>
        <include name="common/lib/phoenix-*"/>
        <include name="common/lib/excalibur-i18n*"/>
      </tarfileset>      
    </tar>

    <gzip zipfile="${dist.base}/${dist.name}-src.tar.gz"
          src="${dist.base}/${dist.name}-src.tar"/>
    <delete file="${dist.base}/${dist.name}-src.tar"/>
    
    <delete dir="${dist.name}" />

  </target>

  <!-- Creates all the .sar files -->  
  <target name="bin-dist" depends="all" >

    <!-- bin.dist.dir usually set before this target is called -->
    <property name="bin.dist.dir" value="dist"/>
    <property name="bin.dist.lib" value="${bin.dist.dir}/lib"/>
    <property name="bin.dist.docs" value="${bin.dist.dir}/docs"/>

    <mkdir dir="${bin.dist.docs}"/>
    <copy todir="${bin.dist.docs}">
      <fileset dir="${build.docs}"/>
    </copy>

    <copy file="${build.lib}/avalon-${name}.sar" tofile="${bin.dist.dir}/avalon-${name}-${version}.sar"/>

    <chmod dir="${bin.dist.dir}" perm="go-rwx" />
  </target>

  <target name="src-dist" depends="docs" >
    <!-- src.dist.dir has usually already been set -->
    <property name="src.dist.dir" value="dist-src"/>
    <property name="src.dist.src" value="${src.dist.dir}/src"/>
    <property name="src.dist.docs" value="${src.dist.dir}/docs"/>

    <mkdir dir="${src.dist.docs}"/>

    <copy todir="${src.dist.docs}">
      <fileset dir="${build.docs}"/>
    </copy>

    <copy todir="${src.dist.src}">
      <fileset dir="${src.dir}"/>
    </copy>
    
    <zip zipfile="${src.dist.src}/generated-by-xdoclet.zip"
         basedir="${build.xdoclet}"/> 
         
    <copy todir="${src.dist.dir}">
      <fileset dir=".">
        <include name="build.xml"/>
      </fileset>
    </copy>
    
    <mkdir dir="${src.dist.dir}/lib"/>
    <copy todir="${src.dist.dir}/lib">
      <fileset dir="lib">
        <include name="**"/>
      </fileset>
    </copy>
    
    <fixcrlf srcdir="${src.dist.src}/java" includes="**/*.java" eol="lf"/>

    <chmod dir="${src.dist.dir}" perm="go-rwx" />
  </target>

  <target name="install" depends="main" description="Installs into Phoenix" > 
    <!-- <fail message="install.dir not specified." unless="install.dir"/> -->
    <echo message="Installing to ${install.dir}" />
    <delete dir="${install.dir}/${name}" />
    <copy file="${build.lib}/avalon-${name}.sar" todir="${install.dir}" />
  </target>

  <target name="uninstall" description="Uninstalls from Phoenix">

    <!-- <fail message="install.dir not specified." unless="install.dir"/> -->
    <delete dir="${install.dir}/avalon-${name}/" />
    <delete file="avalon-${name}.sar" dir="${install.dir}"/>
  </target>

  <target name="clean" description="Cleans up artifacts from build process">
    <delete dir="${build.dir}" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
  </target>

  <target name="distclean" depends="clean" description="Cleans up all generated files and directories">
    <delete dir="${docs.dir}" />
    <delete dir="${bin.dist.dir}" />
    <delete dir="${dist.base}" />
    <delete>
        <fileset dir="${tomcat.jars.dir}" includes="*.*" defaultexcludes="no" />
    </delete>
  </target>

 <!-- Compile Demo Classes -->

 <target name="compileDemo" description="Compiles the Demo Block">
    <delete dir="${build.demoClasses}"/>
    <delete dir="${build.demoXdoclet}"/>

    <mkdir dir="${build.demoClasses}"/>
    <javac srcdir="${java.demo.dir}"
           destdir="${build.demoClasses}"
           debug="${build.debug}"
           optimize="${build.optimize}"
           deprecation="${build.deprecation}">
      <classpath refid="test.class.path" />
      <include name="**"/>
    </javac>
 </target>

  <target name="phoenix-demo-xdoclet" depends="compileDemo" >
  
    <mkdir dir="${build.demoXdoclet}"/>
  
    <taskdef name="phoenix-blocks"
             classname="org.apache.avalon.phoenix.tools.xdoclet.PhoenixXDoclet"
             classpathref="test.class.path"/>

    <phoenix-blocks
        destdir="${build.demoXdoclet}"
        classpathref="test.class.path">
      <fileset dir="${java.demo.dir}">
        <include name="**/*.java" />
      </fileset>
      <blockinfo/>
      <manifest manifestFile="manifest.mf" />
    </phoenix-blocks>

  </target>

 

 <target name="jarDemo" depends="phoenix-demo-xdoclet" description="Makes a jar file out of the Demo classes">
    <mkdir dir="${build.lib}"/>

    <jar jarfile="${build.lib}/sevakDemo.jar"
         manifest="${build.demoXdoclet}/manifest.mf">
      <fileset dir="${build.demoClasses}">
        <include name="org/apache/avalon/apps/sevak/**"/>
      </fileset>
     <fileset dir="${build.demoXdoclet}">
        <include name="org/apache/avalon/apps/sevak/**/*.xinfo"/>
      </fileset>
    </jar>
 </target>
 <!--- Build Test SAR Archive -->
 <target name="demoSAR" depends="jars,jarDemo" description="Builds a Demo block which uses Sevak Service">
    <sar sarfile="${build.lib}/avalon-sevak-demo.sar"
         config="${conf.demo.dir}/sevak-demo-config.xml"
         environment="${conf.demo.dir}/sevak-demo-environment.xml"
         assembly="${conf.demo.dir}/sevak-demo-assembly.xml" >

      <lib dir="${build.lib}/">
        <include name="*.jar"/>
      </lib>

      <lib dir="../../jakarta-avalon-apps/common/lib">
        <include name="cornerstone.jar"/>
      </lib>
    
      <lib dir="${tomcat.jars.dir}">
        <include name="*.jar"/>
      </lib>
      

      <zipfileset dir="catalina-download/jakarta-tomcat-${catalina-version}/webapps" prefix="webapps"/>

    </sar>

    <!-- Copy build/lib contents to dist/ folder -->

    <copy todir="${dist.base}">
      <fileset dir="${build.lib}">
        <include name="**"/>
      </fileset>
    </copy>    

 </target>

 <target name="installDemo" depends="demoSAR" description="Installs Demo SAR into Phoenix" > 
     <echo message="Installing to ${install.dir}" />
    <delete dir="${install.dir}/avalon-sevak-demo" />
    <copy file="${build.lib}/avalon-sevak-demo.sar" todir="${install.dir}" />
  </target>

<!-- ==========================================================================================
	DOCUMENTATION GENERATION
========================================================================================== -->

	<!-- Creates all docs -->
	<target name="docs" depends="html-docs, javadocs" description="generates all the documentation"/>

	<!-- copy docs to site dir -->
	<target name="site" depends="docs" description=" Places docs ready for hosting on website">
		<mkdir dir="../site/build/docs/apps/${dir-name}"/>
		<copy todir="../site/build/docs/apps/${dir-name}">
		<fileset dir="${build.docs}">
			<include name="**"/>
		</fileset>
		</copy>
	</target>

	<!-- Creates javadocs -->
	<target name="javadocs" depends="compile" description="Generates the javadocs" unless="skip.javadocs">
		<mkdir dir="${build.javadocs}"/>
		<javadoc packagenames="org.apache.*"
		sourcepath="${java.dir}"
		destdir="${build.javadocs}">
		<classpath refid="project.class.path" />
		<doclet name="com.sun.tools.doclets.standard.Standard">
			<param name="-author"/>
			<param name="-version"/>
			<param name="-doctitle" value="${Name}"/>
			<param name="-windowtitle" value="${Name} API"/>
			<param name="-link" value="http://java.sun.com/j2se/1.4/docs/api/"/>
			<param name="-link" value="http://java.sun.com/j2ee/sdk_1.3/techdocs/api/"/>
			<param name="-link" value="http://jakarta.apache.org/avalon/api/"/>
			<param name="-bottom"
			value="&quot;Copyright &#169; ${year} Apache Jakarta Project. All Rights Reserved.&quot;"/>
		</doclet>
		</javadoc>
	</target>

	<target name="html-docs" description="generates the xdocs-based documentation">
		<!-- we call the build.xml target common to all of avalon-apps. This builds our html site -->
		<ant antfile="${basedir}/../cocoonbuild.xml"/>
	</target>
</project>
