<!--
This build.xml snippet contains targets for ant 1.5 that check whether
a specific libary is present, and offers targets for downloading them
if they're not.

It's kinda of a replacement for some maven functionality until maven
becomes stable.

Usage:
1) Copy this file to somewhere in your project.
2) Add the following to the top of your project's Ant build.xml script
(adjusting the path):

  <!DOCTYPE project [
    <!ENTITY check-targets SYSTEM "file:./check-targets.ent">
  ]>

3) Before the closing '</project>' in your build.xml, add this:

  &check-targets;

4) define the properties
    - lib.dir
    - project.class.path
    - Name

This is like expanding a macro: it pulls in the contents of this file.

A minimal build.xml would thus be:

<!DOCTYPE project [
<!ENTITY check-targets SYSTEM "file:./check-targets.ent">
]>

<project default="check-all-dependencies">
    <property name="Name" value="My Project"/>
    <property name="lib.dir" value="lib"/>
    <path id="project.class.path">
        <fileset dir="${lib.dir}">
            <include name="*.jar" />
        </fileset>
    </path>

    &check-targets;
</project>
-->

  <!-- Set up properties -->
  <property file="check-targets.properties"/>
  <target name="setup-dependencies">
    <available property="bsf.present"
               classname="com.ibm.bsf.BSFEngine"
               classpathref="project.class.path" />
    <available property="checkstyle.present"
               classname="com.puppycrawl.tools.checkstyle.Checker"
               classpathref="project.class.path" />
    <available property="commons-logging.present"
               classname="org.apache.comons.logging.Log"
               classpathref="project.class.path" />
    <available property="javax.jms.present"
               classname="javax.jms.TopicConnection"
               classpathref="project.class.path" />
    <available property="javax.mail.present"
               classname="javax.mail.Message"
               classpathref="project.class.path" />
    <available property="javax.servlet.present"
               classname="javax.servlet.ServletContext"
               classpathref="project.class.path" />
    <available property="javax.sql.present"
               classname="javax.sql.DataSource"
               classpathref="project.class.path" />
    <available property="jdk14.present"
               classname="java.util.logging.Logger"
               classpathref="project.class.path" />
    <available property="junit.present"
               classname="junit.framework.Test"
               classpathref="project.class.path" />
    <available property="log4j.present"
               classname="org.apache.log4j.Level"
               classpathref="project.class.path" />
    <available property="logkit.present"
               classname="org.apache.log.Hierarchy"
               classpathref="project.class.path" />
    <available property="rhino.present"
	             classname="org.mozilla.javascript.Parser"
	             classpathref="project.class.path"/>
  </target>

  <!-- called if a dependency is missing which has a BSD or ASL or
       similar license for which autodownload is okay. -->
  <target name="missing-dependency">
    <echo>
    *************************************************************************
    Classes needed for compiling ${Name} against the ${id} API
    are not available. The build may fail or some functionality may
    not be available.

    Recovery:
    Run the build target import-${id} and it will download
    the needed jar - you should be online for that.
    - OR -
    Set the ${id}.jar property in the ant.properties file 
    to the full path of the jar.
    
    If you have a fast connection you can also just run the build target
    import-all-auto-dependencies, which will download all external jars this
    buildfile knows about.
    Note this may download unused jars as well.
    *************************************************************************
    </echo>
    <echo/>
  </target>

  <!-- called if a dependency is missing which we cannot autodownload
       due to licensing-->
  <target name="missing-dependency-noauto">
    <echo>
    *************************************************************************
    Classes needed for compiling ${Name} against the ${id} API
    are not available. The build may fail or some functionality may
    not be available.

    Recovery:
    Get the ${id} jar from the ${id} distribution at
    ${dist.url}
    and place it in ${lib.dir}.
    - OR -
    Set the ${id}.jar property in the ant.properties file 
    to the full path of the jar.

    Please note that ${id} is licensed under the ${license}
    and that by downloading it you are agreeing to that license. You can read
    this license at
    ${license.url}
    *************************************************************************
    </echo>
    <echo/>
  </target>

  <!-- this target fetches a file from a maven repository -->
  <target name="import-dependency">
    <get src="${license.url}"
        dest="${lib.dir}/${id}.LICENSE.html"
        usetimestamp="true"/>
    <loadfile property="license.text" srcFile="${lib.dir}/${id}.LICENSE.html"/>
    <echo>
    *************************************************************************
    You have requested to download the ${id} jar, which is licensed under
    the ${license}. A copy of this license has been saved to
    ${lib.dir}/${id}.LICENSE.html

    Please view it now.
    *************************************************************************
    </echo>
    <input message="Do you agree to the terms of this license?"
        validargs="y,n"
        addproperty="do.download"/>

    <condition property="do.abort">
        <equals arg1="n" arg2="${do.download}"/>
    </condition>
    <fail if="do.abort">Download aborted.</fail>

    <get src="${jar.repository}/${id}/jars/${jar.id}-${version}.jar"
        dest="${lib.dir}/${id}-${version}.jar"
        verbose="true"
        usetimestamp="true"/>
  </target>

  <target name="check-all-dependencies"
          depends="bsf-check,checkstyle-check,javamail-check,jdbc-check,jms-check,junit-check,log4j-check,logkit-check,servletapi-check,commons-logging-check"
      description="checks for all dependencies we know about. This is usually more than the minimum needed to build this project; actual use is not recommended."/>
  <target name="import-all-auto-dependencies"
          depends="import-bsf,import-checkstyle,import-junit,import-log4j,import-logkit,import-commons-logging"
      description="checks for all dependencies we know about. This is usually more than the minimum needed to build this project; actual use is not recommended."/>

  <!-- BSF -->
  <target name="bsf-check" unless="bsf.present" depends="setup-dependencies">
    <antcall target="missing-dependency">
      <param name="id" value="${bsf.id}"/>
      <param name="jar.id" value="${bsf.id}"/>
      <param name="version" value="${bsf.version}"/>
      <param name="license" value="${bsf.license}"/>
      <param name="license.url" value="${bsf.license.url}"/>
    </antcall>
  </target>

  <target name="import-bsf" depends="setup-dependencies">
    <antcall target="import-dependency">
      <param name="id" value="${bsf.id}"/>
      <param name="jar.id" value="${bsf.id}"/>
      <param name="version" value="${bsf.version}"/>
      <param name="license" value="${bsf.license}"/>
      <param name="license.url" value="${bsf.license.url}"/>
    </antcall>
  </target>

  <!-- Checkstyle -->
  <target name="checkstyle-check" unless="checkstyle.present" depends="setup-dependencies">
    <antcall target="missing-dependency">
      <param name="id" value="${checkstyle.id}"/>
      <param name="jar.id" value="${checkstyle.id}"/>
      <param name="version" value="${checkstyle.version}"/>
      <param name="license" value="${checkstyle.license}"/>
      <param name="license.url" value="${checkstyle.license.url}"/>
    </antcall>
  </target>

  <target name="import-checkstyle" depends="setup-dependencies">
    <antcall target="import-dependency">
      <param name="id" value="${checkstyle.id}"/>
      <param name="jar.id" value="${checkstyle.id}"/>
      <param name="version" value="${checkstyle.version}"/>
      <param name="license" value="${checkstyle.license}"/>
      <param name="license.url" value="${checkstyle.license.url}"/>
    </antcall>
  </target>

  <!-- Commons-Logging -->
  <target name="commons-logging-check" unless="commons-logging.present" depends="setup-dependencies">
    <antcall target="missing-dependency">
      <param name="id" value="${commons-logging.id}"/>
      <param name="jar.id" value="${commons-logging.id}"/>
      <param name="version" value="${commons-logging.version}"/>
      <param name="license" value="${commons-logging.license}"/>
      <param name="license.url" value="${commons-logging.license.url}"/>
    </antcall>
  </target>

  <target name="import-commons-logging" depends="setup-dependencies">
    <antcall target="import-dependency">
      <param name="id" value="${commons-logging.id}"/>
      <param name="jar.id" value="${commons-logging.id}"/>
      <param name="version" value="${commons-logging.version}"/>
      <param name="license" value="${commons-logging.license}"/>
      <param name="license.url" value="${commons-logging.license.url}"/>
    </antcall>
  </target>

  <!-- JavaMail -->
  <target name="javamail-check" unless="javax.mail.present" depends="setup-dependencies">
    <antcall target="missing-dependency-noauto">
      <param name="id" value="${javamail.id}"/>
      <param name="jar.id" value="${javamail.id}"/>
      <param name="version" value="${javamail.version}"/>
      <param name="license" value="${javamail.license}"/>
      <param name="license.url" value="${javamail.license.url}"/>
      <param name="dist.url" value="${javamail.dist.url}"/>
    </antcall>
  </target>

  <!-- JDBC -->
  <target name="jdbc-check" unless="javax.sql.present" depends="setup-dependencies">
    <antcall target="missing-dependency-noauto">
      <param name="id" value="${jdbc.id}"/>
      <param name="jar.id" value="${jdbc.id}"/>
      <param name="version" value="${jl.version}"/>
      <param name="license" value="${jdbc.license}"/>
      <param name="license.url" value="${jdbc.license.url}"/>
      <param name="dist.url" value="${jdbc.dist.url}"/>
    </antcall>
  </target>

  <!-- JDK 1.4 -->
  <target name="jdk14-check" unless="jdk14.present" depends="setup-dependencies">
    <echo>*************************************************************************</echo>
    <echo>*</echo>
    <echo>*  You are compiling with a pre-1.4 jdk. Some functionality may not be</echo>
    <echo>*  available.</echo>
    <echo>*************************************************************************</echo>
    <echo/>
  </target>

  <!-- JMS -->
  <target name="jms-check" unless="javax.jms.present" depends="setup-dependencies">
    <antcall target="missing-dependency-noauto">
      <param name="id" value="${jms.id}"/>
      <param name="jar.id" value="${jms.id}"/>
      <param name="version" value="${jms.version}"/>
      <param name="license" value="${jms.license}"/>
      <param name="license.url" value="${jms.license.url}"/>
      <param name="dist.url" value="${jms.dist.url}"/>
    </antcall>
  </target>

  <!-- JUnit -->
  <target name="junit-check" unless="junit.present" depends="setup-dependencies">
    <antcall target="missing-dependency">
      <param name="id" value="${junit.id}"/>
      <param name="jar.id" value="${junit.id}"/>
      <param name="version" value="${junit.version}"/>
      <param name="license" value="${junit.license}"/>
      <param name="license.url" value="${junit.license.url}"/>
    </antcall>
  </target>

  <target name="import-junit" depends="setup-dependencies">
    <antcall target="import-dependency">
      <param name="id" value="${junit.id}"/>
      <param name="jar.id" value="${junit.id}"/>
      <param name="version" value="${junit.version}"/>
      <param name="license" value="${junit.license}"/>
      <param name="license.url" value="${junit.license.url}"/>
    </antcall>
  </target>

  <!-- Log4J -->
  <target name="log4j-check" unless="log4j.present" depends="setup-dependencies">
    <antcall target="missing-dependency">
      <param name="id" value="${log4j.id}"/>
      <param name="jar.id" value="${log4j.id}"/>
      <param name="version" value="${log4j.version}"/>
      <param name="license" value="${log4j.license}"/>
      <param name="license.url" value="${log4j.license.url}"/>
    </antcall>
  </target>

  <target name="import-log4j" depends="setup-dependencies">
    <antcall target="import-dependency">
      <param name="id" value="${log4j.id}"/>
      <param name="jar.id" value="${log4j.id}"/>
      <param name="version" value="${log4j.version}"/>
      <param name="license" value="${log4j.license}"/>
      <param name="license.url" value="${log4j.license.url}"/>
    </antcall>
  </target>

  <!-- Logkit -->
  <target name="logkit-check" unless="logkit.present" depends="setup-dependencies">
    <antcall target="missing-dependency">
      <param name="id" value="${logkit.id}"/>
      <param name="jar.id" value="${logit.id}"/>
      <param name="version" value="${logkit.version}"/>
      <param name="license" value="${logkit.license}"/>
      <param name="license.url" value="${logkit.license.url}"/>
    </antcall>
  </target>

  <target name="import-logkit" depends="setup-dependencies">
    <antcall target="import-dependency">
      <param name="id" value="${logkit.id}"/>
      <param name="jar.id" value="${logkit.id}"/>
      <param name="version" value="${logkit.version}"/>
      <param name="license" value="${logkit.license}"/>
      <param name="license.url" value="${logkit.license.url}"/>
    </antcall>
  </target>

  <!-- Rhino -->
  <target name="rhino-check" unless="rhino.present" depends="setup-dependencies">
    <antcall target="missing-dependency">
      <param name="id" value="${rhino.id}"/>
      <param name="jar.id" value="${rhino.jar.id}"/>
      <param name="version" value="${rhino.version}"/>
      <param name="license" value="${rhino.license}"/>
      <param name="license.url" value="${rhino.license.url}"/>
    </antcall>
  </target>

  <target name="import-rhino" depends="setup-dependencies">
    <antcall target="import-dependency">
      <param name="id" value="${rhino.id}"/>
      <param name="jar.id" value="${rhino.jar.id}"/>
      <param name="version" value="${rhino.version}"/>
      <param name="license" value="${rhino.license}"/>
      <param name="license.url" value="${rhino.license.url}"/>
    </antcall>
  </target>

  <!-- Servlet API -->
  <target name="servletapi-check" unless="javax.servlet.present" depends="setup-dependencies">
    <antcall target="missing-dependency-noauto">
      <param name="id" value="${servletapi.id}"/>
      <param name="jar.id" value="${servletapi.id}"/>
      <param name="version" value="${servletapi.version}"/>
      <param name="license" value="${servletapi.license}"/>
      <param name="license.url" value="${servletapi.license.url}"/>
      <param name="dist.url" value="${servletapi.dist.url}"/>
    </antcall>
  </target>
