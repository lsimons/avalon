<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "dtd/document-v10.dtd">

<document>
  <header>
    <title>LogKit Developer Documentation</title>
    <subtitle>Whitepaper</subtitle>
    <authors>
      <person name="Peter Donald" email="donaldp@apache.org"/>
    </authors>
  </header>
  <body>
    <s1 title="Abstract">
      <p>
        Logging is an integral component to any software development project. 
        During the development stages it offers a valuable source of debugging
        information for the developer. During deployment it can provide valuable
        operational data that allows administrators to diagnose problems as they 
        arise. This whitepaper describes the design and implementation of LogKit.
      </p>
    </s1>
    <s1 title="Introduction">

      <p>
        LogKit, began life as a facade for a more complex logging toolkit. During
        development it was found that existing toolkits were complex and difficult 
        to use. A malformed logger configuration file could cause the whole system 
        to fail or the logging information to go into the void.
      </p>

      <p>
        Overtime it was discovered that the facade while simple to use, inherited 
        many of the faults of the underlying logging toolkit. The logging was slow
        and was impossible to dynamically reconfigure. 
      </p>        
        
      <p>
        At this time the whole system was over-hauled. Existing logging toolkits
        were surveyed and user feedback was gathered from both developers and 
        administrators. The new toolkit focused on speed, reliability and dynamic
        reconfiguration. It then added, at that time unique features, for filtering
        log events, multiple listeners (aka LogTargets) per category and delayed
        serialization of events.
      </p>

    </s1>

    <s1 title="Structure and Elements">

      <p>
        The most basic components of LogKit are the Logger, the LogEvent and the
        LogTarget. The Logger represents the client interface to the logging system.
        The developer interacts with logger to generate LogEvents. The LogEvents 
        are routed to a LogTarget. The LogTarget decides what to do with the LogEvent,
        usually it is recorded to a file, a database or transmitted over the network.
      </p>
    </s1>

    <s1 title="Priorities">
      <p>
        One of the advantages of a logging toolkit is fine grain control over which
        statements get printed. At some times during development you may wish to enable 
        all logging statements and at other times they may wish to disable debug 
        messages. It was from this need that the notion of of Priorities were born.
        A Priority describes the urgency of a LogEvent. Below is a list of priorities
        that are usable within the LogKit system (extracted from the constants of class
        org.apache.log.Priority).
      </p>

      <ul>
        <li>
          <strong>DEBUG:</strong><br/>
          Developer orientated messages, usually used during developement of product.
        </li>
        <li>
          <strong>INFO:</strong><br/>
          Useful information messages such as state changes, client 
          connection, user login etc.
        </li>
        <li>
          <strong>WARN:</strong><br/>
          A problem or conflict has occured but it may be recoverable, then 
          again it could be the start of the system failing.
        </li>
        <li>
          <strong>ERROR:</strong><br/>
          A problem has occured but it is not fatal. The system will still function.
        </li>
        <li>
          <strong>FATAL_ERROR:</strong><br/>
          Something caused whole system to fail. This indicates that an administrator
          should restart the system and try to fix the problem that caused the failure.
        </li>
      </ul>

      <p>
        The range of priorities is limited by design as past experience has 
        indicated more levels do not offer any significant advantage to the 
        user.
      </p>

      <p>
        Each logger instance is associated with a Priority. This allows you to limit
        each logger so that it only displays messages greater than a certain priority.
        So if a DEBUG message occured and the loggers priority was WARN, the LogEvent
        would be suppressed.
      </p>

      <p>
        A user can log at a certain priority by calling a method with matching name and
        the message as a string. For instance to log at debug level you would call
        logger.debug("My Message"). Similar methods exist for info(), warn() and error().
        There is also a set of similarly named methods that take both a message string 
        and an exception.
      </p>

      <p>
        Where performance is critical it is often useful to check if a priority is
        enabled before constructing the message. In many cases the construction of
        the message is an expensive string operation and convertion operation. In this
        case it is useful to know before you create the message whether it will be 
        logged. The pattern of the method to check if a priority is enabled is 
        "is<em>Priority</em>Enabled()". An example use case is displayed below.
      </p>

<source><![CDATA[
if( logger.isDebugEnabled() )
{
  //Construct a message (expensive operation)
  final String message = "Var1 value: " + var1 + "\tVar2 value: " + var2 +
                         "\tVar3 value: " + var3 + ".";
  logger.debug( message );
}
]]></source>

    </s1>

    <s1 title="Categories">

      <p>
        In a complex system it is often not enough to supress logging based on priority.
        For instance you may wish to log the network subsystem with DEBUG priority while
        the simulator subsystem with WARN priority. To accomplish this LogKit uses a concept
        termed Categories. Categories, often called Channels, Subjects or Facilities, are
        a subdivision of the logging namespace. 
      </p>

      <p>
        Each category is a name, made up of name components separated by a ".". So
        a category named "network.interceptor.connected" is made up of three name 
        components "network", "interceptor" and "connected", ordered from left to 
        right. Every logger is associated with a category at creation.
      </p>

      <p>
        LogKit takes it one step further and assumes that the namespace is hierarchial.
        The left-most name component is the most generic category while the right-most
        name component is the most specific. So "network.interceptor.connected" is a child
        category of "network.interceptor", which is in turn a child category of "network".
        There is also a root category "" that is hidden inside the org.apache.log.Hierarchy
        class. 
      </p>

      <p>
        The main reason for structuring logging namespace in a hierarchial manner is to
        allow in heritance. A logger will inherit it's parent priority if it has not
        been explicitly set. This allows you to set the "network" logger to have INFO 
        priority. Unless the "network.interceptor" has had it's priority set it will 
        inherit the INFO priority. 
      </p>

      <p>
        Unlike other logging toolkits, there is no performance penalty for having deep 
        hierarchies. Each logger caches a Priority to check against. When a logger
        has it's logger set or unset, it updates the cached version of it's child 
        loggers.
      </p>

    </s1>

    <s1 title="Log Targets">

      <p>
        In LogKit, LogTargets are the destination of LogEvents. Decoupling LogEvent 
        generation from handling allows developers to change destinations of LogEvents
        dynamically or via configuration files. Possible destinations include writing
        to a database, a file, an IRC channel, a syslog server, an instant messaging 
        client etc.
      </p>

      <p>
        Like Prioritys, it is often useful to allow LogTargets to be inherited between 
        loggers. Like Priority inheritance, LogTarget inheritance does not suffer any 
        runtime performance penalty.
      </p>

      <s2 title="Filters">

        <p>
          Filters are a special kind of LogTarget. Instead of writing to an output 
          destination they are used to filter out LogEvents or modify the LogEvents 
          details and pass it on to another LogTarget. 
        </p>

        <p>
          This can be a useful feature when you assign multiple LogTargets to a 
          logger. For instance you may add two LogTargets to a logger, one which
          writes LogEvents to a database and one which writes a message to the 
          administrators pager. However you may want to record all messages to 
          the database but only transmite FATAL_ERROR messages to pager. In this 
          case you would use a PriorityFilter to filter out non-FATAL_ERROR messages
          for pager log target.          
        </p>
      
      </s2>

      <s2 title="AsyncLogTarget">

        <p>
          AsyncLogTarget is another kind of special LogTarget. It takes a log event
          and copies it into a queue so that another thread can actually write the 
          LogEvent to another LogTarget. This is useful if logging to a particular 
          LogTarget is a slow operation (such as a MailLogTarget).
        </p>

        <p>
          Below is a snippet of code that creates an AsyncLogTarget to write messages
          in another thread.
        </p>

<source><![CDATA[
LogTarget mySlowTarget = ...;
AsyncLogTarget asyncTarget = new AsyncLogTarget( mySlowTarget );
Thread thread = new Thread( asyncTarget );
thread.setPriority( Thread.MIN_PRIORITY );
thread.start();

logger.setLogTargets( new LogTarget[] { asyncTarget } );
]]></source>
      </s2>

    </s1> 

    <s1 title="Formatters">

      <p>
        LogTargets that write to a serial or unstructured store (ie filesystem or 
        network based LogTargets) need some method to serialize the LogEvent 
        before writing to the store. The most common way to serialize the LogEvent
        is to use a Formatter. 
      </p>

      <p>
        The Formatter interface takes a LogEvent and returns a String object. The
        most commonly use LogEvent is the PatternFormatter. The pattern formatter 
        takes a format specifier that has a similar format to c's printf function.
      </p>

      <p>
        The format specifier consists of a string containing raw text combined with 
        pattern elements. Each pattern element has the generalized form 
        "%[+|-]#.#{field:subformat}". The +|- indicates whether the pattern element 
        should be left or right justified (defaults to left justified if unspecified).
        The #.# indicates the minimum and maximum size of output, if unspecified the
        output is neither padded nor truncated. 'field' indicates the field to be 
        written and must be one of "category", "context", "message", "time", 
        "throwable" or "priority". This parameter must be supplied and correlates to
        fields of LogEvent. 'subformat' is currently unused. 
      </p>

      <p>
        Following is a number of examples for PatternFormatter's format specifier 
        and actual output.
      </p>

<source><![CDATA[
format: "%7.7{priority} %5.5{time} [%8.8{category}] (%{context}): %{message}\\n%{throwable}"
output: DEBUG   123   [network.] (main): This is a debug message

format: "%7.7{priority} %5.5{time} [%{category}]: %{message}\n"
output: DEBUG   123   [network.interceptor.connected]: This is a debug message
output: DEBUG   123   [network]: This is another debug message

format: "%7.7{priority} %5.5{time} [%10.{category}]: %{message}\n"
output: DEBUG   123   [network.interceptor.connected]: This is a debug message
output: DEBUG   123   [network   ]: This is another debug message
]]></source>

    </s1>

<!--
Todo: Should I mention context stack? Or should I describe it and describe the proper
way of handling it? (Which is not ContextStack)
-->

    <s1 title="Examples">

      <p>
        One of the best ways to learn how to use a toolkit is to see an 
        example in action. With that heres some example uses of LogKit. The first
        example is in a simple application while the next example is in a servlet.
        The servlet example demonstrates the usage of filters.
      </p>

<source><![CDATA[
Logger logger = Hierarchy.getDefaultHierarchy().getLoggerFor("myCategory");
logger.setPriority( Priority.DEBUG );
logger.debug( "This is a debug message" );
]]></source>

<source><![CDATA[
//Create a Log filter that writes to servlet Containers log
//If priority greater than ERROR
PriorityFilter filter = new PriorityFilter(Priority.ERROR);
filter.addTarget( new ServletOutputLogTarget(context) );

String logName = getInitParameter("log-name");
if( null == logName ) logName = "myservlet.log";

final String path = context.getRealPath("/") + "/WEB-INF/logs/" + logName ;

//Create a logger to write to a file as specified 
//with servlet init parameters
FileOutputLogTarget target = new FileOutputLogTarget(path);
target.setFormat( "%7.7{priority} %5.5{time}   [%8.8{category}] " +
                  "(%{context}): %{message}\\n%{throwable}" );

//Create logger
myLogger = Hierarchy.getDefaultHierarchy().getLoggerFor("myServlet");

//Set log targets of logger
myLogger.setLogTargets( new LogTarget[] { target, filter } );

String logLevel = getInitParameter("log-priority");
if( null == logLevel ) logLevel = "DEBUG";

//Set log targets parameter based on init parameters
Priority priority = Priority.getPriorityForName( logLevel );
myLogger.setPriority( priority );
]]></source>

    </s1>

    <s1 title="Conclusion">

      <p>
        LogKit is a friendly, easy to use logging toolkit. It is high performing and 
        easily integrated into existing products. By design it does not specify any
        configuration format but instead encourages users to integrate it into their 
        existing products. It also is designed to run in a secure environment by 
        limiting client access to hierarchys. 
      </p>

    </s1>

  </body>
  <footer>
    <legal>
      Copyright (c) @year@ The Jakarta Apache Project All rights reserved.
      $Revision: 1.2 $ $Date: 2001/06/21 14:16:57 $
    </legal>
  </footer>
</document>
