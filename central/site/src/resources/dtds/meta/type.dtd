<!--
Copyright 2002-2004 The Apache Software Foundation
Licensed  under the  Apache License,  Version 2.0  (the "License");
you may not use  this file  except in  compliance with the License.
You may obtain a copy of the License at 

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed  under the  License is distributed on an "AS IS" BASIS,
WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
implied.

See the License for the specific language governing permissions and
limitations under the License.
-->

<!--
A type element is the document root, it defines:

info           the specific details about this component type
loggers        the loggers used by this component type
context        the context required by this component type
services       the services offered by this component type
dependencies   the services that this component type require to operate
stages         the lifecycle stage extensions that this component type is depenent on
extensions     the lifecycle extensions that this component type provides

-->

<!ELEMENT type ( info, loggers?, context?, services?, dependencies?, stages?, extensions?)>

<!--
The info element describes the component, it defines:

name	       the human readable name of component type. Must be a string
             containing alphanumeric characters, '.', '_' and starting
             with a letter.
version	     the version of the component in (in the format #.#.#, #.# or # where
             # is a integer
-->
<!ELEMENT info      (name?,version,lifestyle?,attributes?)>
  <!ELEMENT name         (#PCDATA) >
  <!ELEMENT version      (#PCDATA) >
  <!ELEMENT lifestyle      (#PCDATA) >


<!--
The component element describes the component, it defines:

name	        the human readable name of component type. Must be a string
             containing alphanumeric characters, '.', '_' and starting
             with a letter.
version	     the version of the component in (in the format #.#.#, #.# or # where
             # is a integer

This is a deprecated element - use "info" instead.
-->
<!ELEMENT component      (name?,version,attributes?)>
  <!ELEMENT name         (#PCDATA) >
  <!ELEMENT version      (#PCDATA) >

<!--
The logger element defines the loggers that are available to component.
The element has one attribute specifying name of Logger. It contains:

attributes	  Optional attributes about logger
-->
<!ELEMENT logger   (attributes?) >
  <!ATTLIST logger name CDATA #IMPLIED >

<!--
The context element defines what values and type of context
is available to component.
It contains:

entrys    	  Key value pairs that component uses
attributes	  Optional attributes about service
-->
<!ELEMENT context   (entry*,attributes?) >
  <!ATTLIST context type CDATA #IMPLIED >

<!--
The service element defines a service that the component
can provide to other component.
It contains:

reference     the reference to service.
attributes	  Optional attributes about service
-->
<!ENTITY % ref "(reference)">
<!ELEMENT service   (%ref;,attributes?) >

<!--
The reference element defines a reference to a versioned interface.
It defines:

type         the class of the interface. This must be equal to the class name of the
             interface.
version	 the version of the interface in (in the format #.#.#, #.# or # where
             # is a integer
-->
<!ELEMENT reference   EMPTY >
  <!ATTLIST reference
       type CDATA #REQUIRED
       version CDATA #IMPLIED >

<!--
The extension element defines a lifecycle extension stage supplied by a type:

name  the extension name.
reference  the version lifecycle interface supported
attributes	  Optional attributes about the extension
-->
<!ENTITY % stage.attribute "stage (CREATE|ACCESS|RELEASE|DESTROY|ALL|INNER|OUTER) 'ALL'">
<!ELEMENT extension      (name,reference,attributes?)>
<!ATTLIST extension
       %stage.attribute; >

<!--
The stage element defines a lifecycle extension stage that this component is dependent on.
It contains:

name  the stage name.
interface  the client stage interface
attributes	  Optional attributes about the stage
-->
<!ELEMENT stage      (reference,attributes?)>

<!--
The stages element contains a list of stages that this component is dependent on.
It contains stage elements.
-->
<!ELEMENT stages    (stage*)>

<!--
The extensions element contains a list of extensions that the component provides.
-->
<!ELEMENT extensions    (extension*)>

<!--
The service dependency describes a service that the component
requires. It defines:

role         the role of the service. This is the value that is used to lookup the
             service in the ComponentManager. If not provided it defaults to the
             value specified in the name attribute of service element
service-ref  the service that is required
-->
<!ELEMENT dependency  (role?,%ref;,attributes?) >
  <!ATTLIST dependency optional CDATA #IMPLIED >
  <!ELEMENT role        (#PCDATA) >


<!--
The loggers element contains a list of loggers that component uses.
-->
<!ELEMENT loggers    (logger*)>

<!--
The services element contains a list of services that this component supports.
It contains service elements.
-->
<!ELEMENT services    (service*)>

<!--
The dependencies element contains a list of services that this component requires.
It contains dependency elements.
-->
<!ELEMENT dependencies    (dependency*)>

<!--
The attributes element contains a list of attributes for feature.
-->
<!ELEMENT attributes    (attribute*)>

<!--
The attribute element defines an attribute (an opaque key-value pair for a feature).
It defines:

key          the key for attribute.
value  	     the value of attribute.
-->
<!ELEMENT attribute   (#PCDATA) >
  <!ATTLIST attribute
       key CDATA #REQUIRED
       value CDATA #IMPLIED
  >

<!--
The entry element defines entry in context.
It defines:

key          the key for entry.
type         the type of entry.
optional     is entry optional
-->
<!ELEMENT entry   EMPTY >
  <!ATTLIST entry
       key CDATA #REQUIRED
       type CDATA #REQUIRED
       optional CDATA #IMPLIED
  >