<?xml version="1.0"?>

<!--
 * 
 * Copyright 2004 Apache Software Foundation
 * Licensed  under the  Apache License,  Version 2.0  (the "License");
 * you may not use  this file  except in  compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed  under the  License is distributed on an "AS IS" BASIS,
 * WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 * implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
-->

<document>

  <properties>
    <author email="niclas@apache.org">Niclas Hedhman</author>
    <title>Magic Artifact Plugin</title>
  </properties>

  <body>

    <section name="Artifact Plugin - Methods">
      <p>
        It is not meant for humans to directly invoke the Artifact plugin,
        but for other plugins to request its service.
      </p>
      <p>
       A typical usage as seen in the Javac plugin;
      </p>
      <source>
    /* Casting required due to BeanShell.
    ArtifactPlugin ap = (ArtifactPlugin) m_ArtifactPlugin;
    
    /* Add Class path defined in the build.properties  */
    Path cp = javac.createClasspath();
    Path.PathElement pe = cp.createPathElement();
    pe.setPath( classpath );

    /* Get hold of the artifactId */
    String projectname = m_Context.getProjectName();
    
    /* Resolve it into an Atrifact */
    Artifact thisArtifact = ap.locate( projectname );
    
    /* Get the dependencies */
    Artifact[] deps = ap.getDependencies( thisArtifact );
    
    /* Fetch the classpath */
    Path depPath = ap.getClassPath( deps );
    
    /* Add it */
    cp.add( depPath );
      </source>
      <subsection name="Reference" >
        <source>
    Artifact resolve( String artifactId );
        </source>
        <p>
          Resolves the artifactId into the project's current setting for
          such Artifact.
        </p>
        <p>
        </p>    
        <source>
    Artifact[] getDependencies( Artifact artifact );
        </source>
        <p>
          Returns the all the dependencies of the given Artifact.
        </p>
        <p>
        </p>    
        <source>
    org.apache.tools.ant.types.Path getClassPath( Artifact[] artifacts );
        </source>
        <p>
          Builds an Ant Path object out of the artifacts.
        </p>
        <p>
        </p>    
        <source>
    ClassLoader getClassLoader( Artifact[] artifacts );
        </source>
        <p>
          Creates an URLClassloader with the given artifacts in it.
        </p>
        <p>
        </p>    
        <source>
    URL[] getLocalURLs( Artifact[] artifacts );
        </source>
        <p>
          Obtain local URLs (file:) of the given artifacts. If they are
          not available they will be downloaded from the remote repository.
        </p>
        <p>
        </p>    
        <source>
    void upload( Artifact artifact, File content );
        </source>
        <p>
          Uploads the given to the remote repository.
        </p>
        <p>
        </p>    
      </subsection>
    </section>
  </body>
</document>



