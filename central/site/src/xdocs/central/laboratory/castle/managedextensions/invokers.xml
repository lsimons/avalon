<?xml version="1.0" encoding="UTF-8"?>

<!-- 
 Copyright 2004 Apache Software Foundation
 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <properties>
    <author email="dev@avalon.apache.org">Avalon Team</author>
    <title>Avalon Castle - Managed Extensions</title>
  </properties>

  <body>

  <section name="Invokers">
    <p>
    One of the biggest perfomance problems of some JMX implementations was 
    exactly how components methods were invoked. On the ManagementExtensions
    implementation that was a big concern as well, so the invocation of methods and
    attributes goes through a invoker strategy. The reflection strategy is used by 
    default, but you can enable the code generation one, or develop your own.
    </p>
<source>
namespace Apache.Avalon.Castle.ManagementExtensions.Default
{
	using System;

	public interface InvokerStrategy
	{
		MDynamicSupport Create(Object instance);
	}
}
</source>

  </section>

  </body>
</document>