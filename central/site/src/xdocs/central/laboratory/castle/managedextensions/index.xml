<?xml version="1.0" encoding="UTF-8"?>

<!-- 
 Copyright 2004 Apache Software Foundation
 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <properties>
    <author email="dev@avalon.apache.org">Avalon Team</author>
    <title>Avalon Castle - Managed Extensions</title>
  </properties>

  <body>

  <section name="The project">
    <p>
    ManagedExtensions is an attempt to give management capabilities to applications. 
    Its relation to Castle Container is yet to be developed.
    </p>
    <p>
    Basically you have to approaches to choose: the server approach and the passive 
    approach.
    </p>
  </section>

  <section name="Building a server">
    <p>
    If your application will be used to host others components, then you 
    may build it as a server application. Just create a MServer concrete instance
    and register your managed components on it (or use it to create your components 
    instances)
    </p>
<source>
using Apache.Avalon.Castle.ManagementExtensions;


bool createNewAppDomain = false;
MServer server = MServerFactory.CreateServer("logicaldomainname", createNewAppDomain);

</source>

  <p>
  After setting up a MServer instance you can use it to register component instances, 
  or create instances from it:
  </p>
<source>
/// <summary>
/// Registers the specified managed object instance.
/// </summary>
/// <exception cref="InvalidDomainException">If domain name is not found.</exception>
ManagedInstance RegisterManagedObject(Object instance, ManagedObjectName name);

/// <summary>
/// Instantiates the specified type using the server domain.
/// </summary>
Object Instantiate(String assemblyName, String typeName);
</source>
  </section>

  <section name="Managed Components">
  <p>
  To expose your components as managed components you have two choices:
  <ul>
    <li>
    Use the ManagedComponent attribute
    </li>
    <li>
    Implement the MDynamicSupport interface
    </li>
  </ul>
  </p>
<source>
using Apache.Avalon.Castle.ManagementExtensions;

<b>[ManagedComponent]</b>
public class DummyHttpServer
{
	protected bool started = false;

	public DummyHttpServer()
	{
	}

	<b>[ManagedAttribute]</b>
	public bool Started
	{
		get
		{
			return started;
		}
		set
		{
			started = value;
		}
	}

	<b>[ManagedOperation]</b>
	public void Start()
	{
		Started = true;
	}

	<b>[ManagedOperation]</b>
	public void StartAt(int time)
	{
	}

	<b>[ManagedOperation]</b>
	public void Stop()
	{
		Started = false;
	}
}
</source>
  </section>

  <section name="Source code">
    <p>
    The lastest version of source can be obtained from 
    <a href="https://svn.apache.org/repos/asf/avalon/trunk/central/laboratory/avalon-net/Castle/CastleManagementExtensions">Avalon Subversion repository</a> 
    (Test cases can be found <a href="https://svn.apache.org/repos/asf/avalon/trunk/central/laboratory/avalon-net/Castle/CastleManagementExtensionsTest">here</a>).
    </p>
  </section>

  <section name="Useful links">
    <p>
    If you'd like to learn more about Managed Extensions, please refer to:
    </p>
    <ul>
      <li>
      <a href="http://jroller.com/comments/hammett?anchor=management_extensions_for_net">
        Management Extensions for .Net</a>:
        Full explanation of what driven the development of Castle Managed Extensions.
      </li>
    </ul>
  </section>

  </body>
</document>