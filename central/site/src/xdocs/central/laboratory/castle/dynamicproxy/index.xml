<?xml version="1.0" encoding="UTF-8"?>

<!-- 
 Copyright 2004 Apache Software Foundation
 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <properties>
    <author email="dev@avalon.apache.org">Avalon Team</author>
    <title>Avalon Castle - DynamicProxy</title>
  </properties>

  <body>

  <section name="The project">
    <p>
    The DynamicProxy project was created to overcome the CLR's proxy (in)capabilities. 
    There are proxies in the CLR world, but they can be considered a bit
    intrusive as it forces one to extend MarshalByRefObject or ContextBoundObject. 
    </p>
    <p>
    You can use DynamicProxy to generate proxies on the fly for one or more interfaces
    (supporting concrete classes is on the plans as well)
    </p>
  </section>

  <section name="Source code">
    <p>
    The lastest version of source can be obtained from 
    <a href="https://svn.apache.org/repos/asf/avalon/trunk/central/laboratory/avalon-net/DynamicProxy">Avalon Subversion repository</a>.
    </p>
  </section>

  <section name="Usage">
    <p>
    The DynamicProxy relies on Reflection.Emit to generate new classes that implements
    the specified interfaces and delegates to your implementation of IInvocationHandler.
    The usage is very simple. You only need to invoke ProxyGenerator.CreateProxy
    specifying the interfaces that will be behind the proxy and your implementation of 
    IInvocationHandler:
    </p>
<source>
using Apache.Avalon.DynamicProxy;

public interface IMyInterface
{
	String Name
	{
		get;
		set;
	}

	void DoSomething(int x, int y);
}

public class YourProxyInvocationHandler : IInvocationHandler
{
	public object Invoke(object proxy, MethodInfo method, params object[] arguments)
	{
		// do something before

 		object returnVal = method.Invoke( realInstance, arguments );

		// do something after...

		return returnVal;
	}
}

object proxy = ProxyGenerator.CreateProxy( 
	typeof(IMyInterface), 
	new YourProxyInvocationHandler( new MyInterfaceImpl() ) );

// proxy can be safely casted to IMyInterface

IMyInterface inter = proxy as IMyInterface;

</source>
    <p>
    You can also overrides the implementation of StandardInvocationHandler.
    </p>
<source>
public class YourProxyInvocationHandler : StandardInvocationHandler
{
	protected override void PreInvoke(object proxy, 
		MethodInfo method, params object[] arguments)
	{
	}

	protected override void PostInvoke(object proxy, 
		MethodInfo method, ref object returnValue, params object[] arguments)
	{
	}
}
</source>

     <subsection name="Useful links">
      <p>
      If you'd like to learn more about proxies in .Net and other similar solutions
      to generate proxies on the fly, please follow these links:
      </p>
      <ul>
        <li>
         <a href="http://opensource.atlassian.com/confluence/spring/display/NET/Dynamic+Proxy?showComments=true">Dynamic Proxies in .NET</a>:
         Discussions and explanation about the possibilities of proxies.
        </li>
        <li>
        <a href="http://jroller.com/comments/hammett?anchor=java_like_proxies_in_net">Java like proxies in .Net</a>:
         Explanation of the problems which leaded to development of Avalon DynamicProxy.
        </li>
      </ul>
     </subsection>

     <subsection name="Thanks to">
       <ul>
         <li>
           Stefan Zobel - for his suggestion of using ldtoken
         </li>
         <li>
           <a href="http://www.springframework.net/">SpringFramework.Net</a>
           guys - for their interest and willingness to help
         </li>
         <li>
           <a href="http://aspectsharp.sourceforge.net/">AspectSharp project</a>
           - for sticking with it
         </li>
       </ul>
     </subsection>

  </section>

  </body>
</document>