<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
    <author email="dev@avalon.apache.org">Avalon Documentation Team</author>
    <title>Apache Avalon</title>
  </properties> 

  <body>
    <section name="News and Information">
       <ul>
         <li>
           03/12/2004 : <a href="news.html#12-MAR-2004: Avalon Adopts Single Platform Strategy">Avalon Adopts Single Platform Strategy</a>
         </li>
         <li>
           03/01/2004 : <a href="news.html#01-MAR-2004: Fortress + Excalibur Release">New Fortress and Excalibur Component Release</a>
         </li>
         <li>
            02/24/2004 : <a href="news.html#24-FEB-2004: Wiki Revisions">Wiki Revisions</a>
         </li>
         <li>
           02/12/2004 : <a href="news.html#12-FEB-2004: Avalon Adopts JIRA">Avalon Adopts JIRA</a>
         </li>
         <li>
           01/18/2004 : <a href="news.html#18-JAN-2004: MerlinDeveloper Graduates From Incubator">MerlinDeveloper graduates from Apache Incubator</a>
         </li>
         <li>
           12/06/2003 : <a href="news.html#06-DEC-2003: New Wiki Site">New Wiki Site</a>
         </li>
       </ul>
    </section>
    <section name="What is it?">
      <p>
      Apache Avalon provides a complete platform for component
      programming including a core framework, utilities, tools,
      components and containers.  By using key design patterns such as
      Inversion of Control (IoC) and Seperation of Concerns (SoC),
      Avalon achieves a number of advantages over traditional object
      oriented programming frameworks:
      </p>
      <ul>
        <li>No implementation lock</li>
        <li>Low coupling between components</li>
        <li>Component lifecycle management</li>
        <li>Configuration management and easy to use API</li>
        <li>Component meta-data framework and tools</li>
        <li>Service dependecy management</li>
        <li>Embeddable containers for standalone, J2EE and web environments</li>
      </ul>
      <p>
       In Component Oriented Programming (COP), reusable and
      replaceable components can be assembled in a container to
      provide application blocks.  Blocks in turn can be used to build
      anything from a client desktop application to an FTP server to a
      web service.  Avalon provides a variety of basic components and
      default application blocks in order to help you quickly build
      your own application solution.
      </p>
      <p>
       Given this, the Avalon team aims to:
      </p>
      <ul>
        <li>Provide a stable COP development platform (currently in
        JAVA)</li>
        <li>Create a rich set of client components API's and default
        implementations</li>
        <li>Develop complete container solutions</li>
        <li>Explore and extend COP development practices</li>
      </ul>
    </section>
    <section name="Avalon Products and Sub-Projects">
      <ul>
        <li><a href="product/containers/index.html"><strong>Containers</strong></a>: 
           several complete container implementations used to host
           components.
        </li>
        <li><a href="product/framework/index.html"><strong>Framework</strong></a>:
          provides a specification of design patterns and rules in the
          form of interfaces.
        </li>
        <li><a href="product/components/index.html"><strong>Components</strong></a>:
           contains container related utilities and simple core
           components. 
        </li>
      </ul>
    </section>
    <section name="What Next">
      <p>
       If you're new to Avalon or COP in general, "Welcome!"  You may
       be now wondering where to start.  The following should help you
       find what you're looking for.
      </p>
      <subsection name="Container Users">
       <p>
       Avalon provides a number of containers such as Merlin and
       Fortress.  For information about containers in general, see the
       <a href="product/containers/index.html">containers</a> section.  For other
       Avalon-based or Avalon-related container solutions, see the <a
       href="related/index.html">related projects</a> section.  Avalon is
       used in several external projects, such as Cocoon, OpenIM, and
       others.
       </p>
      </subsection>
      <subsection name="Component Developers">
       <p>
       If you're new to Avalon, be certain to check out the <a 
       href="doc/index.html">Articles</a> section, specifically, the
       <a href="developing/index.html">Developing With Avalon</a> white paper
       and the Getting Started Tutorial.  You may also want to look at the 
       Cornerstone documentation to examine existing utilities and components.
       </p>
      </subsection>
      <subsection name="Avalon Developers">
       <p>
       Whether you're a contributor or a committer, you'll should
       familiarize yourself with the <a
       href="community/process/code-standards.html">Coding Standards</a>
       document.  The <a href="community/index.html">Community</a>
       section also reviews various standards, policies, and practices
       within the Avalon community.
       </p>
      </subsection>
      <subsection name="About Component Oriented Programming">
       <p>
       If you're interested in learning more about component oriented
       programming, then in addition to the <a
       href="doc/index.html">Articles</a> section, look at the
       Framework documentation.  The <a
       href="../products/runtime/framework/index.html">Framework</a> 
       project contains
       sections of COP practices and is itself a good COP reference
       implementation.
       </p>
      </subsection>
      <subsection name="General Resources">
       <p>
       Don't forget to wade through the wealth of material on our <a
       href="http://wiki.apache.org/avalon">
       Wiki</a> site.  The <a href="about/resources/mailing-lists.html">mailing
       lists</a> are also an excellent resource for support and more
       information.
       </p>
      </subsection>
    </section>
  </body>
</document>
