<?xml version="1.0"?>

<!-- 
 Copyright 2004 Apache Software Foundation
 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <properties>
    <author email="dev@avalon.apache.org">Avalon Documentation Team</author>
    <title>Avalon Central</title>
  </properties> 

  <body>
    <section name="Using Merlin">
      <subsection name="Managing Dependencies - Manual Association">
        <p>
The manual dependencies tutorial covers additional information dealing 
with the explict control over dependency binding.  In this example we 
have HelloComponent with a dependency on two services of the same type. If we 
depended on classic merlin auto-assembly we would not necessarily get the 
desired result.  In such a situation, Merlin provides support for 
overriding the auto assembly process though explicit dependency directives
included inside a &lt;component/&gt; tag.
        </p>
        <p>
        Resources supporting this tutorial are contained in the 
        turorials/dependencies/manual package.
        </p>
        <p>
In the block.xml we have three component directives:
        </p>
<source><![CDATA[
     <component name="gloria" class="tutorial.IdentifiableComponent"/>
     <component name="nancy" class="tutorial.IdentifiableComponent"/>

     <component name="hello" class="tutorial.HelloComponent">
       <dependencies>
         <dependency key="primary" source="gloria"/>
         <dependency key="secondary" source="nancy"/>
       </dependencies>
     </component>
]]></source>
        <p>
        The "hello" component has been manually wired together using named 
        components references under a set of <dependency/> directives, thereby 
        overriding Merlin auto-assembly heuristics.
        </p>
      </subsection>

      <subsection name="Executing the demo">
        <p>
        Build and run the tutorial.
        </p>
        <source>
$ maven
$ merlin target\classes -execute
        </source>
        <p>
        In the logging output we see that Merlin has established and 
        and assigned the components we requested based on our directives
        in the block.xml file.
        </p>
<source>
[INFO   ] (tutorial.nancy): contextualize
[INFO   ] (tutorial.gloria): contextualize
[INFO   ] (tutorial.hello): initialization
[INFO   ] (tutorial.hello): assigned primary: /tutorial/gloria
[INFO   ] (tutorial.hello): assigned secondary: /tutorial/nancy
</source>
      </subsection>

      <subsection name="Advanced Features">
        <p>
        This completes the introduction to some of the basic features
        of the merlin platform.  More tutorials will be added so please check 
        for new releases and updates. In the meantime you may want to take a 
        look at some of Merlin's more <a href="../../advanced/index.html">advanced 
        features</a>. 
        </p>
      </subsection>



    </section>
  </body>

</document>




