<?xml version="1.0"?>

<!-- 
 Copyright 2004 Apache Software Foundation
 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <properties>
    <author email="dev@avalon.apache.org">Avalon Documentation Team</author>
    <title>Avalon Central</title>
  </properties> 

  <body>
    <section name="Using Merlin">
      <subsection name="Adding Configuration Support to the Component">
        <p>
        To be supplied with a configuration, our component must either 
        declare a Configuration as a constructor argument, or alternatively, 
        implement the Avalon Framework Configurable interface.  
        </p>

        <p>
        The following code
        is the HelloComponent extended to include a configuration constructor 
        argument and updates to log the source of the configuration based on 
        runtime information.
        </p>

        <p>
        Resources supporting this tutorial are contained in the 
        tutorials/configuration/injection directory.
        </p>
<source>
public class HelloComponent
{
   /**
    * Configuration of the component by the container.  The 
    * implementation get a child element named 'source' and 
    * assigns the value of the element to a local variable.
    *
    * @param config the component configuration
    * @exception ConfigurationException if a configuration error occurs
    */
    public HelloComponent( 
      final Logger logger, final Configuration config ) 
      throws ConfigurationException
    {
        logger.info( "instantiation" );
        final String source = 
          config.getChild( "source" ).getValue( "unknown" );
        final String message = "source: " + source;
        logger.info( message );
    }
}
</source>

        <p>
        The alternative approach to configuration supply is via the Avalon 
        Configurable interface - demonstrated in the following code example.
        </p>

        <p>
        Reter tutorials/configuration/block.
        </p>

<source>
/**
 * A configurable component.
 *
 * @avalon.component version="1.0" name="simple"
 */
public class HelloComponent extends AbstractLogEnabled 
  implements Configurable, Initializable
{
    private String m_source = "undefined";

   /**
    * Configuration of the component by the container.  The 
    * implementation get a child element named 'source' and 
    * assigns the value of the element to a local variable.
    *
    * @param config the component configuration
    * @exception ConfigurationException if a configuration error occurs
    */
    public void configure( Configuration config ) 
      throws ConfigurationException
    {
        getLogger().info( "configuration stage" );
        m_source = config.getChild( "source" ).getValue( "unknown" );
    }

   /**
    * Initialization of the component by the container.
    * @exception Exception if an initialization error occurs
    */
    public void initialize() throws Exception
    {
        getLogger().info( "initialization stage" );
        final String message = 
          "source: " + m_source;
        getLogger().info( message );
    }
}
</source>

      </subsection>
      <subsection name="Declaring a Configuration">

        <p>
        A number of different approaches to controlling the 
        configuration that is supplied to a component are presented in 
        the <a href="defaults.html">next tutorial</a>.
        </p>

      </subsection>
    </section>
  </body>

</document>




