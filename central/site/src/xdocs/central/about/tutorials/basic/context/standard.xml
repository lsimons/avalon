<?xml version="1.0"?>

<!-- 
 Copyright 2004 Apache Software Foundation
 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <properties>
    <author email="dev@avalon.apache.org">Avalon Documentation Team</author>
    <title>Avalon Central</title>
  </properties> 

  <body>
    <section name="Using Merlin">
      <subsection name="Managing Context">
        <p>
        This tutorial presents information about the management
        of the runtime context supplied to your component.
        </p>
        <p>
        Resources supporting this tutorial are contained in the 
        tutorials/context/avalon/ package.
        </p>
      </subsection>

      <subsection name="Merlin Standard Context Entries">
        <p>
        In order to receive a runtime context we need to update the 
        HelloComponent source so that it implements the Avalon 
        Contextualizable lifecycle stage interface.  Merlin will 
        build and supply a context object containing the following  
        four context entries:
        </p>
        <p><i>Merlin Standard Context Entries</i></p>
        <table>
        <tr>
          <th>Key</th><th>Class</th><th>Description</th>
        </tr>
        <tr>
          <td>urn:avalon:home</td><td>java.io.File</td>
          <td>The working directory.</td>
        </tr>
        <tr>
          <td>urn:avalon:temp</td><td>java.io.File</td>
          <td>The temporary directory that will be destroyed at the 
            end of the session.</td>
        </tr>
        <tr>
          <td>urn:avalon:name</td><td>java.lang.String</td>
          <td>The name assigned to the component.</td>
        </tr>
        <tr>
          <td>urn:avalon:partition</td><td>java.lang.String</td>
            <td>The assigned partition name.</td>
        </tr>
        </table>
      </subsection>

      <subsection name="Adding Context Support to the Component">
        <p>
        In order to receive a runtime context we need to update the 
        HelloComponent source so that it implements the Avalon 
        Contextualization stage interface.  Merlin will build and 
        supply a context object containing the standard four 
        context entries.
        </p>
        <p><i>HelloComponent.java</i></p>

<source>
package tutorial;

import java.io.File;

import org.apache.avalon.framework.logger.AbstractLogEnabled;
import org.apache.avalon.framework.context.Contextualizable;
import org.apache.avalon.framework.context.Context;
import org.apache.avalon.framework.context.ContextException;

/**
 * Component demonstrating access to standard context entries.
 * @avalon.component name="demo"
 */
public class HelloComponent extends AbstractLogEnabled 
  implements Contextualizable
{

    private File m_home = null;
    private File m_temp = null;
    private String m_name = "unknown";
    private String m_partition = "unknown";

   /**
    * Contextualization of the component by the container.
    * The context supplied by the container holds the 
    * Merlin standard context entries for the home and 
    * working directories, component name and partition.
    *
    * @avalon.context
    * @avalon.entry key="urn:avalon:name" 
    * @avalon.entry key="urn:avalon:partition" 
    * @avalon.entry key="urn:avalon:home" type="java.io.File"
    * @avalon.entry key="urn:avalon:temp" type="java.io.File"
    */
    public void contextualize( Context context )
      throws ContextException
    {
        m_home = (File) context.get( "urn:avalon:home" );
        m_temp = (File) context.get( "urn:avalon:temp" );
        m_name = (String) context.get( "urn:avalon:name" );
        m_partition = (String) context.get( "urn:avalon:partition" );

        StringBuffer buffer = new StringBuffer( "standard context entries" );
        buffer.append( "\n  name: " + m_name );
        buffer.append( "\n  home: " + m_home );
        buffer.append( "\n  temp: " + m_temp );
        buffer.append( "\n  partition: " + m_partition );

        getLogger().info( buffer.toString() );

    }
}
</source>
        <p>
        Build and run the tutorial.
        </p>
<source>
$ maven
$ merlin -execute target\classes
</source>
        <p>
        In the logging output we see the values provided by 
        Merlin to the component.
        </p>
<source>
[INFO   ] (tutorial.hello): standard context entries
  name: hello
  home: F:\dev\avalon\merlin\platform\tutorials\context\avalon\home\tutorial\hello
  temp: C:\TEMP\tutorial\hello
  partition: /tutorial/
</source>
      </subsection>

      <subsection name="Custom Entries">

        <p>
        The <a href="entries.html">next tutorial</a> shows how 
        Merlin provides support for creating custom context entries.
        </p>

      </subsection>
    </section>
  </body>
</document>




