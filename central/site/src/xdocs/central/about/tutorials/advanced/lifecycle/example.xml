<?xml version="1.0"?>

<!-- 
 Copyright 2004 Apache Software Foundation
 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <properties>
    <author email="dev@avalon.apache.org">Avalon Documentation Team</author>
    <title>Avalon Central</title>
  </properties> 

  <body>

  <section name="Lifecycle Tools Example">

    <subsection name="Creating your lifestyle stage interface">

<p>
The following interface is your domain specific lifecycle stage interface.  It is the interface that an extension handler will use to interact with your component during deployment and decommissioning.
</p>

      <source>
 public interface Exploitable
 {
    /**
     * Operation invoked by your exploitation manager.
     * @param message a message to be displayed
     */
     void exploit( String message );
 }
      </source>

    </subsection>

    <subsection name="Create the lifestyle extension handler">

<p>
An extension handler is the implementation class that will be activated by the Merlin container to handle domain specific tasks during the deployment and decommissioning phases.  The extension can implement either or both of the Creator and Accessor interfaces depeding on the particular extension requirements.  In this example we are defining a simple creation stage handler that supplies a message to an instance of Exploitable.
</p>
      <source>
 public class ExploitationManager implements Creator
 {
    /**
     * Operation invoked by a container to request creation
     * stage extension interception.
     * @param object a component to manager
     * @param context the context
     */
     public void create( Object object, Context context )
     {
         if( object instanceof Exploitable )
         {
             ((Expoitable)object).exploit( "hello" );
         }
     }

    /**
     * Operation invoked by a container to request destroy
     * stage extension interception.
     * @param object a component to manager
     * @param context the context
     */
     public void destroy( Object object, Context context )
     {
     }
 }
      </source>

<p>
To complete the definition of your extension handler you need to prepare the 
meta-info that will be used by Merlin to identify the extension and the stage 
interface it supports.  The following &lt;type/&gt; declaration includes an 
&lt;extensions/&gt; tag that contains a &lt;reference/&gt; element that 
includes the reference to the Exploitable lifecycle stage interface. This is 
the key that Merlin uses to associate a handler with a component.  If your 
extension class requires any specific context values, they should be declared 
in a &lt;context/&gt; element within the &lt;extension/&gt; element.
</p>

        <source><![CDATA[
<type>

   <info>
      <name>my-extension-handler</name>
   </info>

   <extensions>
     <extension type="Exploitable"/>
   </extensions>

</type>
]]></source>

    </subsection>

    <subsection name="Create a component implementing the stage interface">
      <source>
 public class MyComponent extends AbstractLogEnabled implements Exploitable
 {
    /**
     * Operation invoked by an exploitation manager.
     * @param message a message to be displayed
     */
     public void exploit( String message )
     {
         getLogger().info( message );
     }
 }
      </source>

<p>
To complete the defintion of your component you need to prepare the meta-info 
that will be used by Merlin to identify the stage interface it requires a 
handler for.  The following &lt;type/&gt; declaration includes a 
&lt;stage/&gt; tag that contains a &lt;reference/&gt; element that includes 
a reference to the Exploitable lifecycle stage interface. This is the key that 
Merlin uses to associate the component with a handler capable of handling the 
Exploitable interface.
</p>

        <source><![CDATA[
<type>

   <info>
      <name>my-component</name>
   </info>

   <stages>
     <stage type="Exploitable"/>
   </stages>

</type>

]]></source>
    </subsection>

    <subsection name="Execution">

<p>To execute the example you simply need to include a reference to your 
component within a Merlin container declaration.  The following XML source 
declares a Merlin kernel, container, and component.  You don't need to include 
the handler because Merlin can sort that out itself based on the information 
supplied in the meta-info declarations.</p>

<source><![CDATA[

     <component name="demo" class="MyComponent" activation="startup"/>

]]></source>

    </subsection>

  </section>

  </body>
</document>
