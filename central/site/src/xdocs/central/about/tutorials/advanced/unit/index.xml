<?xml version="1.0"?>

<!-- 
 Copyright 2004 Apache Software Foundation
 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <properties>
    <author email="dev@avalon.apache.org">Avalon Documentation Team</author>
    <title>Avalon Central</title>
  </properties> 

  <body>
    <section name="Advanced Features">
      <subsection name="Unit Tests">
        <p>
        The Merlin platform provides an abstract test case class that you
        can use as a component factory.  To create a Merlin based unit
        test you simply extend AbstractMerlinTestCase.
        </p>
        <p>
        To use AbstractMerlinTestCase you should include the following 
        dependency in you maven project definition.
        </p>
<source><![CDATA[
    <dependency>
      <groupId>merlin</groupId>
      <artifactId>merlin-unit</artifactId>
      <version>3.2.6-dev</version>
    </dependency>
]]></source>
        <p>
        The following code fragment declares a new test case using the 
        abstract Merlin test case.
        </p>
        <source>
import org.apache.avalon.merlin.unit.AbstractMerlinTestCase;

public class ExampleTestCase extends AbstractMerlinTestCase
{
    public ExampleTestCase( String name )
    {
        super( name );
    }

    // ...
}
        </source>
        <p>
        The default behaviour is to deploy a block based on the 
        deployment path ${basedir}/target/classes/.  Merlin will attempt
        to locate a block.xml file at the [DEPLOYMENT-PATH]/BLOCK-INF/block.xml. 
        To make sure that a block.xml file and component meta-info is available under 
        ${basedir}/target/classes/ you need to include the following resource
        statement in you maven project descriptor.
        </p>
<source><![CDATA[
  <build>
    <sourceDirectory>${basedir}/src/java/</sourceDirectory>
    <unitTestSourceDirectory>${basedir}/src/test/</unitTestSourceDirectory>
    <resources>
      <resource>
        <directory>${basedir}/conf</directory>
        <targetPath>BLOCK-INF</targetPath>
        <includes>
          <include>block.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>${basedir}/src/java</directory>
        <includes>
          <include>**/*.x*</include>
        </includes>
      </resource>
    </resources>
  </build>
]]></source>

        <p>
        You can now access components established by Merlin via 
        the component path.  For example, if your block.xml defines
        a component named "hello" in a container named "test" you 
        access the component by requesting the path "/test/hello".  
        </p>
        <p>
        The following code fragment demonstrates the usage of the 
        resolve method to locate a named component.
        </p>
<source><![CDATA[
public void testServiceResolution() throws Exception
{
    Hello hello = (Hello) resolve( "/test/hello" );
    assertNotHull( "hello", hello );
}
]]></source>

      </subsection>
      <subsection name="Customizing Merlin behaviour">
        <p>
        You can customize all of the deployment and runtime parameters
        of the embedded merlin instance by adding a "merlin.properties"
        file to your basedir.
        </p>
        <p>
        <i>Example merlin.properties</i>
        </p>
<source><![CDATA[
merlin.info = true
merlin.debug = true
merlin.override = conf/config.xml
]]></source>
      </subsection>
    </section>
  </body>

</document>




