<?xml version="1.0" encoding="UTF-8"?>

<!-- 
 Copyright 2004 Apache Software Foundation
 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>
  <properties>
    <author email="dev@avalon.apache.org">Avalon Documentation Team</author>
    <title>Apache Avalon: Framework</title>
  </properties> 

  <body>
    <section name="Products">
      <subsection name="Component Model">

      <p>The Avalon Component model is made up of a combination of classic
      interfaces that define the artifacts exchanged between a container and 
      a component.  The requirements presented by a component to container
      are expressed using meta-info descriptors that are colocated with 
      component classes.  Interfaces and default implementations are described
      under Avalon Framework package. The meta-info descriptors and related tools
      are included under the Avalon Meta package.</p>

      <table>
        <tr><th>Product</th><th>Description</th></tr>
        <tr>
          <td>
            <p>
              <a name="framework"/>
              <a href="../../../../products/runtime/system/framework/" 
              name="framework">Avalon Framework API and Implementation</a>
            </p>
          </td>
          <td>
            <p>The Avalon Framework API and Implementation consists of 
            interfaces that define relationships between commonly used 
            application components, best-of-practice pattern enforcements, and 
            several lightweight convenience implementations of the generic 
            components.</p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <a name="meta"/>
              <a href="../../../../products/runtime/system/meta/" name="meta">Avalon Meta</a>
            </p>
          </td>
          <td>
            <p>The Avalon Meta Model defines the functional criteria for 
            component types and services. A Type definition contains 
            information about deployment and runtime dependencies together 
            with information about the services that a component type can 
            provide.</p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <a name="util"/>
              <a href="../../../../products/runtime/system/util/" name="util">Avalon 
              Utilities</a>
            </p>
          </td>
          <td>
            <p>A set of utilities shared by framework components supporting 
            default property management, environment variable resolution, 
            exceptio reporting and a parameterized map implementation (using 
            within the repositroy package).</p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <a name="repository"/>
              <a href="../../../../products/runtime/system/repository/" 
                  name="repository">Avalon Repository</a>
            </p>
          </td>
          <td>
            <p>
              A joint initative by the Avalon Project and the Apache Directory 
              Project in the development of an inteligent bootstrappig, resource
              replication, and artifact management framework.
            </p>
          </td>
        </tr>
        <tr>
          <td>
            <a href="../../../../products/runtime/system/logging/logkit/index.html">Avalon 
            Logkit</a>
          </td>
          <td>
            <p>
             Logkit is a complete logging framework (like log4j) as an
             Avalon component.  Most Avalon containers use it as the
             default logging implementation. 
            </p>
          </td>
        </tr>

      </table>
      </subsection>
    </section>
  </body>
</document>
