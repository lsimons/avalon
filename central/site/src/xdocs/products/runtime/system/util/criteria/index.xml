<?xml version="1.0"?>

<!--
 * 
 * Copyright 2004 Apache Software Foundation
 * Licensed  under the  Apache License,  Version 2.0  (the "License");
 * you may not use  this file  except in  compliance with the License.
 * You may obtain a copy of the License at 
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed  under the  License is distributed on an "AS IS" BASIS,
 * WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 * implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
-->

<document>
  <properties>
    <author email="mcconnell@apache.org">Stephen McConnell</author>
    <title>Merlin Runtime</title>
  </properties>
  <body>
    <section name="Criteria">
      <subsection name="Overview">
        <p>
        The criteria package contains a parameterize Map implementation.
        A set of parameters are supplied on creation that are used by the 
        implementation to (a) qualify values supplied, and (b) resolve values
        that are requested.
        </p>
      </subsection>
      <subsection name="Example">

        <p>
        The criteria object created below is now restricted to 
        the two keys "name" and "home".  The user of the class can 
        assign String values which will be resolved to the type of 
        object declared by the corresponding parameter object.
        </p>
        <source>
Parameter[] params = new Parameter[]{
  new Parameter( "name", String.class, null ),
  new Parameter( "home", 
   File.class, new File( System.getProperty( "user.dir" ) ) ) };
Map criteria = new Criteria( params );
        </source>
        <p>
        For example:
        </p>
        <source>
public void setParameters( Map map )
{
    map.put( "home", "my-directory" );

    //
    // now just for fun - lets get the value using the "home"
    // key as a File
    //

    File home = (File) map.get( "home" );

    //
    // and just to prove the point - we can also put values
    // directory into the map the correspond to the parameterized 
    // type .. e.g.:
    // 

    map.put( "home", home );

}</source>
        <p>
        What all this means is that a we have a type safe Map implementation.
        </p>
      </subsection>
    </section>
  </body>

</document>


