<?xml version="1.0"?>

<!-- 
 Copyright 2004 Apache Software Foundation
 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>

  <properties>
    <title>Merlin JNDI</title>
    <author email="dev@avalon.apache.org">Avalon Development Team</author>
  </properties>

  <body>
    <section name="Merlin JNDI Connection">
      <p>
        <strong>Status: Under Development</strong>
      </p>
      <p>
        <strong>Since: Merlin 3.4</strong>
      </p>
      <p>
        The Merlin JNDI package provides support for the establishment of a 
        Merlin Kernel via JNDI.
      </p>
      <subsection name="Development Note">
        <p>
          This is an initial minimal JNDI connector implementation that enables
          the establishment of a Merlin Kernel via JNDI. This allows 
          establishment and access to a Merlin kernel based on a set of 
          properties containing the system and home path, the root block and
          internal kernel logging priority.
        </p>
        <p>
          Using the JNDI context, a servlet can do something like the following:
        </p>
<source>
   Context context = new InitialContext();
   Context env = (Context) context.lookup("java:comp/env");
   Kernel kernel = (Kernel) env.lookup("merlin/ServiceFactory");
   // then use the kernel to get the service that you want
</source>

        <p>
          The current implementation relies on the fact that the server.xml has 
          the definition of the root block to be loaded.  Currently the 
          connector is returning the kernel, however it should be possible to 
          return a naming context from which services are access via JNDI 
          lookups. If the initial lookup returns a context then it should be 
          possible to eliminate knowledge of the kernel - and keep things 
          focussed on simply accessing services.  This also brings in the 
          potential for including JNDI url resolution of services (i.e. service
          resolution with arguments) which seems to me a desirable direction.    
        </p>
      </subsection>
    </section>
  </body>

  <footer>
    <legal>
      Copyright (c) @year@ The Avalon Apache Project All rights reserved.
      $Revision: 1.1 $ $Date: 2004/04/03 05:34:14 $
    </legal>
  </footer>
</document>
