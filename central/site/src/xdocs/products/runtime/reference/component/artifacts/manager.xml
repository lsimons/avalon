<?xml version="1.0"?>

<!-- 
 Copyright 2004 Apache Software Foundation
 Licensed  under the  Apache License,  Version 2.0  (the "License");
 you may not use  this file  except in  compliance with the License.
 You may obtain a copy of the License at 
 
   http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed  under the  License is distributed on an "AS IS" BASIS,
 WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 implied.
 
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>

  <properties>
    <author email="mcconnell@apache.org">Stephen McConnell</author>
    <title>Service Manager Artifact</title>
  </properties>

  <body>

    <section name="Service Manager Artifact">

      <subsection name="Overview">
        <p>
A <a href="../../../../../avalon/runtime/@RUNTIME-VERSION@/api/org/apache/avalon/framework/service/ServiceManager.html">ServiceManager</a> 
is used as a mechanisms to provide dependent services to a component.  A 
component implementation declares dependencies using the 
<a href="../../../system/meta/tags/dependency.html">@avalon.dependency</a> tag.
Dependencies may be declared relative to the component constructor or through 
the optional 
<a href="../../../../../avalon/runtime/@RUNTIME-VERSION@/api/org/apache/avalon/framework/service/Serviceable.html">Serviceable</a> 
delivery interface.
        </p>
        <p>
          <i>Example of a constructor based declaration of service 
          dependencies.</i>
        </p>
<source>
   /**
    * Creation of a new instance.  The component receives
    * a service manager via constructor that is pre-populated
    * with services based on the avalon.dependency declarations.
    *
    * @param manager the service manager
    *
    * @avalon.dependency type="tutorial.RandomGenerator" key="random"
    * @avalon.dependency type="tutorial.Identifiable"
    */
    public DefaultWidget( ServiceManager manager )
      throws ServiceException
    {
        m_random = (RandomGenerator) manager.lookup( "random" );
        m_identifiable = (Identifiable) manager.lookup( 
          Identifiable.class.getName() );
    }
</source>
      </subsection>

      <subsection name="Lookup and Release Semantics">
        <p>
Services are aquired by passing the dependency key under the lookup operation.  If no key is declared, the component can aquire the service using the value of the type attribute.  When a component no longer requires a service it can relase the service, thereby notifying the container that the service instance is no longer required.   While release of a service is optional, component authors should be aware that the component implementation underlying the service may be pooled. As such, release of the service may have a direct impact on memory consumption and overall performance.
        </p>
        <p><i>Example of an aquisition and release cycle.</i></p>
<source>
   /**
    * Creation of a new instance during which a service is aquired,
    * used, and released.
    *
    * @param manager the service manager
    *
    * @avalon.dependency type="tutorial.RandomGenerator" key="random"
    */
    public DefaultWidget( ServiceManager manager )
      throws ServiceException
    {
        RandomGenerator random = 
          (RandomGenerator) manager.lookup( "random" );
        doSomething( random.getValue() );
        manager.release( random );
    }
</source>

      </subsection>

    </section>

  </body>

</document>


